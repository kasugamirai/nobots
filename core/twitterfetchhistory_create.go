// Code generated by ent, DO NOT EDIT.

package core

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"freefrom.space/nobot/core/twitterfetchhistory"
)

// TwitterFetchHistoryCreate is the builder for creating a TwitterFetchHistory entity.
type TwitterFetchHistoryCreate struct {
	config
	mutation *TwitterFetchHistoryMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetItemID sets the "item_id" field.
func (tfhc *TwitterFetchHistoryCreate) SetItemID(s string) *TwitterFetchHistoryCreate {
	tfhc.mutation.SetItemID(s)
	return tfhc
}

// SetName sets the "name" field.
func (tfhc *TwitterFetchHistoryCreate) SetName(s string) *TwitterFetchHistoryCreate {
	tfhc.mutation.SetName(s)
	return tfhc
}

// SetFetchType sets the "fetch_type" field.
func (tfhc *TwitterFetchHistoryCreate) SetFetchType(s string) *TwitterFetchHistoryCreate {
	tfhc.mutation.SetFetchType(s)
	return tfhc
}

// SetFetchAt sets the "fetch_at" field.
func (tfhc *TwitterFetchHistoryCreate) SetFetchAt(t time.Time) *TwitterFetchHistoryCreate {
	tfhc.mutation.SetFetchAt(t)
	return tfhc
}

// SetNillableFetchAt sets the "fetch_at" field if the given value is not nil.
func (tfhc *TwitterFetchHistoryCreate) SetNillableFetchAt(t *time.Time) *TwitterFetchHistoryCreate {
	if t != nil {
		tfhc.SetFetchAt(*t)
	}
	return tfhc
}

// SetContent sets the "content" field.
func (tfhc *TwitterFetchHistoryCreate) SetContent(s string) *TwitterFetchHistoryCreate {
	tfhc.mutation.SetContent(s)
	return tfhc
}

// Mutation returns the TwitterFetchHistoryMutation object of the builder.
func (tfhc *TwitterFetchHistoryCreate) Mutation() *TwitterFetchHistoryMutation {
	return tfhc.mutation
}

// Save creates the TwitterFetchHistory in the database.
func (tfhc *TwitterFetchHistoryCreate) Save(ctx context.Context) (*TwitterFetchHistory, error) {
	tfhc.defaults()
	return withHooks(ctx, tfhc.sqlSave, tfhc.mutation, tfhc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tfhc *TwitterFetchHistoryCreate) SaveX(ctx context.Context) *TwitterFetchHistory {
	v, err := tfhc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tfhc *TwitterFetchHistoryCreate) Exec(ctx context.Context) error {
	_, err := tfhc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tfhc *TwitterFetchHistoryCreate) ExecX(ctx context.Context) {
	if err := tfhc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tfhc *TwitterFetchHistoryCreate) defaults() {
	if _, ok := tfhc.mutation.FetchAt(); !ok {
		v := twitterfetchhistory.DefaultFetchAt()
		tfhc.mutation.SetFetchAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tfhc *TwitterFetchHistoryCreate) check() error {
	if _, ok := tfhc.mutation.ItemID(); !ok {
		return &ValidationError{Name: "item_id", err: errors.New(`core: missing required field "TwitterFetchHistory.item_id"`)}
	}
	if _, ok := tfhc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`core: missing required field "TwitterFetchHistory.name"`)}
	}
	if _, ok := tfhc.mutation.FetchType(); !ok {
		return &ValidationError{Name: "fetch_type", err: errors.New(`core: missing required field "TwitterFetchHistory.fetch_type"`)}
	}
	if _, ok := tfhc.mutation.FetchAt(); !ok {
		return &ValidationError{Name: "fetch_at", err: errors.New(`core: missing required field "TwitterFetchHistory.fetch_at"`)}
	}
	if _, ok := tfhc.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`core: missing required field "TwitterFetchHistory.content"`)}
	}
	return nil
}

func (tfhc *TwitterFetchHistoryCreate) sqlSave(ctx context.Context) (*TwitterFetchHistory, error) {
	if err := tfhc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tfhc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tfhc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	tfhc.mutation.id = &_node.ID
	tfhc.mutation.done = true
	return _node, nil
}

func (tfhc *TwitterFetchHistoryCreate) createSpec() (*TwitterFetchHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &TwitterFetchHistory{config: tfhc.config}
		_spec = sqlgraph.NewCreateSpec(twitterfetchhistory.Table, sqlgraph.NewFieldSpec(twitterfetchhistory.FieldID, field.TypeInt))
	)
	_spec.Schema = tfhc.schemaConfig.TwitterFetchHistory
	_spec.OnConflict = tfhc.conflict
	if value, ok := tfhc.mutation.ItemID(); ok {
		_spec.SetField(twitterfetchhistory.FieldItemID, field.TypeString, value)
		_node.ItemID = value
	}
	if value, ok := tfhc.mutation.Name(); ok {
		_spec.SetField(twitterfetchhistory.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := tfhc.mutation.FetchType(); ok {
		_spec.SetField(twitterfetchhistory.FieldFetchType, field.TypeString, value)
		_node.FetchType = value
	}
	if value, ok := tfhc.mutation.FetchAt(); ok {
		_spec.SetField(twitterfetchhistory.FieldFetchAt, field.TypeTime, value)
		_node.FetchAt = value
	}
	if value, ok := tfhc.mutation.Content(); ok {
		_spec.SetField(twitterfetchhistory.FieldContent, field.TypeString, value)
		_node.Content = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TwitterFetchHistory.Create().
//		SetItemID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TwitterFetchHistoryUpsert) {
//			SetItemID(v+v).
//		}).
//		Exec(ctx)
func (tfhc *TwitterFetchHistoryCreate) OnConflict(opts ...sql.ConflictOption) *TwitterFetchHistoryUpsertOne {
	tfhc.conflict = opts
	return &TwitterFetchHistoryUpsertOne{
		create: tfhc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TwitterFetchHistory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tfhc *TwitterFetchHistoryCreate) OnConflictColumns(columns ...string) *TwitterFetchHistoryUpsertOne {
	tfhc.conflict = append(tfhc.conflict, sql.ConflictColumns(columns...))
	return &TwitterFetchHistoryUpsertOne{
		create: tfhc,
	}
}

type (
	// TwitterFetchHistoryUpsertOne is the builder for "upsert"-ing
	//  one TwitterFetchHistory node.
	TwitterFetchHistoryUpsertOne struct {
		create *TwitterFetchHistoryCreate
	}

	// TwitterFetchHistoryUpsert is the "OnConflict" setter.
	TwitterFetchHistoryUpsert struct {
		*sql.UpdateSet
	}
)

// SetItemID sets the "item_id" field.
func (u *TwitterFetchHistoryUpsert) SetItemID(v string) *TwitterFetchHistoryUpsert {
	u.Set(twitterfetchhistory.FieldItemID, v)
	return u
}

// UpdateItemID sets the "item_id" field to the value that was provided on create.
func (u *TwitterFetchHistoryUpsert) UpdateItemID() *TwitterFetchHistoryUpsert {
	u.SetExcluded(twitterfetchhistory.FieldItemID)
	return u
}

// SetName sets the "name" field.
func (u *TwitterFetchHistoryUpsert) SetName(v string) *TwitterFetchHistoryUpsert {
	u.Set(twitterfetchhistory.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TwitterFetchHistoryUpsert) UpdateName() *TwitterFetchHistoryUpsert {
	u.SetExcluded(twitterfetchhistory.FieldName)
	return u
}

// SetFetchType sets the "fetch_type" field.
func (u *TwitterFetchHistoryUpsert) SetFetchType(v string) *TwitterFetchHistoryUpsert {
	u.Set(twitterfetchhistory.FieldFetchType, v)
	return u
}

// UpdateFetchType sets the "fetch_type" field to the value that was provided on create.
func (u *TwitterFetchHistoryUpsert) UpdateFetchType() *TwitterFetchHistoryUpsert {
	u.SetExcluded(twitterfetchhistory.FieldFetchType)
	return u
}

// SetFetchAt sets the "fetch_at" field.
func (u *TwitterFetchHistoryUpsert) SetFetchAt(v time.Time) *TwitterFetchHistoryUpsert {
	u.Set(twitterfetchhistory.FieldFetchAt, v)
	return u
}

// UpdateFetchAt sets the "fetch_at" field to the value that was provided on create.
func (u *TwitterFetchHistoryUpsert) UpdateFetchAt() *TwitterFetchHistoryUpsert {
	u.SetExcluded(twitterfetchhistory.FieldFetchAt)
	return u
}

// SetContent sets the "content" field.
func (u *TwitterFetchHistoryUpsert) SetContent(v string) *TwitterFetchHistoryUpsert {
	u.Set(twitterfetchhistory.FieldContent, v)
	return u
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *TwitterFetchHistoryUpsert) UpdateContent() *TwitterFetchHistoryUpsert {
	u.SetExcluded(twitterfetchhistory.FieldContent)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.TwitterFetchHistory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TwitterFetchHistoryUpsertOne) UpdateNewValues() *TwitterFetchHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TwitterFetchHistory.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TwitterFetchHistoryUpsertOne) Ignore() *TwitterFetchHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TwitterFetchHistoryUpsertOne) DoNothing() *TwitterFetchHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TwitterFetchHistoryCreate.OnConflict
// documentation for more info.
func (u *TwitterFetchHistoryUpsertOne) Update(set func(*TwitterFetchHistoryUpsert)) *TwitterFetchHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TwitterFetchHistoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetItemID sets the "item_id" field.
func (u *TwitterFetchHistoryUpsertOne) SetItemID(v string) *TwitterFetchHistoryUpsertOne {
	return u.Update(func(s *TwitterFetchHistoryUpsert) {
		s.SetItemID(v)
	})
}

// UpdateItemID sets the "item_id" field to the value that was provided on create.
func (u *TwitterFetchHistoryUpsertOne) UpdateItemID() *TwitterFetchHistoryUpsertOne {
	return u.Update(func(s *TwitterFetchHistoryUpsert) {
		s.UpdateItemID()
	})
}

// SetName sets the "name" field.
func (u *TwitterFetchHistoryUpsertOne) SetName(v string) *TwitterFetchHistoryUpsertOne {
	return u.Update(func(s *TwitterFetchHistoryUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TwitterFetchHistoryUpsertOne) UpdateName() *TwitterFetchHistoryUpsertOne {
	return u.Update(func(s *TwitterFetchHistoryUpsert) {
		s.UpdateName()
	})
}

// SetFetchType sets the "fetch_type" field.
func (u *TwitterFetchHistoryUpsertOne) SetFetchType(v string) *TwitterFetchHistoryUpsertOne {
	return u.Update(func(s *TwitterFetchHistoryUpsert) {
		s.SetFetchType(v)
	})
}

// UpdateFetchType sets the "fetch_type" field to the value that was provided on create.
func (u *TwitterFetchHistoryUpsertOne) UpdateFetchType() *TwitterFetchHistoryUpsertOne {
	return u.Update(func(s *TwitterFetchHistoryUpsert) {
		s.UpdateFetchType()
	})
}

// SetFetchAt sets the "fetch_at" field.
func (u *TwitterFetchHistoryUpsertOne) SetFetchAt(v time.Time) *TwitterFetchHistoryUpsertOne {
	return u.Update(func(s *TwitterFetchHistoryUpsert) {
		s.SetFetchAt(v)
	})
}

// UpdateFetchAt sets the "fetch_at" field to the value that was provided on create.
func (u *TwitterFetchHistoryUpsertOne) UpdateFetchAt() *TwitterFetchHistoryUpsertOne {
	return u.Update(func(s *TwitterFetchHistoryUpsert) {
		s.UpdateFetchAt()
	})
}

// SetContent sets the "content" field.
func (u *TwitterFetchHistoryUpsertOne) SetContent(v string) *TwitterFetchHistoryUpsertOne {
	return u.Update(func(s *TwitterFetchHistoryUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *TwitterFetchHistoryUpsertOne) UpdateContent() *TwitterFetchHistoryUpsertOne {
	return u.Update(func(s *TwitterFetchHistoryUpsert) {
		s.UpdateContent()
	})
}

// Exec executes the query.
func (u *TwitterFetchHistoryUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("core: missing options for TwitterFetchHistoryCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TwitterFetchHistoryUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TwitterFetchHistoryUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TwitterFetchHistoryUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TwitterFetchHistoryCreateBulk is the builder for creating many TwitterFetchHistory entities in bulk.
type TwitterFetchHistoryCreateBulk struct {
	config
	err      error
	builders []*TwitterFetchHistoryCreate
	conflict []sql.ConflictOption
}

// Save creates the TwitterFetchHistory entities in the database.
func (tfhcb *TwitterFetchHistoryCreateBulk) Save(ctx context.Context) ([]*TwitterFetchHistory, error) {
	if tfhcb.err != nil {
		return nil, tfhcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tfhcb.builders))
	nodes := make([]*TwitterFetchHistory, len(tfhcb.builders))
	mutators := make([]Mutator, len(tfhcb.builders))
	for i := range tfhcb.builders {
		func(i int, root context.Context) {
			builder := tfhcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TwitterFetchHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tfhcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tfhcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tfhcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tfhcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tfhcb *TwitterFetchHistoryCreateBulk) SaveX(ctx context.Context) []*TwitterFetchHistory {
	v, err := tfhcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tfhcb *TwitterFetchHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := tfhcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tfhcb *TwitterFetchHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := tfhcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TwitterFetchHistory.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TwitterFetchHistoryUpsert) {
//			SetItemID(v+v).
//		}).
//		Exec(ctx)
func (tfhcb *TwitterFetchHistoryCreateBulk) OnConflict(opts ...sql.ConflictOption) *TwitterFetchHistoryUpsertBulk {
	tfhcb.conflict = opts
	return &TwitterFetchHistoryUpsertBulk{
		create: tfhcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TwitterFetchHistory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tfhcb *TwitterFetchHistoryCreateBulk) OnConflictColumns(columns ...string) *TwitterFetchHistoryUpsertBulk {
	tfhcb.conflict = append(tfhcb.conflict, sql.ConflictColumns(columns...))
	return &TwitterFetchHistoryUpsertBulk{
		create: tfhcb,
	}
}

// TwitterFetchHistoryUpsertBulk is the builder for "upsert"-ing
// a bulk of TwitterFetchHistory nodes.
type TwitterFetchHistoryUpsertBulk struct {
	create *TwitterFetchHistoryCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TwitterFetchHistory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TwitterFetchHistoryUpsertBulk) UpdateNewValues() *TwitterFetchHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TwitterFetchHistory.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TwitterFetchHistoryUpsertBulk) Ignore() *TwitterFetchHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TwitterFetchHistoryUpsertBulk) DoNothing() *TwitterFetchHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TwitterFetchHistoryCreateBulk.OnConflict
// documentation for more info.
func (u *TwitterFetchHistoryUpsertBulk) Update(set func(*TwitterFetchHistoryUpsert)) *TwitterFetchHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TwitterFetchHistoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetItemID sets the "item_id" field.
func (u *TwitterFetchHistoryUpsertBulk) SetItemID(v string) *TwitterFetchHistoryUpsertBulk {
	return u.Update(func(s *TwitterFetchHistoryUpsert) {
		s.SetItemID(v)
	})
}

// UpdateItemID sets the "item_id" field to the value that was provided on create.
func (u *TwitterFetchHistoryUpsertBulk) UpdateItemID() *TwitterFetchHistoryUpsertBulk {
	return u.Update(func(s *TwitterFetchHistoryUpsert) {
		s.UpdateItemID()
	})
}

// SetName sets the "name" field.
func (u *TwitterFetchHistoryUpsertBulk) SetName(v string) *TwitterFetchHistoryUpsertBulk {
	return u.Update(func(s *TwitterFetchHistoryUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TwitterFetchHistoryUpsertBulk) UpdateName() *TwitterFetchHistoryUpsertBulk {
	return u.Update(func(s *TwitterFetchHistoryUpsert) {
		s.UpdateName()
	})
}

// SetFetchType sets the "fetch_type" field.
func (u *TwitterFetchHistoryUpsertBulk) SetFetchType(v string) *TwitterFetchHistoryUpsertBulk {
	return u.Update(func(s *TwitterFetchHistoryUpsert) {
		s.SetFetchType(v)
	})
}

// UpdateFetchType sets the "fetch_type" field to the value that was provided on create.
func (u *TwitterFetchHistoryUpsertBulk) UpdateFetchType() *TwitterFetchHistoryUpsertBulk {
	return u.Update(func(s *TwitterFetchHistoryUpsert) {
		s.UpdateFetchType()
	})
}

// SetFetchAt sets the "fetch_at" field.
func (u *TwitterFetchHistoryUpsertBulk) SetFetchAt(v time.Time) *TwitterFetchHistoryUpsertBulk {
	return u.Update(func(s *TwitterFetchHistoryUpsert) {
		s.SetFetchAt(v)
	})
}

// UpdateFetchAt sets the "fetch_at" field to the value that was provided on create.
func (u *TwitterFetchHistoryUpsertBulk) UpdateFetchAt() *TwitterFetchHistoryUpsertBulk {
	return u.Update(func(s *TwitterFetchHistoryUpsert) {
		s.UpdateFetchAt()
	})
}

// SetContent sets the "content" field.
func (u *TwitterFetchHistoryUpsertBulk) SetContent(v string) *TwitterFetchHistoryUpsertBulk {
	return u.Update(func(s *TwitterFetchHistoryUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *TwitterFetchHistoryUpsertBulk) UpdateContent() *TwitterFetchHistoryUpsertBulk {
	return u.Update(func(s *TwitterFetchHistoryUpsert) {
		s.UpdateContent()
	})
}

// Exec executes the query.
func (u *TwitterFetchHistoryUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("core: OnConflict was set for builder %d. Set it on the TwitterFetchHistoryCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("core: missing options for TwitterFetchHistoryCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TwitterFetchHistoryUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
