// Code generated by ent, DO NOT EDIT.

package core

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"freefrom.space/nobot/core/internal"
	"freefrom.space/nobot/core/predicate"
	"freefrom.space/nobot/core/twitterfetchhistory"
)

// TwitterFetchHistoryDelete is the builder for deleting a TwitterFetchHistory entity.
type TwitterFetchHistoryDelete struct {
	config
	hooks    []Hook
	mutation *TwitterFetchHistoryMutation
}

// Where appends a list predicates to the TwitterFetchHistoryDelete builder.
func (tfhd *TwitterFetchHistoryDelete) Where(ps ...predicate.TwitterFetchHistory) *TwitterFetchHistoryDelete {
	tfhd.mutation.Where(ps...)
	return tfhd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (tfhd *TwitterFetchHistoryDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, tfhd.sqlExec, tfhd.mutation, tfhd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (tfhd *TwitterFetchHistoryDelete) ExecX(ctx context.Context) int {
	n, err := tfhd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (tfhd *TwitterFetchHistoryDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(twitterfetchhistory.Table, sqlgraph.NewFieldSpec(twitterfetchhistory.FieldID, field.TypeInt))
	_spec.Node.Schema = tfhd.schemaConfig.TwitterFetchHistory
	ctx = internal.NewSchemaConfigContext(ctx, tfhd.schemaConfig)
	if ps := tfhd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, tfhd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	tfhd.mutation.done = true
	return affected, err
}

// TwitterFetchHistoryDeleteOne is the builder for deleting a single TwitterFetchHistory entity.
type TwitterFetchHistoryDeleteOne struct {
	tfhd *TwitterFetchHistoryDelete
}

// Where appends a list predicates to the TwitterFetchHistoryDelete builder.
func (tfhdo *TwitterFetchHistoryDeleteOne) Where(ps ...predicate.TwitterFetchHistory) *TwitterFetchHistoryDeleteOne {
	tfhdo.tfhd.mutation.Where(ps...)
	return tfhdo
}

// Exec executes the deletion query.
func (tfhdo *TwitterFetchHistoryDeleteOne) Exec(ctx context.Context) error {
	n, err := tfhdo.tfhd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{twitterfetchhistory.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (tfhdo *TwitterFetchHistoryDeleteOne) ExecX(ctx context.Context) {
	if err := tfhdo.Exec(ctx); err != nil {
		panic(err)
	}
}
