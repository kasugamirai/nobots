// Code generated by ent, DO NOT EDIT.

package core

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"freefrom.space/nobot/core/events"
	"freefrom.space/nobot/core/internal"
	"freefrom.space/nobot/core/predicate"
)

// EventsUpdate is the builder for updating Events entities.
type EventsUpdate struct {
	config
	hooks     []Hook
	mutation  *EventsMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the EventsUpdate builder.
func (eu *EventsUpdate) Where(ps ...predicate.Events) *EventsUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetEventID sets the "event_id" field.
func (eu *EventsUpdate) SetEventID(b []byte) *EventsUpdate {
	eu.mutation.SetEventID(b)
	return eu
}

// SetPubkey sets the "pubkey" field.
func (eu *EventsUpdate) SetPubkey(b []byte) *EventsUpdate {
	eu.mutation.SetPubkey(b)
	return eu
}

// SetCreatedAt sets the "created_at" field.
func (eu *EventsUpdate) SetCreatedAt(t time.Time) *EventsUpdate {
	eu.mutation.SetCreatedAt(t)
	return eu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (eu *EventsUpdate) SetNillableCreatedAt(t *time.Time) *EventsUpdate {
	if t != nil {
		eu.SetCreatedAt(*t)
	}
	return eu
}

// SetDeletedAt sets the "deleted_at" field.
func (eu *EventsUpdate) SetDeletedAt(t time.Time) *EventsUpdate {
	eu.mutation.SetDeletedAt(t)
	return eu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (eu *EventsUpdate) SetNillableDeletedAt(t *time.Time) *EventsUpdate {
	if t != nil {
		eu.SetDeletedAt(*t)
	}
	return eu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (eu *EventsUpdate) ClearDeletedAt() *EventsUpdate {
	eu.mutation.ClearDeletedAt()
	return eu
}

// SetKind sets the "kind" field.
func (eu *EventsUpdate) SetKind(i int64) *EventsUpdate {
	eu.mutation.ResetKind()
	eu.mutation.SetKind(i)
	return eu
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (eu *EventsUpdate) SetNillableKind(i *int64) *EventsUpdate {
	if i != nil {
		eu.SetKind(*i)
	}
	return eu
}

// AddKind adds i to the "kind" field.
func (eu *EventsUpdate) AddKind(i int64) *EventsUpdate {
	eu.mutation.AddKind(i)
	return eu
}

// SetTags sets the "tags" field.
func (eu *EventsUpdate) SetTags(s [][]string) *EventsUpdate {
	eu.mutation.SetTags(s)
	return eu
}

// AppendTags appends s to the "tags" field.
func (eu *EventsUpdate) AppendTags(s [][]string) *EventsUpdate {
	eu.mutation.AppendTags(s)
	return eu
}

// SetContent sets the "content" field.
func (eu *EventsUpdate) SetContent(s string) *EventsUpdate {
	eu.mutation.SetContent(s)
	return eu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (eu *EventsUpdate) SetNillableContent(s *string) *EventsUpdate {
	if s != nil {
		eu.SetContent(*s)
	}
	return eu
}

// SetSig sets the "sig" field.
func (eu *EventsUpdate) SetSig(b []byte) *EventsUpdate {
	eu.mutation.SetSig(b)
	return eu
}

// Mutation returns the EventsMutation object of the builder.
func (eu *EventsUpdate) Mutation() *EventsMutation {
	return eu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *EventsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, eu.sqlSave, eu.mutation, eu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EventsUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EventsUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EventsUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (eu *EventsUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *EventsUpdate {
	eu.modifiers = append(eu.modifiers, modifiers...)
	return eu
}

func (eu *EventsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(events.Table, events.Columns, sqlgraph.NewFieldSpec(events.FieldID, field.TypeInt64))
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.EventID(); ok {
		_spec.SetField(events.FieldEventID, field.TypeBytes, value)
	}
	if value, ok := eu.mutation.Pubkey(); ok {
		_spec.SetField(events.FieldPubkey, field.TypeBytes, value)
	}
	if value, ok := eu.mutation.CreatedAt(); ok {
		_spec.SetField(events.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := eu.mutation.DeletedAt(); ok {
		_spec.SetField(events.FieldDeletedAt, field.TypeTime, value)
	}
	if eu.mutation.DeletedAtCleared() {
		_spec.ClearField(events.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := eu.mutation.Kind(); ok {
		_spec.SetField(events.FieldKind, field.TypeInt64, value)
	}
	if value, ok := eu.mutation.AddedKind(); ok {
		_spec.AddField(events.FieldKind, field.TypeInt64, value)
	}
	if value, ok := eu.mutation.Tags(); ok {
		_spec.SetField(events.FieldTags, field.TypeJSON, value)
	}
	if value, ok := eu.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, events.FieldTags, value)
		})
	}
	if value, ok := eu.mutation.Content(); ok {
		_spec.SetField(events.FieldContent, field.TypeString, value)
	}
	if value, ok := eu.mutation.Sig(); ok {
		_spec.SetField(events.FieldSig, field.TypeBytes, value)
	}
	_spec.Node.Schema = eu.schemaConfig.Events
	ctx = internal.NewSchemaConfigContext(ctx, eu.schemaConfig)
	_spec.AddModifiers(eu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{events.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eu.mutation.done = true
	return n, nil
}

// EventsUpdateOne is the builder for updating a single Events entity.
type EventsUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *EventsMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetEventID sets the "event_id" field.
func (euo *EventsUpdateOne) SetEventID(b []byte) *EventsUpdateOne {
	euo.mutation.SetEventID(b)
	return euo
}

// SetPubkey sets the "pubkey" field.
func (euo *EventsUpdateOne) SetPubkey(b []byte) *EventsUpdateOne {
	euo.mutation.SetPubkey(b)
	return euo
}

// SetCreatedAt sets the "created_at" field.
func (euo *EventsUpdateOne) SetCreatedAt(t time.Time) *EventsUpdateOne {
	euo.mutation.SetCreatedAt(t)
	return euo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (euo *EventsUpdateOne) SetNillableCreatedAt(t *time.Time) *EventsUpdateOne {
	if t != nil {
		euo.SetCreatedAt(*t)
	}
	return euo
}

// SetDeletedAt sets the "deleted_at" field.
func (euo *EventsUpdateOne) SetDeletedAt(t time.Time) *EventsUpdateOne {
	euo.mutation.SetDeletedAt(t)
	return euo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (euo *EventsUpdateOne) SetNillableDeletedAt(t *time.Time) *EventsUpdateOne {
	if t != nil {
		euo.SetDeletedAt(*t)
	}
	return euo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (euo *EventsUpdateOne) ClearDeletedAt() *EventsUpdateOne {
	euo.mutation.ClearDeletedAt()
	return euo
}

// SetKind sets the "kind" field.
func (euo *EventsUpdateOne) SetKind(i int64) *EventsUpdateOne {
	euo.mutation.ResetKind()
	euo.mutation.SetKind(i)
	return euo
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (euo *EventsUpdateOne) SetNillableKind(i *int64) *EventsUpdateOne {
	if i != nil {
		euo.SetKind(*i)
	}
	return euo
}

// AddKind adds i to the "kind" field.
func (euo *EventsUpdateOne) AddKind(i int64) *EventsUpdateOne {
	euo.mutation.AddKind(i)
	return euo
}

// SetTags sets the "tags" field.
func (euo *EventsUpdateOne) SetTags(s [][]string) *EventsUpdateOne {
	euo.mutation.SetTags(s)
	return euo
}

// AppendTags appends s to the "tags" field.
func (euo *EventsUpdateOne) AppendTags(s [][]string) *EventsUpdateOne {
	euo.mutation.AppendTags(s)
	return euo
}

// SetContent sets the "content" field.
func (euo *EventsUpdateOne) SetContent(s string) *EventsUpdateOne {
	euo.mutation.SetContent(s)
	return euo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (euo *EventsUpdateOne) SetNillableContent(s *string) *EventsUpdateOne {
	if s != nil {
		euo.SetContent(*s)
	}
	return euo
}

// SetSig sets the "sig" field.
func (euo *EventsUpdateOne) SetSig(b []byte) *EventsUpdateOne {
	euo.mutation.SetSig(b)
	return euo
}

// Mutation returns the EventsMutation object of the builder.
func (euo *EventsUpdateOne) Mutation() *EventsMutation {
	return euo.mutation
}

// Where appends a list predicates to the EventsUpdate builder.
func (euo *EventsUpdateOne) Where(ps ...predicate.Events) *EventsUpdateOne {
	euo.mutation.Where(ps...)
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *EventsUpdateOne) Select(field string, fields ...string) *EventsUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Events entity.
func (euo *EventsUpdateOne) Save(ctx context.Context) (*Events, error) {
	return withHooks(ctx, euo.sqlSave, euo.mutation, euo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EventsUpdateOne) SaveX(ctx context.Context) *Events {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EventsUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EventsUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (euo *EventsUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *EventsUpdateOne {
	euo.modifiers = append(euo.modifiers, modifiers...)
	return euo
}

func (euo *EventsUpdateOne) sqlSave(ctx context.Context) (_node *Events, err error) {
	_spec := sqlgraph.NewUpdateSpec(events.Table, events.Columns, sqlgraph.NewFieldSpec(events.FieldID, field.TypeInt64))
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`core: missing "Events.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, events.FieldID)
		for _, f := range fields {
			if !events.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("core: invalid field %q for query", f)}
			}
			if f != events.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.EventID(); ok {
		_spec.SetField(events.FieldEventID, field.TypeBytes, value)
	}
	if value, ok := euo.mutation.Pubkey(); ok {
		_spec.SetField(events.FieldPubkey, field.TypeBytes, value)
	}
	if value, ok := euo.mutation.CreatedAt(); ok {
		_spec.SetField(events.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := euo.mutation.DeletedAt(); ok {
		_spec.SetField(events.FieldDeletedAt, field.TypeTime, value)
	}
	if euo.mutation.DeletedAtCleared() {
		_spec.ClearField(events.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := euo.mutation.Kind(); ok {
		_spec.SetField(events.FieldKind, field.TypeInt64, value)
	}
	if value, ok := euo.mutation.AddedKind(); ok {
		_spec.AddField(events.FieldKind, field.TypeInt64, value)
	}
	if value, ok := euo.mutation.Tags(); ok {
		_spec.SetField(events.FieldTags, field.TypeJSON, value)
	}
	if value, ok := euo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, events.FieldTags, value)
		})
	}
	if value, ok := euo.mutation.Content(); ok {
		_spec.SetField(events.FieldContent, field.TypeString, value)
	}
	if value, ok := euo.mutation.Sig(); ok {
		_spec.SetField(events.FieldSig, field.TypeBytes, value)
	}
	_spec.Node.Schema = euo.schemaConfig.Events
	ctx = internal.NewSchemaConfigContext(ctx, euo.schemaConfig)
	_spec.AddModifiers(euo.modifiers...)
	_node = &Events{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{events.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	euo.mutation.done = true
	return _node, nil
}
