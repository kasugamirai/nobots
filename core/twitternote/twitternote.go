// Code generated by ent, DO NOT EDIT.

package twitternote

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the twitternote type in the database.
	Label = "twitter_note"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldUserName holds the string denoting the user_name field in the database.
	FieldUserName = "user_name"
	// FieldConversationID holds the string denoting the conversation_id field in the database.
	FieldConversationID = "conversation_id"
	// FieldText holds the string denoting the text field in the database.
	FieldText = "text"
	// FieldLikes holds the string denoting the likes field in the database.
	FieldLikes = "likes"
	// FieldReplies holds the string denoting the replies field in the database.
	FieldReplies = "replies"
	// FieldRetweets holds the string denoting the retweets field in the database.
	FieldRetweets = "retweets"
	// FieldViews holds the string denoting the views field in the database.
	FieldViews = "views"
	// FieldPhotoIds holds the string denoting the photo_ids field in the database.
	FieldPhotoIds = "photo_ids"
	// FieldPhotoUrls holds the string denoting the photo_urls field in the database.
	FieldPhotoUrls = "photo_urls"
	// FieldVideoID holds the string denoting the video_id field in the database.
	FieldVideoID = "video_id"
	// FieldVideoPreview holds the string denoting the video_preview field in the database.
	FieldVideoPreview = "video_preview"
	// FieldVideoUrls holds the string denoting the video_urls field in the database.
	FieldVideoUrls = "video_urls"
	// FieldMentionID holds the string denoting the mention_id field in the database.
	FieldMentionID = "mention_id"
	// FieldMentionUsername holds the string denoting the mention_username field in the database.
	FieldMentionUsername = "mention_username"
	// FieldMentionName holds the string denoting the mention_name field in the database.
	FieldMentionName = "mention_name"
	// FieldRetweetedStatusID holds the string denoting the retweeted_status_id field in the database.
	FieldRetweetedStatusID = "retweeted_status_id"
	// FieldIsRetweet holds the string denoting the is_retweet field in the database.
	FieldIsRetweet = "is_retweet"
	// FieldPostAt holds the string denoting the post_at field in the database.
	FieldPostAt = "post_at"
	// FieldUrls holds the string denoting the urls field in the database.
	FieldUrls = "urls"
	// FieldHTMLText holds the string denoting the html_text field in the database.
	FieldHTMLText = "html_text"
	// FieldPermanentURL holds the string denoting the permanent_url field in the database.
	FieldPermanentURL = "permanent_url"
	// FieldIsReply holds the string denoting the is_reply field in the database.
	FieldIsReply = "is_reply"
	// FieldIsPin holds the string denoting the is_pin field in the database.
	FieldIsPin = "is_pin"
	// FieldSensitiveContent holds the string denoting the sensitive_content field in the database.
	FieldSensitiveContent = "sensitive_content"
	// FieldReplyTo holds the string denoting the reply_to field in the database.
	FieldReplyTo = "reply_to"
	// FieldRawYaml holds the string denoting the raw_yaml field in the database.
	FieldRawYaml = "raw_yaml"
	// FieldHashTags holds the string denoting the hash_tags field in the database.
	FieldHashTags = "hash_tags"
	// FieldEvent holds the string denoting the event field in the database.
	FieldEvent = "event"
	// FieldEventID holds the string denoting the event_id field in the database.
	FieldEventID = "event_id"
	// FieldPublishStatus holds the string denoting the publish_status field in the database.
	FieldPublishStatus = "publish_status"
	// FieldPublishedAt holds the string denoting the published_at field in the database.
	FieldPublishedAt = "published_at"
	// FieldFetchedAt holds the string denoting the fetched_at field in the database.
	FieldFetchedAt = "fetched_at"
	// FieldLanguage holds the string denoting the language field in the database.
	FieldLanguage = "language"
	// Table holds the table name of the twitternote in the database.
	Table = "twitter_notes"
)

// Columns holds all SQL columns for twitternote fields.
var Columns = []string{
	FieldID,
	FieldUserID,
	FieldUserName,
	FieldConversationID,
	FieldText,
	FieldLikes,
	FieldReplies,
	FieldRetweets,
	FieldViews,
	FieldPhotoIds,
	FieldPhotoUrls,
	FieldVideoID,
	FieldVideoPreview,
	FieldVideoUrls,
	FieldMentionID,
	FieldMentionUsername,
	FieldMentionName,
	FieldRetweetedStatusID,
	FieldIsRetweet,
	FieldPostAt,
	FieldUrls,
	FieldHTMLText,
	FieldPermanentURL,
	FieldIsReply,
	FieldIsPin,
	FieldSensitiveContent,
	FieldReplyTo,
	FieldRawYaml,
	FieldHashTags,
	FieldEvent,
	FieldEventID,
	FieldPublishStatus,
	FieldPublishedAt,
	FieldFetchedAt,
	FieldLanguage,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultLanguage holds the default value on creation for the "language" field.
	DefaultLanguage string
)

// OrderOption defines the ordering options for the TwitterNote queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByUserName orders the results by the user_name field.
func ByUserName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserName, opts...).ToFunc()
}

// ByConversationID orders the results by the conversation_id field.
func ByConversationID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldConversationID, opts...).ToFunc()
}

// ByText orders the results by the text field.
func ByText(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldText, opts...).ToFunc()
}

// ByLikes orders the results by the likes field.
func ByLikes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLikes, opts...).ToFunc()
}

// ByReplies orders the results by the replies field.
func ByReplies(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReplies, opts...).ToFunc()
}

// ByRetweets orders the results by the retweets field.
func ByRetweets(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRetweets, opts...).ToFunc()
}

// ByViews orders the results by the views field.
func ByViews(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldViews, opts...).ToFunc()
}

// ByRetweetedStatusID orders the results by the retweeted_status_id field.
func ByRetweetedStatusID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRetweetedStatusID, opts...).ToFunc()
}

// ByIsRetweet orders the results by the is_retweet field.
func ByIsRetweet(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsRetweet, opts...).ToFunc()
}

// ByPostAt orders the results by the post_at field.
func ByPostAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPostAt, opts...).ToFunc()
}

// ByHTMLText orders the results by the html_text field.
func ByHTMLText(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHTMLText, opts...).ToFunc()
}

// ByPermanentURL orders the results by the permanent_url field.
func ByPermanentURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPermanentURL, opts...).ToFunc()
}

// ByIsReply orders the results by the is_reply field.
func ByIsReply(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsReply, opts...).ToFunc()
}

// ByIsPin orders the results by the is_pin field.
func ByIsPin(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsPin, opts...).ToFunc()
}

// BySensitiveContent orders the results by the sensitive_content field.
func BySensitiveContent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSensitiveContent, opts...).ToFunc()
}

// ByReplyTo orders the results by the reply_to field.
func ByReplyTo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReplyTo, opts...).ToFunc()
}

// ByRawYaml orders the results by the raw_yaml field.
func ByRawYaml(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRawYaml, opts...).ToFunc()
}

// ByEvent orders the results by the event field.
func ByEvent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEvent, opts...).ToFunc()
}

// ByEventID orders the results by the event_id field.
func ByEventID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEventID, opts...).ToFunc()
}

// ByPublishStatus orders the results by the publish_status field.
func ByPublishStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPublishStatus, opts...).ToFunc()
}

// ByPublishedAt orders the results by the published_at field.
func ByPublishedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPublishedAt, opts...).ToFunc()
}

// ByFetchedAt orders the results by the fetched_at field.
func ByFetchedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFetchedAt, opts...).ToFunc()
}

// ByLanguage orders the results by the language field.
func ByLanguage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLanguage, opts...).ToFunc()
}
