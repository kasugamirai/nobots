// Code generated by ent, DO NOT EDIT.

package twitternote

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"freefrom.space/nobot/core/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldContainsFold(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldEQ(FieldUserID, v))
}

// UserName applies equality check predicate on the "user_name" field. It's identical to UserNameEQ.
func UserName(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldEQ(FieldUserName, v))
}

// ConversationID applies equality check predicate on the "conversation_id" field. It's identical to ConversationIDEQ.
func ConversationID(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldEQ(FieldConversationID, v))
}

// Text applies equality check predicate on the "text" field. It's identical to TextEQ.
func Text(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldEQ(FieldText, v))
}

// Likes applies equality check predicate on the "likes" field. It's identical to LikesEQ.
func Likes(v int) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldEQ(FieldLikes, v))
}

// Replies applies equality check predicate on the "replies" field. It's identical to RepliesEQ.
func Replies(v int) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldEQ(FieldReplies, v))
}

// Retweets applies equality check predicate on the "retweets" field. It's identical to RetweetsEQ.
func Retweets(v int) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldEQ(FieldRetweets, v))
}

// Views applies equality check predicate on the "views" field. It's identical to ViewsEQ.
func Views(v int) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldEQ(FieldViews, v))
}

// RetweetedStatusID applies equality check predicate on the "retweeted_status_id" field. It's identical to RetweetedStatusIDEQ.
func RetweetedStatusID(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldEQ(FieldRetweetedStatusID, v))
}

// IsRetweet applies equality check predicate on the "is_retweet" field. It's identical to IsRetweetEQ.
func IsRetweet(v bool) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldEQ(FieldIsRetweet, v))
}

// PostAt applies equality check predicate on the "post_at" field. It's identical to PostAtEQ.
func PostAt(v time.Time) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldEQ(FieldPostAt, v))
}

// HTMLText applies equality check predicate on the "html_text" field. It's identical to HTMLTextEQ.
func HTMLText(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldEQ(FieldHTMLText, v))
}

// PermanentURL applies equality check predicate on the "permanent_url" field. It's identical to PermanentURLEQ.
func PermanentURL(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldEQ(FieldPermanentURL, v))
}

// IsReply applies equality check predicate on the "is_reply" field. It's identical to IsReplyEQ.
func IsReply(v bool) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldEQ(FieldIsReply, v))
}

// IsPin applies equality check predicate on the "is_pin" field. It's identical to IsPinEQ.
func IsPin(v bool) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldEQ(FieldIsPin, v))
}

// SensitiveContent applies equality check predicate on the "sensitive_content" field. It's identical to SensitiveContentEQ.
func SensitiveContent(v bool) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldEQ(FieldSensitiveContent, v))
}

// ReplyTo applies equality check predicate on the "reply_to" field. It's identical to ReplyToEQ.
func ReplyTo(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldEQ(FieldReplyTo, v))
}

// RawYaml applies equality check predicate on the "raw_yaml" field. It's identical to RawYamlEQ.
func RawYaml(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldEQ(FieldRawYaml, v))
}

// Event applies equality check predicate on the "event" field. It's identical to EventEQ.
func Event(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldEQ(FieldEvent, v))
}

// EventID applies equality check predicate on the "event_id" field. It's identical to EventIDEQ.
func EventID(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldEQ(FieldEventID, v))
}

// PublishStatus applies equality check predicate on the "publish_status" field. It's identical to PublishStatusEQ.
func PublishStatus(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldEQ(FieldPublishStatus, v))
}

// PublishedAt applies equality check predicate on the "published_at" field. It's identical to PublishedAtEQ.
func PublishedAt(v time.Time) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldEQ(FieldPublishedAt, v))
}

// FetchedAt applies equality check predicate on the "fetched_at" field. It's identical to FetchedAtEQ.
func FetchedAt(v time.Time) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldEQ(FieldFetchedAt, v))
}

// Language applies equality check predicate on the "language" field. It's identical to LanguageEQ.
func Language(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldEQ(FieldLanguage, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldLTE(FieldUserID, v))
}

// UserIDContains applies the Contains predicate on the "user_id" field.
func UserIDContains(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldContains(FieldUserID, v))
}

// UserIDHasPrefix applies the HasPrefix predicate on the "user_id" field.
func UserIDHasPrefix(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldHasPrefix(FieldUserID, v))
}

// UserIDHasSuffix applies the HasSuffix predicate on the "user_id" field.
func UserIDHasSuffix(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldHasSuffix(FieldUserID, v))
}

// UserIDEqualFold applies the EqualFold predicate on the "user_id" field.
func UserIDEqualFold(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldEqualFold(FieldUserID, v))
}

// UserIDContainsFold applies the ContainsFold predicate on the "user_id" field.
func UserIDContainsFold(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldContainsFold(FieldUserID, v))
}

// UserNameEQ applies the EQ predicate on the "user_name" field.
func UserNameEQ(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldEQ(FieldUserName, v))
}

// UserNameNEQ applies the NEQ predicate on the "user_name" field.
func UserNameNEQ(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldNEQ(FieldUserName, v))
}

// UserNameIn applies the In predicate on the "user_name" field.
func UserNameIn(vs ...string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldIn(FieldUserName, vs...))
}

// UserNameNotIn applies the NotIn predicate on the "user_name" field.
func UserNameNotIn(vs ...string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldNotIn(FieldUserName, vs...))
}

// UserNameGT applies the GT predicate on the "user_name" field.
func UserNameGT(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldGT(FieldUserName, v))
}

// UserNameGTE applies the GTE predicate on the "user_name" field.
func UserNameGTE(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldGTE(FieldUserName, v))
}

// UserNameLT applies the LT predicate on the "user_name" field.
func UserNameLT(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldLT(FieldUserName, v))
}

// UserNameLTE applies the LTE predicate on the "user_name" field.
func UserNameLTE(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldLTE(FieldUserName, v))
}

// UserNameContains applies the Contains predicate on the "user_name" field.
func UserNameContains(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldContains(FieldUserName, v))
}

// UserNameHasPrefix applies the HasPrefix predicate on the "user_name" field.
func UserNameHasPrefix(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldHasPrefix(FieldUserName, v))
}

// UserNameHasSuffix applies the HasSuffix predicate on the "user_name" field.
func UserNameHasSuffix(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldHasSuffix(FieldUserName, v))
}

// UserNameEqualFold applies the EqualFold predicate on the "user_name" field.
func UserNameEqualFold(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldEqualFold(FieldUserName, v))
}

// UserNameContainsFold applies the ContainsFold predicate on the "user_name" field.
func UserNameContainsFold(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldContainsFold(FieldUserName, v))
}

// ConversationIDEQ applies the EQ predicate on the "conversation_id" field.
func ConversationIDEQ(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldEQ(FieldConversationID, v))
}

// ConversationIDNEQ applies the NEQ predicate on the "conversation_id" field.
func ConversationIDNEQ(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldNEQ(FieldConversationID, v))
}

// ConversationIDIn applies the In predicate on the "conversation_id" field.
func ConversationIDIn(vs ...string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldIn(FieldConversationID, vs...))
}

// ConversationIDNotIn applies the NotIn predicate on the "conversation_id" field.
func ConversationIDNotIn(vs ...string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldNotIn(FieldConversationID, vs...))
}

// ConversationIDGT applies the GT predicate on the "conversation_id" field.
func ConversationIDGT(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldGT(FieldConversationID, v))
}

// ConversationIDGTE applies the GTE predicate on the "conversation_id" field.
func ConversationIDGTE(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldGTE(FieldConversationID, v))
}

// ConversationIDLT applies the LT predicate on the "conversation_id" field.
func ConversationIDLT(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldLT(FieldConversationID, v))
}

// ConversationIDLTE applies the LTE predicate on the "conversation_id" field.
func ConversationIDLTE(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldLTE(FieldConversationID, v))
}

// ConversationIDContains applies the Contains predicate on the "conversation_id" field.
func ConversationIDContains(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldContains(FieldConversationID, v))
}

// ConversationIDHasPrefix applies the HasPrefix predicate on the "conversation_id" field.
func ConversationIDHasPrefix(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldHasPrefix(FieldConversationID, v))
}

// ConversationIDHasSuffix applies the HasSuffix predicate on the "conversation_id" field.
func ConversationIDHasSuffix(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldHasSuffix(FieldConversationID, v))
}

// ConversationIDEqualFold applies the EqualFold predicate on the "conversation_id" field.
func ConversationIDEqualFold(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldEqualFold(FieldConversationID, v))
}

// ConversationIDContainsFold applies the ContainsFold predicate on the "conversation_id" field.
func ConversationIDContainsFold(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldContainsFold(FieldConversationID, v))
}

// TextEQ applies the EQ predicate on the "text" field.
func TextEQ(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldEQ(FieldText, v))
}

// TextNEQ applies the NEQ predicate on the "text" field.
func TextNEQ(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldNEQ(FieldText, v))
}

// TextIn applies the In predicate on the "text" field.
func TextIn(vs ...string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldIn(FieldText, vs...))
}

// TextNotIn applies the NotIn predicate on the "text" field.
func TextNotIn(vs ...string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldNotIn(FieldText, vs...))
}

// TextGT applies the GT predicate on the "text" field.
func TextGT(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldGT(FieldText, v))
}

// TextGTE applies the GTE predicate on the "text" field.
func TextGTE(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldGTE(FieldText, v))
}

// TextLT applies the LT predicate on the "text" field.
func TextLT(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldLT(FieldText, v))
}

// TextLTE applies the LTE predicate on the "text" field.
func TextLTE(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldLTE(FieldText, v))
}

// TextContains applies the Contains predicate on the "text" field.
func TextContains(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldContains(FieldText, v))
}

// TextHasPrefix applies the HasPrefix predicate on the "text" field.
func TextHasPrefix(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldHasPrefix(FieldText, v))
}

// TextHasSuffix applies the HasSuffix predicate on the "text" field.
func TextHasSuffix(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldHasSuffix(FieldText, v))
}

// TextEqualFold applies the EqualFold predicate on the "text" field.
func TextEqualFold(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldEqualFold(FieldText, v))
}

// TextContainsFold applies the ContainsFold predicate on the "text" field.
func TextContainsFold(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldContainsFold(FieldText, v))
}

// LikesEQ applies the EQ predicate on the "likes" field.
func LikesEQ(v int) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldEQ(FieldLikes, v))
}

// LikesNEQ applies the NEQ predicate on the "likes" field.
func LikesNEQ(v int) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldNEQ(FieldLikes, v))
}

// LikesIn applies the In predicate on the "likes" field.
func LikesIn(vs ...int) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldIn(FieldLikes, vs...))
}

// LikesNotIn applies the NotIn predicate on the "likes" field.
func LikesNotIn(vs ...int) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldNotIn(FieldLikes, vs...))
}

// LikesGT applies the GT predicate on the "likes" field.
func LikesGT(v int) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldGT(FieldLikes, v))
}

// LikesGTE applies the GTE predicate on the "likes" field.
func LikesGTE(v int) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldGTE(FieldLikes, v))
}

// LikesLT applies the LT predicate on the "likes" field.
func LikesLT(v int) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldLT(FieldLikes, v))
}

// LikesLTE applies the LTE predicate on the "likes" field.
func LikesLTE(v int) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldLTE(FieldLikes, v))
}

// RepliesEQ applies the EQ predicate on the "replies" field.
func RepliesEQ(v int) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldEQ(FieldReplies, v))
}

// RepliesNEQ applies the NEQ predicate on the "replies" field.
func RepliesNEQ(v int) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldNEQ(FieldReplies, v))
}

// RepliesIn applies the In predicate on the "replies" field.
func RepliesIn(vs ...int) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldIn(FieldReplies, vs...))
}

// RepliesNotIn applies the NotIn predicate on the "replies" field.
func RepliesNotIn(vs ...int) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldNotIn(FieldReplies, vs...))
}

// RepliesGT applies the GT predicate on the "replies" field.
func RepliesGT(v int) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldGT(FieldReplies, v))
}

// RepliesGTE applies the GTE predicate on the "replies" field.
func RepliesGTE(v int) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldGTE(FieldReplies, v))
}

// RepliesLT applies the LT predicate on the "replies" field.
func RepliesLT(v int) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldLT(FieldReplies, v))
}

// RepliesLTE applies the LTE predicate on the "replies" field.
func RepliesLTE(v int) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldLTE(FieldReplies, v))
}

// RetweetsEQ applies the EQ predicate on the "retweets" field.
func RetweetsEQ(v int) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldEQ(FieldRetweets, v))
}

// RetweetsNEQ applies the NEQ predicate on the "retweets" field.
func RetweetsNEQ(v int) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldNEQ(FieldRetweets, v))
}

// RetweetsIn applies the In predicate on the "retweets" field.
func RetweetsIn(vs ...int) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldIn(FieldRetweets, vs...))
}

// RetweetsNotIn applies the NotIn predicate on the "retweets" field.
func RetweetsNotIn(vs ...int) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldNotIn(FieldRetweets, vs...))
}

// RetweetsGT applies the GT predicate on the "retweets" field.
func RetweetsGT(v int) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldGT(FieldRetweets, v))
}

// RetweetsGTE applies the GTE predicate on the "retweets" field.
func RetweetsGTE(v int) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldGTE(FieldRetweets, v))
}

// RetweetsLT applies the LT predicate on the "retweets" field.
func RetweetsLT(v int) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldLT(FieldRetweets, v))
}

// RetweetsLTE applies the LTE predicate on the "retweets" field.
func RetweetsLTE(v int) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldLTE(FieldRetweets, v))
}

// ViewsEQ applies the EQ predicate on the "views" field.
func ViewsEQ(v int) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldEQ(FieldViews, v))
}

// ViewsNEQ applies the NEQ predicate on the "views" field.
func ViewsNEQ(v int) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldNEQ(FieldViews, v))
}

// ViewsIn applies the In predicate on the "views" field.
func ViewsIn(vs ...int) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldIn(FieldViews, vs...))
}

// ViewsNotIn applies the NotIn predicate on the "views" field.
func ViewsNotIn(vs ...int) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldNotIn(FieldViews, vs...))
}

// ViewsGT applies the GT predicate on the "views" field.
func ViewsGT(v int) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldGT(FieldViews, v))
}

// ViewsGTE applies the GTE predicate on the "views" field.
func ViewsGTE(v int) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldGTE(FieldViews, v))
}

// ViewsLT applies the LT predicate on the "views" field.
func ViewsLT(v int) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldLT(FieldViews, v))
}

// ViewsLTE applies the LTE predicate on the "views" field.
func ViewsLTE(v int) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldLTE(FieldViews, v))
}

// PhotoIdsIsNil applies the IsNil predicate on the "photo_ids" field.
func PhotoIdsIsNil() predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldIsNull(FieldPhotoIds))
}

// PhotoIdsNotNil applies the NotNil predicate on the "photo_ids" field.
func PhotoIdsNotNil() predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldNotNull(FieldPhotoIds))
}

// PhotoUrlsIsNil applies the IsNil predicate on the "photo_urls" field.
func PhotoUrlsIsNil() predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldIsNull(FieldPhotoUrls))
}

// PhotoUrlsNotNil applies the NotNil predicate on the "photo_urls" field.
func PhotoUrlsNotNil() predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldNotNull(FieldPhotoUrls))
}

// VideoIDIsNil applies the IsNil predicate on the "video_id" field.
func VideoIDIsNil() predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldIsNull(FieldVideoID))
}

// VideoIDNotNil applies the NotNil predicate on the "video_id" field.
func VideoIDNotNil() predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldNotNull(FieldVideoID))
}

// VideoPreviewIsNil applies the IsNil predicate on the "video_preview" field.
func VideoPreviewIsNil() predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldIsNull(FieldVideoPreview))
}

// VideoPreviewNotNil applies the NotNil predicate on the "video_preview" field.
func VideoPreviewNotNil() predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldNotNull(FieldVideoPreview))
}

// VideoUrlsIsNil applies the IsNil predicate on the "video_urls" field.
func VideoUrlsIsNil() predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldIsNull(FieldVideoUrls))
}

// VideoUrlsNotNil applies the NotNil predicate on the "video_urls" field.
func VideoUrlsNotNil() predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldNotNull(FieldVideoUrls))
}

// MentionIDIsNil applies the IsNil predicate on the "mention_id" field.
func MentionIDIsNil() predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldIsNull(FieldMentionID))
}

// MentionIDNotNil applies the NotNil predicate on the "mention_id" field.
func MentionIDNotNil() predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldNotNull(FieldMentionID))
}

// MentionUsernameIsNil applies the IsNil predicate on the "mention_username" field.
func MentionUsernameIsNil() predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldIsNull(FieldMentionUsername))
}

// MentionUsernameNotNil applies the NotNil predicate on the "mention_username" field.
func MentionUsernameNotNil() predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldNotNull(FieldMentionUsername))
}

// MentionNameIsNil applies the IsNil predicate on the "mention_name" field.
func MentionNameIsNil() predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldIsNull(FieldMentionName))
}

// MentionNameNotNil applies the NotNil predicate on the "mention_name" field.
func MentionNameNotNil() predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldNotNull(FieldMentionName))
}

// RetweetedStatusIDEQ applies the EQ predicate on the "retweeted_status_id" field.
func RetweetedStatusIDEQ(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldEQ(FieldRetweetedStatusID, v))
}

// RetweetedStatusIDNEQ applies the NEQ predicate on the "retweeted_status_id" field.
func RetweetedStatusIDNEQ(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldNEQ(FieldRetweetedStatusID, v))
}

// RetweetedStatusIDIn applies the In predicate on the "retweeted_status_id" field.
func RetweetedStatusIDIn(vs ...string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldIn(FieldRetweetedStatusID, vs...))
}

// RetweetedStatusIDNotIn applies the NotIn predicate on the "retweeted_status_id" field.
func RetweetedStatusIDNotIn(vs ...string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldNotIn(FieldRetweetedStatusID, vs...))
}

// RetweetedStatusIDGT applies the GT predicate on the "retweeted_status_id" field.
func RetweetedStatusIDGT(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldGT(FieldRetweetedStatusID, v))
}

// RetweetedStatusIDGTE applies the GTE predicate on the "retweeted_status_id" field.
func RetweetedStatusIDGTE(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldGTE(FieldRetweetedStatusID, v))
}

// RetweetedStatusIDLT applies the LT predicate on the "retweeted_status_id" field.
func RetweetedStatusIDLT(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldLT(FieldRetweetedStatusID, v))
}

// RetweetedStatusIDLTE applies the LTE predicate on the "retweeted_status_id" field.
func RetweetedStatusIDLTE(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldLTE(FieldRetweetedStatusID, v))
}

// RetweetedStatusIDContains applies the Contains predicate on the "retweeted_status_id" field.
func RetweetedStatusIDContains(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldContains(FieldRetweetedStatusID, v))
}

// RetweetedStatusIDHasPrefix applies the HasPrefix predicate on the "retweeted_status_id" field.
func RetweetedStatusIDHasPrefix(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldHasPrefix(FieldRetweetedStatusID, v))
}

// RetweetedStatusIDHasSuffix applies the HasSuffix predicate on the "retweeted_status_id" field.
func RetweetedStatusIDHasSuffix(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldHasSuffix(FieldRetweetedStatusID, v))
}

// RetweetedStatusIDIsNil applies the IsNil predicate on the "retweeted_status_id" field.
func RetweetedStatusIDIsNil() predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldIsNull(FieldRetweetedStatusID))
}

// RetweetedStatusIDNotNil applies the NotNil predicate on the "retweeted_status_id" field.
func RetweetedStatusIDNotNil() predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldNotNull(FieldRetweetedStatusID))
}

// RetweetedStatusIDEqualFold applies the EqualFold predicate on the "retweeted_status_id" field.
func RetweetedStatusIDEqualFold(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldEqualFold(FieldRetweetedStatusID, v))
}

// RetweetedStatusIDContainsFold applies the ContainsFold predicate on the "retweeted_status_id" field.
func RetweetedStatusIDContainsFold(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldContainsFold(FieldRetweetedStatusID, v))
}

// IsRetweetEQ applies the EQ predicate on the "is_retweet" field.
func IsRetweetEQ(v bool) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldEQ(FieldIsRetweet, v))
}

// IsRetweetNEQ applies the NEQ predicate on the "is_retweet" field.
func IsRetweetNEQ(v bool) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldNEQ(FieldIsRetweet, v))
}

// IsRetweetIsNil applies the IsNil predicate on the "is_retweet" field.
func IsRetweetIsNil() predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldIsNull(FieldIsRetweet))
}

// IsRetweetNotNil applies the NotNil predicate on the "is_retweet" field.
func IsRetweetNotNil() predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldNotNull(FieldIsRetweet))
}

// PostAtEQ applies the EQ predicate on the "post_at" field.
func PostAtEQ(v time.Time) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldEQ(FieldPostAt, v))
}

// PostAtNEQ applies the NEQ predicate on the "post_at" field.
func PostAtNEQ(v time.Time) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldNEQ(FieldPostAt, v))
}

// PostAtIn applies the In predicate on the "post_at" field.
func PostAtIn(vs ...time.Time) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldIn(FieldPostAt, vs...))
}

// PostAtNotIn applies the NotIn predicate on the "post_at" field.
func PostAtNotIn(vs ...time.Time) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldNotIn(FieldPostAt, vs...))
}

// PostAtGT applies the GT predicate on the "post_at" field.
func PostAtGT(v time.Time) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldGT(FieldPostAt, v))
}

// PostAtGTE applies the GTE predicate on the "post_at" field.
func PostAtGTE(v time.Time) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldGTE(FieldPostAt, v))
}

// PostAtLT applies the LT predicate on the "post_at" field.
func PostAtLT(v time.Time) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldLT(FieldPostAt, v))
}

// PostAtLTE applies the LTE predicate on the "post_at" field.
func PostAtLTE(v time.Time) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldLTE(FieldPostAt, v))
}

// PostAtIsNil applies the IsNil predicate on the "post_at" field.
func PostAtIsNil() predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldIsNull(FieldPostAt))
}

// PostAtNotNil applies the NotNil predicate on the "post_at" field.
func PostAtNotNil() predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldNotNull(FieldPostAt))
}

// UrlsIsNil applies the IsNil predicate on the "urls" field.
func UrlsIsNil() predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldIsNull(FieldUrls))
}

// UrlsNotNil applies the NotNil predicate on the "urls" field.
func UrlsNotNil() predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldNotNull(FieldUrls))
}

// HTMLTextEQ applies the EQ predicate on the "html_text" field.
func HTMLTextEQ(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldEQ(FieldHTMLText, v))
}

// HTMLTextNEQ applies the NEQ predicate on the "html_text" field.
func HTMLTextNEQ(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldNEQ(FieldHTMLText, v))
}

// HTMLTextIn applies the In predicate on the "html_text" field.
func HTMLTextIn(vs ...string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldIn(FieldHTMLText, vs...))
}

// HTMLTextNotIn applies the NotIn predicate on the "html_text" field.
func HTMLTextNotIn(vs ...string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldNotIn(FieldHTMLText, vs...))
}

// HTMLTextGT applies the GT predicate on the "html_text" field.
func HTMLTextGT(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldGT(FieldHTMLText, v))
}

// HTMLTextGTE applies the GTE predicate on the "html_text" field.
func HTMLTextGTE(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldGTE(FieldHTMLText, v))
}

// HTMLTextLT applies the LT predicate on the "html_text" field.
func HTMLTextLT(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldLT(FieldHTMLText, v))
}

// HTMLTextLTE applies the LTE predicate on the "html_text" field.
func HTMLTextLTE(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldLTE(FieldHTMLText, v))
}

// HTMLTextContains applies the Contains predicate on the "html_text" field.
func HTMLTextContains(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldContains(FieldHTMLText, v))
}

// HTMLTextHasPrefix applies the HasPrefix predicate on the "html_text" field.
func HTMLTextHasPrefix(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldHasPrefix(FieldHTMLText, v))
}

// HTMLTextHasSuffix applies the HasSuffix predicate on the "html_text" field.
func HTMLTextHasSuffix(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldHasSuffix(FieldHTMLText, v))
}

// HTMLTextIsNil applies the IsNil predicate on the "html_text" field.
func HTMLTextIsNil() predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldIsNull(FieldHTMLText))
}

// HTMLTextNotNil applies the NotNil predicate on the "html_text" field.
func HTMLTextNotNil() predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldNotNull(FieldHTMLText))
}

// HTMLTextEqualFold applies the EqualFold predicate on the "html_text" field.
func HTMLTextEqualFold(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldEqualFold(FieldHTMLText, v))
}

// HTMLTextContainsFold applies the ContainsFold predicate on the "html_text" field.
func HTMLTextContainsFold(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldContainsFold(FieldHTMLText, v))
}

// PermanentURLEQ applies the EQ predicate on the "permanent_url" field.
func PermanentURLEQ(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldEQ(FieldPermanentURL, v))
}

// PermanentURLNEQ applies the NEQ predicate on the "permanent_url" field.
func PermanentURLNEQ(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldNEQ(FieldPermanentURL, v))
}

// PermanentURLIn applies the In predicate on the "permanent_url" field.
func PermanentURLIn(vs ...string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldIn(FieldPermanentURL, vs...))
}

// PermanentURLNotIn applies the NotIn predicate on the "permanent_url" field.
func PermanentURLNotIn(vs ...string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldNotIn(FieldPermanentURL, vs...))
}

// PermanentURLGT applies the GT predicate on the "permanent_url" field.
func PermanentURLGT(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldGT(FieldPermanentURL, v))
}

// PermanentURLGTE applies the GTE predicate on the "permanent_url" field.
func PermanentURLGTE(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldGTE(FieldPermanentURL, v))
}

// PermanentURLLT applies the LT predicate on the "permanent_url" field.
func PermanentURLLT(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldLT(FieldPermanentURL, v))
}

// PermanentURLLTE applies the LTE predicate on the "permanent_url" field.
func PermanentURLLTE(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldLTE(FieldPermanentURL, v))
}

// PermanentURLContains applies the Contains predicate on the "permanent_url" field.
func PermanentURLContains(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldContains(FieldPermanentURL, v))
}

// PermanentURLHasPrefix applies the HasPrefix predicate on the "permanent_url" field.
func PermanentURLHasPrefix(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldHasPrefix(FieldPermanentURL, v))
}

// PermanentURLHasSuffix applies the HasSuffix predicate on the "permanent_url" field.
func PermanentURLHasSuffix(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldHasSuffix(FieldPermanentURL, v))
}

// PermanentURLIsNil applies the IsNil predicate on the "permanent_url" field.
func PermanentURLIsNil() predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldIsNull(FieldPermanentURL))
}

// PermanentURLNotNil applies the NotNil predicate on the "permanent_url" field.
func PermanentURLNotNil() predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldNotNull(FieldPermanentURL))
}

// PermanentURLEqualFold applies the EqualFold predicate on the "permanent_url" field.
func PermanentURLEqualFold(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldEqualFold(FieldPermanentURL, v))
}

// PermanentURLContainsFold applies the ContainsFold predicate on the "permanent_url" field.
func PermanentURLContainsFold(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldContainsFold(FieldPermanentURL, v))
}

// IsReplyEQ applies the EQ predicate on the "is_reply" field.
func IsReplyEQ(v bool) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldEQ(FieldIsReply, v))
}

// IsReplyNEQ applies the NEQ predicate on the "is_reply" field.
func IsReplyNEQ(v bool) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldNEQ(FieldIsReply, v))
}

// IsReplyIsNil applies the IsNil predicate on the "is_reply" field.
func IsReplyIsNil() predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldIsNull(FieldIsReply))
}

// IsReplyNotNil applies the NotNil predicate on the "is_reply" field.
func IsReplyNotNil() predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldNotNull(FieldIsReply))
}

// IsPinEQ applies the EQ predicate on the "is_pin" field.
func IsPinEQ(v bool) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldEQ(FieldIsPin, v))
}

// IsPinNEQ applies the NEQ predicate on the "is_pin" field.
func IsPinNEQ(v bool) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldNEQ(FieldIsPin, v))
}

// IsPinIsNil applies the IsNil predicate on the "is_pin" field.
func IsPinIsNil() predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldIsNull(FieldIsPin))
}

// IsPinNotNil applies the NotNil predicate on the "is_pin" field.
func IsPinNotNil() predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldNotNull(FieldIsPin))
}

// SensitiveContentEQ applies the EQ predicate on the "sensitive_content" field.
func SensitiveContentEQ(v bool) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldEQ(FieldSensitiveContent, v))
}

// SensitiveContentNEQ applies the NEQ predicate on the "sensitive_content" field.
func SensitiveContentNEQ(v bool) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldNEQ(FieldSensitiveContent, v))
}

// SensitiveContentIsNil applies the IsNil predicate on the "sensitive_content" field.
func SensitiveContentIsNil() predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldIsNull(FieldSensitiveContent))
}

// SensitiveContentNotNil applies the NotNil predicate on the "sensitive_content" field.
func SensitiveContentNotNil() predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldNotNull(FieldSensitiveContent))
}

// ReplyToEQ applies the EQ predicate on the "reply_to" field.
func ReplyToEQ(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldEQ(FieldReplyTo, v))
}

// ReplyToNEQ applies the NEQ predicate on the "reply_to" field.
func ReplyToNEQ(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldNEQ(FieldReplyTo, v))
}

// ReplyToIn applies the In predicate on the "reply_to" field.
func ReplyToIn(vs ...string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldIn(FieldReplyTo, vs...))
}

// ReplyToNotIn applies the NotIn predicate on the "reply_to" field.
func ReplyToNotIn(vs ...string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldNotIn(FieldReplyTo, vs...))
}

// ReplyToGT applies the GT predicate on the "reply_to" field.
func ReplyToGT(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldGT(FieldReplyTo, v))
}

// ReplyToGTE applies the GTE predicate on the "reply_to" field.
func ReplyToGTE(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldGTE(FieldReplyTo, v))
}

// ReplyToLT applies the LT predicate on the "reply_to" field.
func ReplyToLT(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldLT(FieldReplyTo, v))
}

// ReplyToLTE applies the LTE predicate on the "reply_to" field.
func ReplyToLTE(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldLTE(FieldReplyTo, v))
}

// ReplyToContains applies the Contains predicate on the "reply_to" field.
func ReplyToContains(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldContains(FieldReplyTo, v))
}

// ReplyToHasPrefix applies the HasPrefix predicate on the "reply_to" field.
func ReplyToHasPrefix(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldHasPrefix(FieldReplyTo, v))
}

// ReplyToHasSuffix applies the HasSuffix predicate on the "reply_to" field.
func ReplyToHasSuffix(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldHasSuffix(FieldReplyTo, v))
}

// ReplyToIsNil applies the IsNil predicate on the "reply_to" field.
func ReplyToIsNil() predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldIsNull(FieldReplyTo))
}

// ReplyToNotNil applies the NotNil predicate on the "reply_to" field.
func ReplyToNotNil() predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldNotNull(FieldReplyTo))
}

// ReplyToEqualFold applies the EqualFold predicate on the "reply_to" field.
func ReplyToEqualFold(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldEqualFold(FieldReplyTo, v))
}

// ReplyToContainsFold applies the ContainsFold predicate on the "reply_to" field.
func ReplyToContainsFold(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldContainsFold(FieldReplyTo, v))
}

// RawYamlEQ applies the EQ predicate on the "raw_yaml" field.
func RawYamlEQ(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldEQ(FieldRawYaml, v))
}

// RawYamlNEQ applies the NEQ predicate on the "raw_yaml" field.
func RawYamlNEQ(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldNEQ(FieldRawYaml, v))
}

// RawYamlIn applies the In predicate on the "raw_yaml" field.
func RawYamlIn(vs ...string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldIn(FieldRawYaml, vs...))
}

// RawYamlNotIn applies the NotIn predicate on the "raw_yaml" field.
func RawYamlNotIn(vs ...string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldNotIn(FieldRawYaml, vs...))
}

// RawYamlGT applies the GT predicate on the "raw_yaml" field.
func RawYamlGT(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldGT(FieldRawYaml, v))
}

// RawYamlGTE applies the GTE predicate on the "raw_yaml" field.
func RawYamlGTE(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldGTE(FieldRawYaml, v))
}

// RawYamlLT applies the LT predicate on the "raw_yaml" field.
func RawYamlLT(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldLT(FieldRawYaml, v))
}

// RawYamlLTE applies the LTE predicate on the "raw_yaml" field.
func RawYamlLTE(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldLTE(FieldRawYaml, v))
}

// RawYamlContains applies the Contains predicate on the "raw_yaml" field.
func RawYamlContains(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldContains(FieldRawYaml, v))
}

// RawYamlHasPrefix applies the HasPrefix predicate on the "raw_yaml" field.
func RawYamlHasPrefix(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldHasPrefix(FieldRawYaml, v))
}

// RawYamlHasSuffix applies the HasSuffix predicate on the "raw_yaml" field.
func RawYamlHasSuffix(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldHasSuffix(FieldRawYaml, v))
}

// RawYamlEqualFold applies the EqualFold predicate on the "raw_yaml" field.
func RawYamlEqualFold(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldEqualFold(FieldRawYaml, v))
}

// RawYamlContainsFold applies the ContainsFold predicate on the "raw_yaml" field.
func RawYamlContainsFold(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldContainsFold(FieldRawYaml, v))
}

// EventEQ applies the EQ predicate on the "event" field.
func EventEQ(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldEQ(FieldEvent, v))
}

// EventNEQ applies the NEQ predicate on the "event" field.
func EventNEQ(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldNEQ(FieldEvent, v))
}

// EventIn applies the In predicate on the "event" field.
func EventIn(vs ...string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldIn(FieldEvent, vs...))
}

// EventNotIn applies the NotIn predicate on the "event" field.
func EventNotIn(vs ...string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldNotIn(FieldEvent, vs...))
}

// EventGT applies the GT predicate on the "event" field.
func EventGT(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldGT(FieldEvent, v))
}

// EventGTE applies the GTE predicate on the "event" field.
func EventGTE(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldGTE(FieldEvent, v))
}

// EventLT applies the LT predicate on the "event" field.
func EventLT(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldLT(FieldEvent, v))
}

// EventLTE applies the LTE predicate on the "event" field.
func EventLTE(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldLTE(FieldEvent, v))
}

// EventContains applies the Contains predicate on the "event" field.
func EventContains(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldContains(FieldEvent, v))
}

// EventHasPrefix applies the HasPrefix predicate on the "event" field.
func EventHasPrefix(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldHasPrefix(FieldEvent, v))
}

// EventHasSuffix applies the HasSuffix predicate on the "event" field.
func EventHasSuffix(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldHasSuffix(FieldEvent, v))
}

// EventIsNil applies the IsNil predicate on the "event" field.
func EventIsNil() predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldIsNull(FieldEvent))
}

// EventNotNil applies the NotNil predicate on the "event" field.
func EventNotNil() predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldNotNull(FieldEvent))
}

// EventEqualFold applies the EqualFold predicate on the "event" field.
func EventEqualFold(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldEqualFold(FieldEvent, v))
}

// EventContainsFold applies the ContainsFold predicate on the "event" field.
func EventContainsFold(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldContainsFold(FieldEvent, v))
}

// EventIDEQ applies the EQ predicate on the "event_id" field.
func EventIDEQ(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldEQ(FieldEventID, v))
}

// EventIDNEQ applies the NEQ predicate on the "event_id" field.
func EventIDNEQ(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldNEQ(FieldEventID, v))
}

// EventIDIn applies the In predicate on the "event_id" field.
func EventIDIn(vs ...string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldIn(FieldEventID, vs...))
}

// EventIDNotIn applies the NotIn predicate on the "event_id" field.
func EventIDNotIn(vs ...string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldNotIn(FieldEventID, vs...))
}

// EventIDGT applies the GT predicate on the "event_id" field.
func EventIDGT(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldGT(FieldEventID, v))
}

// EventIDGTE applies the GTE predicate on the "event_id" field.
func EventIDGTE(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldGTE(FieldEventID, v))
}

// EventIDLT applies the LT predicate on the "event_id" field.
func EventIDLT(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldLT(FieldEventID, v))
}

// EventIDLTE applies the LTE predicate on the "event_id" field.
func EventIDLTE(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldLTE(FieldEventID, v))
}

// EventIDContains applies the Contains predicate on the "event_id" field.
func EventIDContains(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldContains(FieldEventID, v))
}

// EventIDHasPrefix applies the HasPrefix predicate on the "event_id" field.
func EventIDHasPrefix(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldHasPrefix(FieldEventID, v))
}

// EventIDHasSuffix applies the HasSuffix predicate on the "event_id" field.
func EventIDHasSuffix(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldHasSuffix(FieldEventID, v))
}

// EventIDIsNil applies the IsNil predicate on the "event_id" field.
func EventIDIsNil() predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldIsNull(FieldEventID))
}

// EventIDNotNil applies the NotNil predicate on the "event_id" field.
func EventIDNotNil() predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldNotNull(FieldEventID))
}

// EventIDEqualFold applies the EqualFold predicate on the "event_id" field.
func EventIDEqualFold(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldEqualFold(FieldEventID, v))
}

// EventIDContainsFold applies the ContainsFold predicate on the "event_id" field.
func EventIDContainsFold(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldContainsFold(FieldEventID, v))
}

// PublishStatusEQ applies the EQ predicate on the "publish_status" field.
func PublishStatusEQ(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldEQ(FieldPublishStatus, v))
}

// PublishStatusNEQ applies the NEQ predicate on the "publish_status" field.
func PublishStatusNEQ(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldNEQ(FieldPublishStatus, v))
}

// PublishStatusIn applies the In predicate on the "publish_status" field.
func PublishStatusIn(vs ...string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldIn(FieldPublishStatus, vs...))
}

// PublishStatusNotIn applies the NotIn predicate on the "publish_status" field.
func PublishStatusNotIn(vs ...string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldNotIn(FieldPublishStatus, vs...))
}

// PublishStatusGT applies the GT predicate on the "publish_status" field.
func PublishStatusGT(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldGT(FieldPublishStatus, v))
}

// PublishStatusGTE applies the GTE predicate on the "publish_status" field.
func PublishStatusGTE(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldGTE(FieldPublishStatus, v))
}

// PublishStatusLT applies the LT predicate on the "publish_status" field.
func PublishStatusLT(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldLT(FieldPublishStatus, v))
}

// PublishStatusLTE applies the LTE predicate on the "publish_status" field.
func PublishStatusLTE(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldLTE(FieldPublishStatus, v))
}

// PublishStatusContains applies the Contains predicate on the "publish_status" field.
func PublishStatusContains(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldContains(FieldPublishStatus, v))
}

// PublishStatusHasPrefix applies the HasPrefix predicate on the "publish_status" field.
func PublishStatusHasPrefix(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldHasPrefix(FieldPublishStatus, v))
}

// PublishStatusHasSuffix applies the HasSuffix predicate on the "publish_status" field.
func PublishStatusHasSuffix(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldHasSuffix(FieldPublishStatus, v))
}

// PublishStatusIsNil applies the IsNil predicate on the "publish_status" field.
func PublishStatusIsNil() predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldIsNull(FieldPublishStatus))
}

// PublishStatusNotNil applies the NotNil predicate on the "publish_status" field.
func PublishStatusNotNil() predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldNotNull(FieldPublishStatus))
}

// PublishStatusEqualFold applies the EqualFold predicate on the "publish_status" field.
func PublishStatusEqualFold(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldEqualFold(FieldPublishStatus, v))
}

// PublishStatusContainsFold applies the ContainsFold predicate on the "publish_status" field.
func PublishStatusContainsFold(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldContainsFold(FieldPublishStatus, v))
}

// PublishedAtEQ applies the EQ predicate on the "published_at" field.
func PublishedAtEQ(v time.Time) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldEQ(FieldPublishedAt, v))
}

// PublishedAtNEQ applies the NEQ predicate on the "published_at" field.
func PublishedAtNEQ(v time.Time) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldNEQ(FieldPublishedAt, v))
}

// PublishedAtIn applies the In predicate on the "published_at" field.
func PublishedAtIn(vs ...time.Time) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldIn(FieldPublishedAt, vs...))
}

// PublishedAtNotIn applies the NotIn predicate on the "published_at" field.
func PublishedAtNotIn(vs ...time.Time) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldNotIn(FieldPublishedAt, vs...))
}

// PublishedAtGT applies the GT predicate on the "published_at" field.
func PublishedAtGT(v time.Time) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldGT(FieldPublishedAt, v))
}

// PublishedAtGTE applies the GTE predicate on the "published_at" field.
func PublishedAtGTE(v time.Time) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldGTE(FieldPublishedAt, v))
}

// PublishedAtLT applies the LT predicate on the "published_at" field.
func PublishedAtLT(v time.Time) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldLT(FieldPublishedAt, v))
}

// PublishedAtLTE applies the LTE predicate on the "published_at" field.
func PublishedAtLTE(v time.Time) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldLTE(FieldPublishedAt, v))
}

// PublishedAtIsNil applies the IsNil predicate on the "published_at" field.
func PublishedAtIsNil() predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldIsNull(FieldPublishedAt))
}

// PublishedAtNotNil applies the NotNil predicate on the "published_at" field.
func PublishedAtNotNil() predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldNotNull(FieldPublishedAt))
}

// FetchedAtEQ applies the EQ predicate on the "fetched_at" field.
func FetchedAtEQ(v time.Time) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldEQ(FieldFetchedAt, v))
}

// FetchedAtNEQ applies the NEQ predicate on the "fetched_at" field.
func FetchedAtNEQ(v time.Time) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldNEQ(FieldFetchedAt, v))
}

// FetchedAtIn applies the In predicate on the "fetched_at" field.
func FetchedAtIn(vs ...time.Time) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldIn(FieldFetchedAt, vs...))
}

// FetchedAtNotIn applies the NotIn predicate on the "fetched_at" field.
func FetchedAtNotIn(vs ...time.Time) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldNotIn(FieldFetchedAt, vs...))
}

// FetchedAtGT applies the GT predicate on the "fetched_at" field.
func FetchedAtGT(v time.Time) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldGT(FieldFetchedAt, v))
}

// FetchedAtGTE applies the GTE predicate on the "fetched_at" field.
func FetchedAtGTE(v time.Time) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldGTE(FieldFetchedAt, v))
}

// FetchedAtLT applies the LT predicate on the "fetched_at" field.
func FetchedAtLT(v time.Time) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldLT(FieldFetchedAt, v))
}

// FetchedAtLTE applies the LTE predicate on the "fetched_at" field.
func FetchedAtLTE(v time.Time) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldLTE(FieldFetchedAt, v))
}

// FetchedAtIsNil applies the IsNil predicate on the "fetched_at" field.
func FetchedAtIsNil() predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldIsNull(FieldFetchedAt))
}

// FetchedAtNotNil applies the NotNil predicate on the "fetched_at" field.
func FetchedAtNotNil() predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldNotNull(FieldFetchedAt))
}

// LanguageEQ applies the EQ predicate on the "language" field.
func LanguageEQ(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldEQ(FieldLanguage, v))
}

// LanguageNEQ applies the NEQ predicate on the "language" field.
func LanguageNEQ(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldNEQ(FieldLanguage, v))
}

// LanguageIn applies the In predicate on the "language" field.
func LanguageIn(vs ...string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldIn(FieldLanguage, vs...))
}

// LanguageNotIn applies the NotIn predicate on the "language" field.
func LanguageNotIn(vs ...string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldNotIn(FieldLanguage, vs...))
}

// LanguageGT applies the GT predicate on the "language" field.
func LanguageGT(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldGT(FieldLanguage, v))
}

// LanguageGTE applies the GTE predicate on the "language" field.
func LanguageGTE(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldGTE(FieldLanguage, v))
}

// LanguageLT applies the LT predicate on the "language" field.
func LanguageLT(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldLT(FieldLanguage, v))
}

// LanguageLTE applies the LTE predicate on the "language" field.
func LanguageLTE(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldLTE(FieldLanguage, v))
}

// LanguageContains applies the Contains predicate on the "language" field.
func LanguageContains(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldContains(FieldLanguage, v))
}

// LanguageHasPrefix applies the HasPrefix predicate on the "language" field.
func LanguageHasPrefix(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldHasPrefix(FieldLanguage, v))
}

// LanguageHasSuffix applies the HasSuffix predicate on the "language" field.
func LanguageHasSuffix(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldHasSuffix(FieldLanguage, v))
}

// LanguageEqualFold applies the EqualFold predicate on the "language" field.
func LanguageEqualFold(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldEqualFold(FieldLanguage, v))
}

// LanguageContainsFold applies the ContainsFold predicate on the "language" field.
func LanguageContainsFold(v string) predicate.TwitterNote {
	return predicate.TwitterNote(sql.FieldContainsFold(FieldLanguage, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TwitterNote) predicate.TwitterNote {
	return predicate.TwitterNote(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TwitterNote) predicate.TwitterNote {
	return predicate.TwitterNote(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TwitterNote) predicate.TwitterNote {
	return predicate.TwitterNote(sql.NotPredicates(p))
}
