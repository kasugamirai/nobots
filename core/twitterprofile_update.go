// Code generated by ent, DO NOT EDIT.

package core

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"freefrom.space/nobot/core/internal"
	"freefrom.space/nobot/core/predicate"
	"freefrom.space/nobot/core/twitterprofile"
)

// TwitterProfileUpdate is the builder for updating TwitterProfile entities.
type TwitterProfileUpdate struct {
	config
	hooks     []Hook
	mutation  *TwitterProfileMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the TwitterProfileUpdate builder.
func (tpu *TwitterProfileUpdate) Where(ps ...predicate.TwitterProfile) *TwitterProfileUpdate {
	tpu.mutation.Where(ps...)
	return tpu
}

// SetUserID sets the "user_id" field.
func (tpu *TwitterProfileUpdate) SetUserID(s string) *TwitterProfileUpdate {
	tpu.mutation.SetUserID(s)
	return tpu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (tpu *TwitterProfileUpdate) SetNillableUserID(s *string) *TwitterProfileUpdate {
	if s != nil {
		tpu.SetUserID(*s)
	}
	return tpu
}

// SetUserName sets the "user_name" field.
func (tpu *TwitterProfileUpdate) SetUserName(s string) *TwitterProfileUpdate {
	tpu.mutation.SetUserName(s)
	return tpu
}

// SetNillableUserName sets the "user_name" field if the given value is not nil.
func (tpu *TwitterProfileUpdate) SetNillableUserName(s *string) *TwitterProfileUpdate {
	if s != nil {
		tpu.SetUserName(*s)
	}
	return tpu
}

// SetName sets the "name" field.
func (tpu *TwitterProfileUpdate) SetName(s string) *TwitterProfileUpdate {
	tpu.mutation.SetName(s)
	return tpu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tpu *TwitterProfileUpdate) SetNillableName(s *string) *TwitterProfileUpdate {
	if s != nil {
		tpu.SetName(*s)
	}
	return tpu
}

// SetRawYaml sets the "raw_yaml" field.
func (tpu *TwitterProfileUpdate) SetRawYaml(s string) *TwitterProfileUpdate {
	tpu.mutation.SetRawYaml(s)
	return tpu
}

// SetNillableRawYaml sets the "raw_yaml" field if the given value is not nil.
func (tpu *TwitterProfileUpdate) SetNillableRawYaml(s *string) *TwitterProfileUpdate {
	if s != nil {
		tpu.SetRawYaml(*s)
	}
	return tpu
}

// SetActive sets the "active" field.
func (tpu *TwitterProfileUpdate) SetActive(b bool) *TwitterProfileUpdate {
	tpu.mutation.SetActive(b)
	return tpu
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (tpu *TwitterProfileUpdate) SetNillableActive(b *bool) *TwitterProfileUpdate {
	if b != nil {
		tpu.SetActive(*b)
	}
	return tpu
}

// ClearActive clears the value of the "active" field.
func (tpu *TwitterProfileUpdate) ClearActive() *TwitterProfileUpdate {
	tpu.mutation.ClearActive()
	return tpu
}

// SetJoinedTime sets the "joined_time" field.
func (tpu *TwitterProfileUpdate) SetJoinedTime(t time.Time) *TwitterProfileUpdate {
	tpu.mutation.SetJoinedTime(t)
	return tpu
}

// SetNillableJoinedTime sets the "joined_time" field if the given value is not nil.
func (tpu *TwitterProfileUpdate) SetNillableJoinedTime(t *time.Time) *TwitterProfileUpdate {
	if t != nil {
		tpu.SetJoinedTime(*t)
	}
	return tpu
}

// ClearJoinedTime clears the value of the "joined_time" field.
func (tpu *TwitterProfileUpdate) ClearJoinedTime() *TwitterProfileUpdate {
	tpu.mutation.ClearJoinedTime()
	return tpu
}

// SetLikesCount sets the "likes_count" field.
func (tpu *TwitterProfileUpdate) SetLikesCount(i int) *TwitterProfileUpdate {
	tpu.mutation.ResetLikesCount()
	tpu.mutation.SetLikesCount(i)
	return tpu
}

// SetNillableLikesCount sets the "likes_count" field if the given value is not nil.
func (tpu *TwitterProfileUpdate) SetNillableLikesCount(i *int) *TwitterProfileUpdate {
	if i != nil {
		tpu.SetLikesCount(*i)
	}
	return tpu
}

// AddLikesCount adds i to the "likes_count" field.
func (tpu *TwitterProfileUpdate) AddLikesCount(i int) *TwitterProfileUpdate {
	tpu.mutation.AddLikesCount(i)
	return tpu
}

// ClearLikesCount clears the value of the "likes_count" field.
func (tpu *TwitterProfileUpdate) ClearLikesCount() *TwitterProfileUpdate {
	tpu.mutation.ClearLikesCount()
	return tpu
}

// SetListedCount sets the "listed_count" field.
func (tpu *TwitterProfileUpdate) SetListedCount(i int) *TwitterProfileUpdate {
	tpu.mutation.ResetListedCount()
	tpu.mutation.SetListedCount(i)
	return tpu
}

// SetNillableListedCount sets the "listed_count" field if the given value is not nil.
func (tpu *TwitterProfileUpdate) SetNillableListedCount(i *int) *TwitterProfileUpdate {
	if i != nil {
		tpu.SetListedCount(*i)
	}
	return tpu
}

// AddListedCount adds i to the "listed_count" field.
func (tpu *TwitterProfileUpdate) AddListedCount(i int) *TwitterProfileUpdate {
	tpu.mutation.AddListedCount(i)
	return tpu
}

// ClearListedCount clears the value of the "listed_count" field.
func (tpu *TwitterProfileUpdate) ClearListedCount() *TwitterProfileUpdate {
	tpu.mutation.ClearListedCount()
	return tpu
}

// SetFollowersCount sets the "followers_count" field.
func (tpu *TwitterProfileUpdate) SetFollowersCount(i int) *TwitterProfileUpdate {
	tpu.mutation.ResetFollowersCount()
	tpu.mutation.SetFollowersCount(i)
	return tpu
}

// SetNillableFollowersCount sets the "followers_count" field if the given value is not nil.
func (tpu *TwitterProfileUpdate) SetNillableFollowersCount(i *int) *TwitterProfileUpdate {
	if i != nil {
		tpu.SetFollowersCount(*i)
	}
	return tpu
}

// AddFollowersCount adds i to the "followers_count" field.
func (tpu *TwitterProfileUpdate) AddFollowersCount(i int) *TwitterProfileUpdate {
	tpu.mutation.AddFollowersCount(i)
	return tpu
}

// ClearFollowersCount clears the value of the "followers_count" field.
func (tpu *TwitterProfileUpdate) ClearFollowersCount() *TwitterProfileUpdate {
	tpu.mutation.ClearFollowersCount()
	return tpu
}

// SetFollowingCount sets the "following_count" field.
func (tpu *TwitterProfileUpdate) SetFollowingCount(i int) *TwitterProfileUpdate {
	tpu.mutation.ResetFollowingCount()
	tpu.mutation.SetFollowingCount(i)
	return tpu
}

// SetNillableFollowingCount sets the "following_count" field if the given value is not nil.
func (tpu *TwitterProfileUpdate) SetNillableFollowingCount(i *int) *TwitterProfileUpdate {
	if i != nil {
		tpu.SetFollowingCount(*i)
	}
	return tpu
}

// AddFollowingCount adds i to the "following_count" field.
func (tpu *TwitterProfileUpdate) AddFollowingCount(i int) *TwitterProfileUpdate {
	tpu.mutation.AddFollowingCount(i)
	return tpu
}

// ClearFollowingCount clears the value of the "following_count" field.
func (tpu *TwitterProfileUpdate) ClearFollowingCount() *TwitterProfileUpdate {
	tpu.mutation.ClearFollowingCount()
	return tpu
}

// SetFriendsCount sets the "friends_count" field.
func (tpu *TwitterProfileUpdate) SetFriendsCount(i int) *TwitterProfileUpdate {
	tpu.mutation.ResetFriendsCount()
	tpu.mutation.SetFriendsCount(i)
	return tpu
}

// SetNillableFriendsCount sets the "friends_count" field if the given value is not nil.
func (tpu *TwitterProfileUpdate) SetNillableFriendsCount(i *int) *TwitterProfileUpdate {
	if i != nil {
		tpu.SetFriendsCount(*i)
	}
	return tpu
}

// AddFriendsCount adds i to the "friends_count" field.
func (tpu *TwitterProfileUpdate) AddFriendsCount(i int) *TwitterProfileUpdate {
	tpu.mutation.AddFriendsCount(i)
	return tpu
}

// ClearFriendsCount clears the value of the "friends_count" field.
func (tpu *TwitterProfileUpdate) ClearFriendsCount() *TwitterProfileUpdate {
	tpu.mutation.ClearFriendsCount()
	return tpu
}

// SetTwitterCount sets the "twitter_count" field.
func (tpu *TwitterProfileUpdate) SetTwitterCount(i int) *TwitterProfileUpdate {
	tpu.mutation.ResetTwitterCount()
	tpu.mutation.SetTwitterCount(i)
	return tpu
}

// SetNillableTwitterCount sets the "twitter_count" field if the given value is not nil.
func (tpu *TwitterProfileUpdate) SetNillableTwitterCount(i *int) *TwitterProfileUpdate {
	if i != nil {
		tpu.SetTwitterCount(*i)
	}
	return tpu
}

// AddTwitterCount adds i to the "twitter_count" field.
func (tpu *TwitterProfileUpdate) AddTwitterCount(i int) *TwitterProfileUpdate {
	tpu.mutation.AddTwitterCount(i)
	return tpu
}

// ClearTwitterCount clears the value of the "twitter_count" field.
func (tpu *TwitterProfileUpdate) ClearTwitterCount() *TwitterProfileUpdate {
	tpu.mutation.ClearTwitterCount()
	return tpu
}

// SetPinnedNoteID sets the "pinned_note_id" field.
func (tpu *TwitterProfileUpdate) SetPinnedNoteID(s string) *TwitterProfileUpdate {
	tpu.mutation.SetPinnedNoteID(s)
	return tpu
}

// SetNillablePinnedNoteID sets the "pinned_note_id" field if the given value is not nil.
func (tpu *TwitterProfileUpdate) SetNillablePinnedNoteID(s *string) *TwitterProfileUpdate {
	if s != nil {
		tpu.SetPinnedNoteID(*s)
	}
	return tpu
}

// ClearPinnedNoteID clears the value of the "pinned_note_id" field.
func (tpu *TwitterProfileUpdate) ClearPinnedNoteID() *TwitterProfileUpdate {
	tpu.mutation.ClearPinnedNoteID()
	return tpu
}

// SetAvatar sets the "avatar" field.
func (tpu *TwitterProfileUpdate) SetAvatar(s string) *TwitterProfileUpdate {
	tpu.mutation.SetAvatar(s)
	return tpu
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (tpu *TwitterProfileUpdate) SetNillableAvatar(s *string) *TwitterProfileUpdate {
	if s != nil {
		tpu.SetAvatar(*s)
	}
	return tpu
}

// ClearAvatar clears the value of the "avatar" field.
func (tpu *TwitterProfileUpdate) ClearAvatar() *TwitterProfileUpdate {
	tpu.mutation.ClearAvatar()
	return tpu
}

// SetBanner sets the "banner" field.
func (tpu *TwitterProfileUpdate) SetBanner(s string) *TwitterProfileUpdate {
	tpu.mutation.SetBanner(s)
	return tpu
}

// SetNillableBanner sets the "banner" field if the given value is not nil.
func (tpu *TwitterProfileUpdate) SetNillableBanner(s *string) *TwitterProfileUpdate {
	if s != nil {
		tpu.SetBanner(*s)
	}
	return tpu
}

// ClearBanner clears the value of the "banner" field.
func (tpu *TwitterProfileUpdate) ClearBanner() *TwitterProfileUpdate {
	tpu.mutation.ClearBanner()
	return tpu
}

// SetBiography sets the "biography" field.
func (tpu *TwitterProfileUpdate) SetBiography(s string) *TwitterProfileUpdate {
	tpu.mutation.SetBiography(s)
	return tpu
}

// SetNillableBiography sets the "biography" field if the given value is not nil.
func (tpu *TwitterProfileUpdate) SetNillableBiography(s *string) *TwitterProfileUpdate {
	if s != nil {
		tpu.SetBiography(*s)
	}
	return tpu
}

// ClearBiography clears the value of the "biography" field.
func (tpu *TwitterProfileUpdate) ClearBiography() *TwitterProfileUpdate {
	tpu.mutation.ClearBiography()
	return tpu
}

// SetBirthday sets the "birthday" field.
func (tpu *TwitterProfileUpdate) SetBirthday(s string) *TwitterProfileUpdate {
	tpu.mutation.SetBirthday(s)
	return tpu
}

// SetNillableBirthday sets the "birthday" field if the given value is not nil.
func (tpu *TwitterProfileUpdate) SetNillableBirthday(s *string) *TwitterProfileUpdate {
	if s != nil {
		tpu.SetBirthday(*s)
	}
	return tpu
}

// ClearBirthday clears the value of the "birthday" field.
func (tpu *TwitterProfileUpdate) ClearBirthday() *TwitterProfileUpdate {
	tpu.mutation.ClearBirthday()
	return tpu
}

// SetLocation sets the "location" field.
func (tpu *TwitterProfileUpdate) SetLocation(s string) *TwitterProfileUpdate {
	tpu.mutation.SetLocation(s)
	return tpu
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (tpu *TwitterProfileUpdate) SetNillableLocation(s *string) *TwitterProfileUpdate {
	if s != nil {
		tpu.SetLocation(*s)
	}
	return tpu
}

// ClearLocation clears the value of the "location" field.
func (tpu *TwitterProfileUpdate) ClearLocation() *TwitterProfileUpdate {
	tpu.mutation.ClearLocation()
	return tpu
}

// SetURL sets the "url" field.
func (tpu *TwitterProfileUpdate) SetURL(s string) *TwitterProfileUpdate {
	tpu.mutation.SetURL(s)
	return tpu
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (tpu *TwitterProfileUpdate) SetNillableURL(s *string) *TwitterProfileUpdate {
	if s != nil {
		tpu.SetURL(*s)
	}
	return tpu
}

// ClearURL clears the value of the "url" field.
func (tpu *TwitterProfileUpdate) ClearURL() *TwitterProfileUpdate {
	tpu.mutation.ClearURL()
	return tpu
}

// SetWebsite sets the "website" field.
func (tpu *TwitterProfileUpdate) SetWebsite(s string) *TwitterProfileUpdate {
	tpu.mutation.SetWebsite(s)
	return tpu
}

// SetNillableWebsite sets the "website" field if the given value is not nil.
func (tpu *TwitterProfileUpdate) SetNillableWebsite(s *string) *TwitterProfileUpdate {
	if s != nil {
		tpu.SetWebsite(*s)
	}
	return tpu
}

// ClearWebsite clears the value of the "website" field.
func (tpu *TwitterProfileUpdate) ClearWebsite() *TwitterProfileUpdate {
	tpu.mutation.ClearWebsite()
	return tpu
}

// SetNsecKey sets the "nsec_key" field.
func (tpu *TwitterProfileUpdate) SetNsecKey(s string) *TwitterProfileUpdate {
	tpu.mutation.SetNsecKey(s)
	return tpu
}

// SetNillableNsecKey sets the "nsec_key" field if the given value is not nil.
func (tpu *TwitterProfileUpdate) SetNillableNsecKey(s *string) *TwitterProfileUpdate {
	if s != nil {
		tpu.SetNsecKey(*s)
	}
	return tpu
}

// ClearNsecKey clears the value of the "nsec_key" field.
func (tpu *TwitterProfileUpdate) ClearNsecKey() *TwitterProfileUpdate {
	tpu.mutation.ClearNsecKey()
	return tpu
}

// SetNpubKey sets the "npub_key" field.
func (tpu *TwitterProfileUpdate) SetNpubKey(s string) *TwitterProfileUpdate {
	tpu.mutation.SetNpubKey(s)
	return tpu
}

// SetNillableNpubKey sets the "npub_key" field if the given value is not nil.
func (tpu *TwitterProfileUpdate) SetNillableNpubKey(s *string) *TwitterProfileUpdate {
	if s != nil {
		tpu.SetNpubKey(*s)
	}
	return tpu
}

// ClearNpubKey clears the value of the "npub_key" field.
func (tpu *TwitterProfileUpdate) ClearNpubKey() *TwitterProfileUpdate {
	tpu.mutation.ClearNpubKey()
	return tpu
}

// SetPrivateKeyHex sets the "private_key_hex" field.
func (tpu *TwitterProfileUpdate) SetPrivateKeyHex(s string) *TwitterProfileUpdate {
	tpu.mutation.SetPrivateKeyHex(s)
	return tpu
}

// SetNillablePrivateKeyHex sets the "private_key_hex" field if the given value is not nil.
func (tpu *TwitterProfileUpdate) SetNillablePrivateKeyHex(s *string) *TwitterProfileUpdate {
	if s != nil {
		tpu.SetPrivateKeyHex(*s)
	}
	return tpu
}

// ClearPrivateKeyHex clears the value of the "private_key_hex" field.
func (tpu *TwitterProfileUpdate) ClearPrivateKeyHex() *TwitterProfileUpdate {
	tpu.mutation.ClearPrivateKeyHex()
	return tpu
}

// SetPublicKeyHex sets the "public_key_hex" field.
func (tpu *TwitterProfileUpdate) SetPublicKeyHex(s string) *TwitterProfileUpdate {
	tpu.mutation.SetPublicKeyHex(s)
	return tpu
}

// SetNillablePublicKeyHex sets the "public_key_hex" field if the given value is not nil.
func (tpu *TwitterProfileUpdate) SetNillablePublicKeyHex(s *string) *TwitterProfileUpdate {
	if s != nil {
		tpu.SetPublicKeyHex(*s)
	}
	return tpu
}

// ClearPublicKeyHex clears the value of the "public_key_hex" field.
func (tpu *TwitterProfileUpdate) ClearPublicKeyHex() *TwitterProfileUpdate {
	tpu.mutation.ClearPublicKeyHex()
	return tpu
}

// SetPublishNostr sets the "publish_nostr" field.
func (tpu *TwitterProfileUpdate) SetPublishNostr(b bool) *TwitterProfileUpdate {
	tpu.mutation.SetPublishNostr(b)
	return tpu
}

// SetNillablePublishNostr sets the "publish_nostr" field if the given value is not nil.
func (tpu *TwitterProfileUpdate) SetNillablePublishNostr(b *bool) *TwitterProfileUpdate {
	if b != nil {
		tpu.SetPublishNostr(*b)
	}
	return tpu
}

// ClearPublishNostr clears the value of the "publish_nostr" field.
func (tpu *TwitterProfileUpdate) ClearPublishNostr() *TwitterProfileUpdate {
	tpu.mutation.ClearPublishNostr()
	return tpu
}

// Mutation returns the TwitterProfileMutation object of the builder.
func (tpu *TwitterProfileUpdate) Mutation() *TwitterProfileMutation {
	return tpu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tpu *TwitterProfileUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tpu.sqlSave, tpu.mutation, tpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tpu *TwitterProfileUpdate) SaveX(ctx context.Context) int {
	affected, err := tpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tpu *TwitterProfileUpdate) Exec(ctx context.Context) error {
	_, err := tpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tpu *TwitterProfileUpdate) ExecX(ctx context.Context) {
	if err := tpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tpu *TwitterProfileUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TwitterProfileUpdate {
	tpu.modifiers = append(tpu.modifiers, modifiers...)
	return tpu
}

func (tpu *TwitterProfileUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(twitterprofile.Table, twitterprofile.Columns, sqlgraph.NewFieldSpec(twitterprofile.FieldID, field.TypeInt))
	if ps := tpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tpu.mutation.UserID(); ok {
		_spec.SetField(twitterprofile.FieldUserID, field.TypeString, value)
	}
	if value, ok := tpu.mutation.UserName(); ok {
		_spec.SetField(twitterprofile.FieldUserName, field.TypeString, value)
	}
	if value, ok := tpu.mutation.Name(); ok {
		_spec.SetField(twitterprofile.FieldName, field.TypeString, value)
	}
	if value, ok := tpu.mutation.RawYaml(); ok {
		_spec.SetField(twitterprofile.FieldRawYaml, field.TypeString, value)
	}
	if value, ok := tpu.mutation.Active(); ok {
		_spec.SetField(twitterprofile.FieldActive, field.TypeBool, value)
	}
	if tpu.mutation.ActiveCleared() {
		_spec.ClearField(twitterprofile.FieldActive, field.TypeBool)
	}
	if value, ok := tpu.mutation.JoinedTime(); ok {
		_spec.SetField(twitterprofile.FieldJoinedTime, field.TypeTime, value)
	}
	if tpu.mutation.JoinedTimeCleared() {
		_spec.ClearField(twitterprofile.FieldJoinedTime, field.TypeTime)
	}
	if value, ok := tpu.mutation.LikesCount(); ok {
		_spec.SetField(twitterprofile.FieldLikesCount, field.TypeInt, value)
	}
	if value, ok := tpu.mutation.AddedLikesCount(); ok {
		_spec.AddField(twitterprofile.FieldLikesCount, field.TypeInt, value)
	}
	if tpu.mutation.LikesCountCleared() {
		_spec.ClearField(twitterprofile.FieldLikesCount, field.TypeInt)
	}
	if value, ok := tpu.mutation.ListedCount(); ok {
		_spec.SetField(twitterprofile.FieldListedCount, field.TypeInt, value)
	}
	if value, ok := tpu.mutation.AddedListedCount(); ok {
		_spec.AddField(twitterprofile.FieldListedCount, field.TypeInt, value)
	}
	if tpu.mutation.ListedCountCleared() {
		_spec.ClearField(twitterprofile.FieldListedCount, field.TypeInt)
	}
	if value, ok := tpu.mutation.FollowersCount(); ok {
		_spec.SetField(twitterprofile.FieldFollowersCount, field.TypeInt, value)
	}
	if value, ok := tpu.mutation.AddedFollowersCount(); ok {
		_spec.AddField(twitterprofile.FieldFollowersCount, field.TypeInt, value)
	}
	if tpu.mutation.FollowersCountCleared() {
		_spec.ClearField(twitterprofile.FieldFollowersCount, field.TypeInt)
	}
	if value, ok := tpu.mutation.FollowingCount(); ok {
		_spec.SetField(twitterprofile.FieldFollowingCount, field.TypeInt, value)
	}
	if value, ok := tpu.mutation.AddedFollowingCount(); ok {
		_spec.AddField(twitterprofile.FieldFollowingCount, field.TypeInt, value)
	}
	if tpu.mutation.FollowingCountCleared() {
		_spec.ClearField(twitterprofile.FieldFollowingCount, field.TypeInt)
	}
	if value, ok := tpu.mutation.FriendsCount(); ok {
		_spec.SetField(twitterprofile.FieldFriendsCount, field.TypeInt, value)
	}
	if value, ok := tpu.mutation.AddedFriendsCount(); ok {
		_spec.AddField(twitterprofile.FieldFriendsCount, field.TypeInt, value)
	}
	if tpu.mutation.FriendsCountCleared() {
		_spec.ClearField(twitterprofile.FieldFriendsCount, field.TypeInt)
	}
	if value, ok := tpu.mutation.TwitterCount(); ok {
		_spec.SetField(twitterprofile.FieldTwitterCount, field.TypeInt, value)
	}
	if value, ok := tpu.mutation.AddedTwitterCount(); ok {
		_spec.AddField(twitterprofile.FieldTwitterCount, field.TypeInt, value)
	}
	if tpu.mutation.TwitterCountCleared() {
		_spec.ClearField(twitterprofile.FieldTwitterCount, field.TypeInt)
	}
	if value, ok := tpu.mutation.PinnedNoteID(); ok {
		_spec.SetField(twitterprofile.FieldPinnedNoteID, field.TypeString, value)
	}
	if tpu.mutation.PinnedNoteIDCleared() {
		_spec.ClearField(twitterprofile.FieldPinnedNoteID, field.TypeString)
	}
	if value, ok := tpu.mutation.Avatar(); ok {
		_spec.SetField(twitterprofile.FieldAvatar, field.TypeString, value)
	}
	if tpu.mutation.AvatarCleared() {
		_spec.ClearField(twitterprofile.FieldAvatar, field.TypeString)
	}
	if value, ok := tpu.mutation.Banner(); ok {
		_spec.SetField(twitterprofile.FieldBanner, field.TypeString, value)
	}
	if tpu.mutation.BannerCleared() {
		_spec.ClearField(twitterprofile.FieldBanner, field.TypeString)
	}
	if value, ok := tpu.mutation.Biography(); ok {
		_spec.SetField(twitterprofile.FieldBiography, field.TypeString, value)
	}
	if tpu.mutation.BiographyCleared() {
		_spec.ClearField(twitterprofile.FieldBiography, field.TypeString)
	}
	if value, ok := tpu.mutation.Birthday(); ok {
		_spec.SetField(twitterprofile.FieldBirthday, field.TypeString, value)
	}
	if tpu.mutation.BirthdayCleared() {
		_spec.ClearField(twitterprofile.FieldBirthday, field.TypeString)
	}
	if value, ok := tpu.mutation.Location(); ok {
		_spec.SetField(twitterprofile.FieldLocation, field.TypeString, value)
	}
	if tpu.mutation.LocationCleared() {
		_spec.ClearField(twitterprofile.FieldLocation, field.TypeString)
	}
	if value, ok := tpu.mutation.URL(); ok {
		_spec.SetField(twitterprofile.FieldURL, field.TypeString, value)
	}
	if tpu.mutation.URLCleared() {
		_spec.ClearField(twitterprofile.FieldURL, field.TypeString)
	}
	if value, ok := tpu.mutation.Website(); ok {
		_spec.SetField(twitterprofile.FieldWebsite, field.TypeString, value)
	}
	if tpu.mutation.WebsiteCleared() {
		_spec.ClearField(twitterprofile.FieldWebsite, field.TypeString)
	}
	if value, ok := tpu.mutation.NsecKey(); ok {
		_spec.SetField(twitterprofile.FieldNsecKey, field.TypeString, value)
	}
	if tpu.mutation.NsecKeyCleared() {
		_spec.ClearField(twitterprofile.FieldNsecKey, field.TypeString)
	}
	if value, ok := tpu.mutation.NpubKey(); ok {
		_spec.SetField(twitterprofile.FieldNpubKey, field.TypeString, value)
	}
	if tpu.mutation.NpubKeyCleared() {
		_spec.ClearField(twitterprofile.FieldNpubKey, field.TypeString)
	}
	if value, ok := tpu.mutation.PrivateKeyHex(); ok {
		_spec.SetField(twitterprofile.FieldPrivateKeyHex, field.TypeString, value)
	}
	if tpu.mutation.PrivateKeyHexCleared() {
		_spec.ClearField(twitterprofile.FieldPrivateKeyHex, field.TypeString)
	}
	if value, ok := tpu.mutation.PublicKeyHex(); ok {
		_spec.SetField(twitterprofile.FieldPublicKeyHex, field.TypeString, value)
	}
	if tpu.mutation.PublicKeyHexCleared() {
		_spec.ClearField(twitterprofile.FieldPublicKeyHex, field.TypeString)
	}
	if value, ok := tpu.mutation.PublishNostr(); ok {
		_spec.SetField(twitterprofile.FieldPublishNostr, field.TypeBool, value)
	}
	if tpu.mutation.PublishNostrCleared() {
		_spec.ClearField(twitterprofile.FieldPublishNostr, field.TypeBool)
	}
	_spec.Node.Schema = tpu.schemaConfig.TwitterProfile
	ctx = internal.NewSchemaConfigContext(ctx, tpu.schemaConfig)
	_spec.AddModifiers(tpu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, tpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{twitterprofile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tpu.mutation.done = true
	return n, nil
}

// TwitterProfileUpdateOne is the builder for updating a single TwitterProfile entity.
type TwitterProfileUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *TwitterProfileMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUserID sets the "user_id" field.
func (tpuo *TwitterProfileUpdateOne) SetUserID(s string) *TwitterProfileUpdateOne {
	tpuo.mutation.SetUserID(s)
	return tpuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (tpuo *TwitterProfileUpdateOne) SetNillableUserID(s *string) *TwitterProfileUpdateOne {
	if s != nil {
		tpuo.SetUserID(*s)
	}
	return tpuo
}

// SetUserName sets the "user_name" field.
func (tpuo *TwitterProfileUpdateOne) SetUserName(s string) *TwitterProfileUpdateOne {
	tpuo.mutation.SetUserName(s)
	return tpuo
}

// SetNillableUserName sets the "user_name" field if the given value is not nil.
func (tpuo *TwitterProfileUpdateOne) SetNillableUserName(s *string) *TwitterProfileUpdateOne {
	if s != nil {
		tpuo.SetUserName(*s)
	}
	return tpuo
}

// SetName sets the "name" field.
func (tpuo *TwitterProfileUpdateOne) SetName(s string) *TwitterProfileUpdateOne {
	tpuo.mutation.SetName(s)
	return tpuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tpuo *TwitterProfileUpdateOne) SetNillableName(s *string) *TwitterProfileUpdateOne {
	if s != nil {
		tpuo.SetName(*s)
	}
	return tpuo
}

// SetRawYaml sets the "raw_yaml" field.
func (tpuo *TwitterProfileUpdateOne) SetRawYaml(s string) *TwitterProfileUpdateOne {
	tpuo.mutation.SetRawYaml(s)
	return tpuo
}

// SetNillableRawYaml sets the "raw_yaml" field if the given value is not nil.
func (tpuo *TwitterProfileUpdateOne) SetNillableRawYaml(s *string) *TwitterProfileUpdateOne {
	if s != nil {
		tpuo.SetRawYaml(*s)
	}
	return tpuo
}

// SetActive sets the "active" field.
func (tpuo *TwitterProfileUpdateOne) SetActive(b bool) *TwitterProfileUpdateOne {
	tpuo.mutation.SetActive(b)
	return tpuo
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (tpuo *TwitterProfileUpdateOne) SetNillableActive(b *bool) *TwitterProfileUpdateOne {
	if b != nil {
		tpuo.SetActive(*b)
	}
	return tpuo
}

// ClearActive clears the value of the "active" field.
func (tpuo *TwitterProfileUpdateOne) ClearActive() *TwitterProfileUpdateOne {
	tpuo.mutation.ClearActive()
	return tpuo
}

// SetJoinedTime sets the "joined_time" field.
func (tpuo *TwitterProfileUpdateOne) SetJoinedTime(t time.Time) *TwitterProfileUpdateOne {
	tpuo.mutation.SetJoinedTime(t)
	return tpuo
}

// SetNillableJoinedTime sets the "joined_time" field if the given value is not nil.
func (tpuo *TwitterProfileUpdateOne) SetNillableJoinedTime(t *time.Time) *TwitterProfileUpdateOne {
	if t != nil {
		tpuo.SetJoinedTime(*t)
	}
	return tpuo
}

// ClearJoinedTime clears the value of the "joined_time" field.
func (tpuo *TwitterProfileUpdateOne) ClearJoinedTime() *TwitterProfileUpdateOne {
	tpuo.mutation.ClearJoinedTime()
	return tpuo
}

// SetLikesCount sets the "likes_count" field.
func (tpuo *TwitterProfileUpdateOne) SetLikesCount(i int) *TwitterProfileUpdateOne {
	tpuo.mutation.ResetLikesCount()
	tpuo.mutation.SetLikesCount(i)
	return tpuo
}

// SetNillableLikesCount sets the "likes_count" field if the given value is not nil.
func (tpuo *TwitterProfileUpdateOne) SetNillableLikesCount(i *int) *TwitterProfileUpdateOne {
	if i != nil {
		tpuo.SetLikesCount(*i)
	}
	return tpuo
}

// AddLikesCount adds i to the "likes_count" field.
func (tpuo *TwitterProfileUpdateOne) AddLikesCount(i int) *TwitterProfileUpdateOne {
	tpuo.mutation.AddLikesCount(i)
	return tpuo
}

// ClearLikesCount clears the value of the "likes_count" field.
func (tpuo *TwitterProfileUpdateOne) ClearLikesCount() *TwitterProfileUpdateOne {
	tpuo.mutation.ClearLikesCount()
	return tpuo
}

// SetListedCount sets the "listed_count" field.
func (tpuo *TwitterProfileUpdateOne) SetListedCount(i int) *TwitterProfileUpdateOne {
	tpuo.mutation.ResetListedCount()
	tpuo.mutation.SetListedCount(i)
	return tpuo
}

// SetNillableListedCount sets the "listed_count" field if the given value is not nil.
func (tpuo *TwitterProfileUpdateOne) SetNillableListedCount(i *int) *TwitterProfileUpdateOne {
	if i != nil {
		tpuo.SetListedCount(*i)
	}
	return tpuo
}

// AddListedCount adds i to the "listed_count" field.
func (tpuo *TwitterProfileUpdateOne) AddListedCount(i int) *TwitterProfileUpdateOne {
	tpuo.mutation.AddListedCount(i)
	return tpuo
}

// ClearListedCount clears the value of the "listed_count" field.
func (tpuo *TwitterProfileUpdateOne) ClearListedCount() *TwitterProfileUpdateOne {
	tpuo.mutation.ClearListedCount()
	return tpuo
}

// SetFollowersCount sets the "followers_count" field.
func (tpuo *TwitterProfileUpdateOne) SetFollowersCount(i int) *TwitterProfileUpdateOne {
	tpuo.mutation.ResetFollowersCount()
	tpuo.mutation.SetFollowersCount(i)
	return tpuo
}

// SetNillableFollowersCount sets the "followers_count" field if the given value is not nil.
func (tpuo *TwitterProfileUpdateOne) SetNillableFollowersCount(i *int) *TwitterProfileUpdateOne {
	if i != nil {
		tpuo.SetFollowersCount(*i)
	}
	return tpuo
}

// AddFollowersCount adds i to the "followers_count" field.
func (tpuo *TwitterProfileUpdateOne) AddFollowersCount(i int) *TwitterProfileUpdateOne {
	tpuo.mutation.AddFollowersCount(i)
	return tpuo
}

// ClearFollowersCount clears the value of the "followers_count" field.
func (tpuo *TwitterProfileUpdateOne) ClearFollowersCount() *TwitterProfileUpdateOne {
	tpuo.mutation.ClearFollowersCount()
	return tpuo
}

// SetFollowingCount sets the "following_count" field.
func (tpuo *TwitterProfileUpdateOne) SetFollowingCount(i int) *TwitterProfileUpdateOne {
	tpuo.mutation.ResetFollowingCount()
	tpuo.mutation.SetFollowingCount(i)
	return tpuo
}

// SetNillableFollowingCount sets the "following_count" field if the given value is not nil.
func (tpuo *TwitterProfileUpdateOne) SetNillableFollowingCount(i *int) *TwitterProfileUpdateOne {
	if i != nil {
		tpuo.SetFollowingCount(*i)
	}
	return tpuo
}

// AddFollowingCount adds i to the "following_count" field.
func (tpuo *TwitterProfileUpdateOne) AddFollowingCount(i int) *TwitterProfileUpdateOne {
	tpuo.mutation.AddFollowingCount(i)
	return tpuo
}

// ClearFollowingCount clears the value of the "following_count" field.
func (tpuo *TwitterProfileUpdateOne) ClearFollowingCount() *TwitterProfileUpdateOne {
	tpuo.mutation.ClearFollowingCount()
	return tpuo
}

// SetFriendsCount sets the "friends_count" field.
func (tpuo *TwitterProfileUpdateOne) SetFriendsCount(i int) *TwitterProfileUpdateOne {
	tpuo.mutation.ResetFriendsCount()
	tpuo.mutation.SetFriendsCount(i)
	return tpuo
}

// SetNillableFriendsCount sets the "friends_count" field if the given value is not nil.
func (tpuo *TwitterProfileUpdateOne) SetNillableFriendsCount(i *int) *TwitterProfileUpdateOne {
	if i != nil {
		tpuo.SetFriendsCount(*i)
	}
	return tpuo
}

// AddFriendsCount adds i to the "friends_count" field.
func (tpuo *TwitterProfileUpdateOne) AddFriendsCount(i int) *TwitterProfileUpdateOne {
	tpuo.mutation.AddFriendsCount(i)
	return tpuo
}

// ClearFriendsCount clears the value of the "friends_count" field.
func (tpuo *TwitterProfileUpdateOne) ClearFriendsCount() *TwitterProfileUpdateOne {
	tpuo.mutation.ClearFriendsCount()
	return tpuo
}

// SetTwitterCount sets the "twitter_count" field.
func (tpuo *TwitterProfileUpdateOne) SetTwitterCount(i int) *TwitterProfileUpdateOne {
	tpuo.mutation.ResetTwitterCount()
	tpuo.mutation.SetTwitterCount(i)
	return tpuo
}

// SetNillableTwitterCount sets the "twitter_count" field if the given value is not nil.
func (tpuo *TwitterProfileUpdateOne) SetNillableTwitterCount(i *int) *TwitterProfileUpdateOne {
	if i != nil {
		tpuo.SetTwitterCount(*i)
	}
	return tpuo
}

// AddTwitterCount adds i to the "twitter_count" field.
func (tpuo *TwitterProfileUpdateOne) AddTwitterCount(i int) *TwitterProfileUpdateOne {
	tpuo.mutation.AddTwitterCount(i)
	return tpuo
}

// ClearTwitterCount clears the value of the "twitter_count" field.
func (tpuo *TwitterProfileUpdateOne) ClearTwitterCount() *TwitterProfileUpdateOne {
	tpuo.mutation.ClearTwitterCount()
	return tpuo
}

// SetPinnedNoteID sets the "pinned_note_id" field.
func (tpuo *TwitterProfileUpdateOne) SetPinnedNoteID(s string) *TwitterProfileUpdateOne {
	tpuo.mutation.SetPinnedNoteID(s)
	return tpuo
}

// SetNillablePinnedNoteID sets the "pinned_note_id" field if the given value is not nil.
func (tpuo *TwitterProfileUpdateOne) SetNillablePinnedNoteID(s *string) *TwitterProfileUpdateOne {
	if s != nil {
		tpuo.SetPinnedNoteID(*s)
	}
	return tpuo
}

// ClearPinnedNoteID clears the value of the "pinned_note_id" field.
func (tpuo *TwitterProfileUpdateOne) ClearPinnedNoteID() *TwitterProfileUpdateOne {
	tpuo.mutation.ClearPinnedNoteID()
	return tpuo
}

// SetAvatar sets the "avatar" field.
func (tpuo *TwitterProfileUpdateOne) SetAvatar(s string) *TwitterProfileUpdateOne {
	tpuo.mutation.SetAvatar(s)
	return tpuo
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (tpuo *TwitterProfileUpdateOne) SetNillableAvatar(s *string) *TwitterProfileUpdateOne {
	if s != nil {
		tpuo.SetAvatar(*s)
	}
	return tpuo
}

// ClearAvatar clears the value of the "avatar" field.
func (tpuo *TwitterProfileUpdateOne) ClearAvatar() *TwitterProfileUpdateOne {
	tpuo.mutation.ClearAvatar()
	return tpuo
}

// SetBanner sets the "banner" field.
func (tpuo *TwitterProfileUpdateOne) SetBanner(s string) *TwitterProfileUpdateOne {
	tpuo.mutation.SetBanner(s)
	return tpuo
}

// SetNillableBanner sets the "banner" field if the given value is not nil.
func (tpuo *TwitterProfileUpdateOne) SetNillableBanner(s *string) *TwitterProfileUpdateOne {
	if s != nil {
		tpuo.SetBanner(*s)
	}
	return tpuo
}

// ClearBanner clears the value of the "banner" field.
func (tpuo *TwitterProfileUpdateOne) ClearBanner() *TwitterProfileUpdateOne {
	tpuo.mutation.ClearBanner()
	return tpuo
}

// SetBiography sets the "biography" field.
func (tpuo *TwitterProfileUpdateOne) SetBiography(s string) *TwitterProfileUpdateOne {
	tpuo.mutation.SetBiography(s)
	return tpuo
}

// SetNillableBiography sets the "biography" field if the given value is not nil.
func (tpuo *TwitterProfileUpdateOne) SetNillableBiography(s *string) *TwitterProfileUpdateOne {
	if s != nil {
		tpuo.SetBiography(*s)
	}
	return tpuo
}

// ClearBiography clears the value of the "biography" field.
func (tpuo *TwitterProfileUpdateOne) ClearBiography() *TwitterProfileUpdateOne {
	tpuo.mutation.ClearBiography()
	return tpuo
}

// SetBirthday sets the "birthday" field.
func (tpuo *TwitterProfileUpdateOne) SetBirthday(s string) *TwitterProfileUpdateOne {
	tpuo.mutation.SetBirthday(s)
	return tpuo
}

// SetNillableBirthday sets the "birthday" field if the given value is not nil.
func (tpuo *TwitterProfileUpdateOne) SetNillableBirthday(s *string) *TwitterProfileUpdateOne {
	if s != nil {
		tpuo.SetBirthday(*s)
	}
	return tpuo
}

// ClearBirthday clears the value of the "birthday" field.
func (tpuo *TwitterProfileUpdateOne) ClearBirthday() *TwitterProfileUpdateOne {
	tpuo.mutation.ClearBirthday()
	return tpuo
}

// SetLocation sets the "location" field.
func (tpuo *TwitterProfileUpdateOne) SetLocation(s string) *TwitterProfileUpdateOne {
	tpuo.mutation.SetLocation(s)
	return tpuo
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (tpuo *TwitterProfileUpdateOne) SetNillableLocation(s *string) *TwitterProfileUpdateOne {
	if s != nil {
		tpuo.SetLocation(*s)
	}
	return tpuo
}

// ClearLocation clears the value of the "location" field.
func (tpuo *TwitterProfileUpdateOne) ClearLocation() *TwitterProfileUpdateOne {
	tpuo.mutation.ClearLocation()
	return tpuo
}

// SetURL sets the "url" field.
func (tpuo *TwitterProfileUpdateOne) SetURL(s string) *TwitterProfileUpdateOne {
	tpuo.mutation.SetURL(s)
	return tpuo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (tpuo *TwitterProfileUpdateOne) SetNillableURL(s *string) *TwitterProfileUpdateOne {
	if s != nil {
		tpuo.SetURL(*s)
	}
	return tpuo
}

// ClearURL clears the value of the "url" field.
func (tpuo *TwitterProfileUpdateOne) ClearURL() *TwitterProfileUpdateOne {
	tpuo.mutation.ClearURL()
	return tpuo
}

// SetWebsite sets the "website" field.
func (tpuo *TwitterProfileUpdateOne) SetWebsite(s string) *TwitterProfileUpdateOne {
	tpuo.mutation.SetWebsite(s)
	return tpuo
}

// SetNillableWebsite sets the "website" field if the given value is not nil.
func (tpuo *TwitterProfileUpdateOne) SetNillableWebsite(s *string) *TwitterProfileUpdateOne {
	if s != nil {
		tpuo.SetWebsite(*s)
	}
	return tpuo
}

// ClearWebsite clears the value of the "website" field.
func (tpuo *TwitterProfileUpdateOne) ClearWebsite() *TwitterProfileUpdateOne {
	tpuo.mutation.ClearWebsite()
	return tpuo
}

// SetNsecKey sets the "nsec_key" field.
func (tpuo *TwitterProfileUpdateOne) SetNsecKey(s string) *TwitterProfileUpdateOne {
	tpuo.mutation.SetNsecKey(s)
	return tpuo
}

// SetNillableNsecKey sets the "nsec_key" field if the given value is not nil.
func (tpuo *TwitterProfileUpdateOne) SetNillableNsecKey(s *string) *TwitterProfileUpdateOne {
	if s != nil {
		tpuo.SetNsecKey(*s)
	}
	return tpuo
}

// ClearNsecKey clears the value of the "nsec_key" field.
func (tpuo *TwitterProfileUpdateOne) ClearNsecKey() *TwitterProfileUpdateOne {
	tpuo.mutation.ClearNsecKey()
	return tpuo
}

// SetNpubKey sets the "npub_key" field.
func (tpuo *TwitterProfileUpdateOne) SetNpubKey(s string) *TwitterProfileUpdateOne {
	tpuo.mutation.SetNpubKey(s)
	return tpuo
}

// SetNillableNpubKey sets the "npub_key" field if the given value is not nil.
func (tpuo *TwitterProfileUpdateOne) SetNillableNpubKey(s *string) *TwitterProfileUpdateOne {
	if s != nil {
		tpuo.SetNpubKey(*s)
	}
	return tpuo
}

// ClearNpubKey clears the value of the "npub_key" field.
func (tpuo *TwitterProfileUpdateOne) ClearNpubKey() *TwitterProfileUpdateOne {
	tpuo.mutation.ClearNpubKey()
	return tpuo
}

// SetPrivateKeyHex sets the "private_key_hex" field.
func (tpuo *TwitterProfileUpdateOne) SetPrivateKeyHex(s string) *TwitterProfileUpdateOne {
	tpuo.mutation.SetPrivateKeyHex(s)
	return tpuo
}

// SetNillablePrivateKeyHex sets the "private_key_hex" field if the given value is not nil.
func (tpuo *TwitterProfileUpdateOne) SetNillablePrivateKeyHex(s *string) *TwitterProfileUpdateOne {
	if s != nil {
		tpuo.SetPrivateKeyHex(*s)
	}
	return tpuo
}

// ClearPrivateKeyHex clears the value of the "private_key_hex" field.
func (tpuo *TwitterProfileUpdateOne) ClearPrivateKeyHex() *TwitterProfileUpdateOne {
	tpuo.mutation.ClearPrivateKeyHex()
	return tpuo
}

// SetPublicKeyHex sets the "public_key_hex" field.
func (tpuo *TwitterProfileUpdateOne) SetPublicKeyHex(s string) *TwitterProfileUpdateOne {
	tpuo.mutation.SetPublicKeyHex(s)
	return tpuo
}

// SetNillablePublicKeyHex sets the "public_key_hex" field if the given value is not nil.
func (tpuo *TwitterProfileUpdateOne) SetNillablePublicKeyHex(s *string) *TwitterProfileUpdateOne {
	if s != nil {
		tpuo.SetPublicKeyHex(*s)
	}
	return tpuo
}

// ClearPublicKeyHex clears the value of the "public_key_hex" field.
func (tpuo *TwitterProfileUpdateOne) ClearPublicKeyHex() *TwitterProfileUpdateOne {
	tpuo.mutation.ClearPublicKeyHex()
	return tpuo
}

// SetPublishNostr sets the "publish_nostr" field.
func (tpuo *TwitterProfileUpdateOne) SetPublishNostr(b bool) *TwitterProfileUpdateOne {
	tpuo.mutation.SetPublishNostr(b)
	return tpuo
}

// SetNillablePublishNostr sets the "publish_nostr" field if the given value is not nil.
func (tpuo *TwitterProfileUpdateOne) SetNillablePublishNostr(b *bool) *TwitterProfileUpdateOne {
	if b != nil {
		tpuo.SetPublishNostr(*b)
	}
	return tpuo
}

// ClearPublishNostr clears the value of the "publish_nostr" field.
func (tpuo *TwitterProfileUpdateOne) ClearPublishNostr() *TwitterProfileUpdateOne {
	tpuo.mutation.ClearPublishNostr()
	return tpuo
}

// Mutation returns the TwitterProfileMutation object of the builder.
func (tpuo *TwitterProfileUpdateOne) Mutation() *TwitterProfileMutation {
	return tpuo.mutation
}

// Where appends a list predicates to the TwitterProfileUpdate builder.
func (tpuo *TwitterProfileUpdateOne) Where(ps ...predicate.TwitterProfile) *TwitterProfileUpdateOne {
	tpuo.mutation.Where(ps...)
	return tpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tpuo *TwitterProfileUpdateOne) Select(field string, fields ...string) *TwitterProfileUpdateOne {
	tpuo.fields = append([]string{field}, fields...)
	return tpuo
}

// Save executes the query and returns the updated TwitterProfile entity.
func (tpuo *TwitterProfileUpdateOne) Save(ctx context.Context) (*TwitterProfile, error) {
	return withHooks(ctx, tpuo.sqlSave, tpuo.mutation, tpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tpuo *TwitterProfileUpdateOne) SaveX(ctx context.Context) *TwitterProfile {
	node, err := tpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tpuo *TwitterProfileUpdateOne) Exec(ctx context.Context) error {
	_, err := tpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tpuo *TwitterProfileUpdateOne) ExecX(ctx context.Context) {
	if err := tpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tpuo *TwitterProfileUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TwitterProfileUpdateOne {
	tpuo.modifiers = append(tpuo.modifiers, modifiers...)
	return tpuo
}

func (tpuo *TwitterProfileUpdateOne) sqlSave(ctx context.Context) (_node *TwitterProfile, err error) {
	_spec := sqlgraph.NewUpdateSpec(twitterprofile.Table, twitterprofile.Columns, sqlgraph.NewFieldSpec(twitterprofile.FieldID, field.TypeInt))
	id, ok := tpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`core: missing "TwitterProfile.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, twitterprofile.FieldID)
		for _, f := range fields {
			if !twitterprofile.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("core: invalid field %q for query", f)}
			}
			if f != twitterprofile.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tpuo.mutation.UserID(); ok {
		_spec.SetField(twitterprofile.FieldUserID, field.TypeString, value)
	}
	if value, ok := tpuo.mutation.UserName(); ok {
		_spec.SetField(twitterprofile.FieldUserName, field.TypeString, value)
	}
	if value, ok := tpuo.mutation.Name(); ok {
		_spec.SetField(twitterprofile.FieldName, field.TypeString, value)
	}
	if value, ok := tpuo.mutation.RawYaml(); ok {
		_spec.SetField(twitterprofile.FieldRawYaml, field.TypeString, value)
	}
	if value, ok := tpuo.mutation.Active(); ok {
		_spec.SetField(twitterprofile.FieldActive, field.TypeBool, value)
	}
	if tpuo.mutation.ActiveCleared() {
		_spec.ClearField(twitterprofile.FieldActive, field.TypeBool)
	}
	if value, ok := tpuo.mutation.JoinedTime(); ok {
		_spec.SetField(twitterprofile.FieldJoinedTime, field.TypeTime, value)
	}
	if tpuo.mutation.JoinedTimeCleared() {
		_spec.ClearField(twitterprofile.FieldJoinedTime, field.TypeTime)
	}
	if value, ok := tpuo.mutation.LikesCount(); ok {
		_spec.SetField(twitterprofile.FieldLikesCount, field.TypeInt, value)
	}
	if value, ok := tpuo.mutation.AddedLikesCount(); ok {
		_spec.AddField(twitterprofile.FieldLikesCount, field.TypeInt, value)
	}
	if tpuo.mutation.LikesCountCleared() {
		_spec.ClearField(twitterprofile.FieldLikesCount, field.TypeInt)
	}
	if value, ok := tpuo.mutation.ListedCount(); ok {
		_spec.SetField(twitterprofile.FieldListedCount, field.TypeInt, value)
	}
	if value, ok := tpuo.mutation.AddedListedCount(); ok {
		_spec.AddField(twitterprofile.FieldListedCount, field.TypeInt, value)
	}
	if tpuo.mutation.ListedCountCleared() {
		_spec.ClearField(twitterprofile.FieldListedCount, field.TypeInt)
	}
	if value, ok := tpuo.mutation.FollowersCount(); ok {
		_spec.SetField(twitterprofile.FieldFollowersCount, field.TypeInt, value)
	}
	if value, ok := tpuo.mutation.AddedFollowersCount(); ok {
		_spec.AddField(twitterprofile.FieldFollowersCount, field.TypeInt, value)
	}
	if tpuo.mutation.FollowersCountCleared() {
		_spec.ClearField(twitterprofile.FieldFollowersCount, field.TypeInt)
	}
	if value, ok := tpuo.mutation.FollowingCount(); ok {
		_spec.SetField(twitterprofile.FieldFollowingCount, field.TypeInt, value)
	}
	if value, ok := tpuo.mutation.AddedFollowingCount(); ok {
		_spec.AddField(twitterprofile.FieldFollowingCount, field.TypeInt, value)
	}
	if tpuo.mutation.FollowingCountCleared() {
		_spec.ClearField(twitterprofile.FieldFollowingCount, field.TypeInt)
	}
	if value, ok := tpuo.mutation.FriendsCount(); ok {
		_spec.SetField(twitterprofile.FieldFriendsCount, field.TypeInt, value)
	}
	if value, ok := tpuo.mutation.AddedFriendsCount(); ok {
		_spec.AddField(twitterprofile.FieldFriendsCount, field.TypeInt, value)
	}
	if tpuo.mutation.FriendsCountCleared() {
		_spec.ClearField(twitterprofile.FieldFriendsCount, field.TypeInt)
	}
	if value, ok := tpuo.mutation.TwitterCount(); ok {
		_spec.SetField(twitterprofile.FieldTwitterCount, field.TypeInt, value)
	}
	if value, ok := tpuo.mutation.AddedTwitterCount(); ok {
		_spec.AddField(twitterprofile.FieldTwitterCount, field.TypeInt, value)
	}
	if tpuo.mutation.TwitterCountCleared() {
		_spec.ClearField(twitterprofile.FieldTwitterCount, field.TypeInt)
	}
	if value, ok := tpuo.mutation.PinnedNoteID(); ok {
		_spec.SetField(twitterprofile.FieldPinnedNoteID, field.TypeString, value)
	}
	if tpuo.mutation.PinnedNoteIDCleared() {
		_spec.ClearField(twitterprofile.FieldPinnedNoteID, field.TypeString)
	}
	if value, ok := tpuo.mutation.Avatar(); ok {
		_spec.SetField(twitterprofile.FieldAvatar, field.TypeString, value)
	}
	if tpuo.mutation.AvatarCleared() {
		_spec.ClearField(twitterprofile.FieldAvatar, field.TypeString)
	}
	if value, ok := tpuo.mutation.Banner(); ok {
		_spec.SetField(twitterprofile.FieldBanner, field.TypeString, value)
	}
	if tpuo.mutation.BannerCleared() {
		_spec.ClearField(twitterprofile.FieldBanner, field.TypeString)
	}
	if value, ok := tpuo.mutation.Biography(); ok {
		_spec.SetField(twitterprofile.FieldBiography, field.TypeString, value)
	}
	if tpuo.mutation.BiographyCleared() {
		_spec.ClearField(twitterprofile.FieldBiography, field.TypeString)
	}
	if value, ok := tpuo.mutation.Birthday(); ok {
		_spec.SetField(twitterprofile.FieldBirthday, field.TypeString, value)
	}
	if tpuo.mutation.BirthdayCleared() {
		_spec.ClearField(twitterprofile.FieldBirthday, field.TypeString)
	}
	if value, ok := tpuo.mutation.Location(); ok {
		_spec.SetField(twitterprofile.FieldLocation, field.TypeString, value)
	}
	if tpuo.mutation.LocationCleared() {
		_spec.ClearField(twitterprofile.FieldLocation, field.TypeString)
	}
	if value, ok := tpuo.mutation.URL(); ok {
		_spec.SetField(twitterprofile.FieldURL, field.TypeString, value)
	}
	if tpuo.mutation.URLCleared() {
		_spec.ClearField(twitterprofile.FieldURL, field.TypeString)
	}
	if value, ok := tpuo.mutation.Website(); ok {
		_spec.SetField(twitterprofile.FieldWebsite, field.TypeString, value)
	}
	if tpuo.mutation.WebsiteCleared() {
		_spec.ClearField(twitterprofile.FieldWebsite, field.TypeString)
	}
	if value, ok := tpuo.mutation.NsecKey(); ok {
		_spec.SetField(twitterprofile.FieldNsecKey, field.TypeString, value)
	}
	if tpuo.mutation.NsecKeyCleared() {
		_spec.ClearField(twitterprofile.FieldNsecKey, field.TypeString)
	}
	if value, ok := tpuo.mutation.NpubKey(); ok {
		_spec.SetField(twitterprofile.FieldNpubKey, field.TypeString, value)
	}
	if tpuo.mutation.NpubKeyCleared() {
		_spec.ClearField(twitterprofile.FieldNpubKey, field.TypeString)
	}
	if value, ok := tpuo.mutation.PrivateKeyHex(); ok {
		_spec.SetField(twitterprofile.FieldPrivateKeyHex, field.TypeString, value)
	}
	if tpuo.mutation.PrivateKeyHexCleared() {
		_spec.ClearField(twitterprofile.FieldPrivateKeyHex, field.TypeString)
	}
	if value, ok := tpuo.mutation.PublicKeyHex(); ok {
		_spec.SetField(twitterprofile.FieldPublicKeyHex, field.TypeString, value)
	}
	if tpuo.mutation.PublicKeyHexCleared() {
		_spec.ClearField(twitterprofile.FieldPublicKeyHex, field.TypeString)
	}
	if value, ok := tpuo.mutation.PublishNostr(); ok {
		_spec.SetField(twitterprofile.FieldPublishNostr, field.TypeBool, value)
	}
	if tpuo.mutation.PublishNostrCleared() {
		_spec.ClearField(twitterprofile.FieldPublishNostr, field.TypeBool)
	}
	_spec.Node.Schema = tpuo.schemaConfig.TwitterProfile
	ctx = internal.NewSchemaConfigContext(ctx, tpuo.schemaConfig)
	_spec.AddModifiers(tpuo.modifiers...)
	_node = &TwitterProfile{config: tpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{twitterprofile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tpuo.mutation.done = true
	return _node, nil
}
