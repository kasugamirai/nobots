// Code generated by ent, DO NOT EDIT.

package core

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"freefrom.space/nobot/core/twitternotesfetchhistory"
)

// TwitterNotesFetchHistoryCreate is the builder for creating a TwitterNotesFetchHistory entity.
type TwitterNotesFetchHistoryCreate struct {
	config
	mutation *TwitterNotesFetchHistoryMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetUserID sets the "user_id" field.
func (tnfhc *TwitterNotesFetchHistoryCreate) SetUserID(s string) *TwitterNotesFetchHistoryCreate {
	tnfhc.mutation.SetUserID(s)
	return tnfhc
}

// SetUsername sets the "username" field.
func (tnfhc *TwitterNotesFetchHistoryCreate) SetUsername(s string) *TwitterNotesFetchHistoryCreate {
	tnfhc.mutation.SetUsername(s)
	return tnfhc
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (tnfhc *TwitterNotesFetchHistoryCreate) SetNillableUsername(s *string) *TwitterNotesFetchHistoryCreate {
	if s != nil {
		tnfhc.SetUsername(*s)
	}
	return tnfhc
}

// SetName sets the "name" field.
func (tnfhc *TwitterNotesFetchHistoryCreate) SetName(s string) *TwitterNotesFetchHistoryCreate {
	tnfhc.mutation.SetName(s)
	return tnfhc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tnfhc *TwitterNotesFetchHistoryCreate) SetNillableName(s *string) *TwitterNotesFetchHistoryCreate {
	if s != nil {
		tnfhc.SetName(*s)
	}
	return tnfhc
}

// SetFetchedAt sets the "fetched_at" field.
func (tnfhc *TwitterNotesFetchHistoryCreate) SetFetchedAt(t time.Time) *TwitterNotesFetchHistoryCreate {
	tnfhc.mutation.SetFetchedAt(t)
	return tnfhc
}

// SetFetchCount sets the "fetch_count" field.
func (tnfhc *TwitterNotesFetchHistoryCreate) SetFetchCount(i int) *TwitterNotesFetchHistoryCreate {
	tnfhc.mutation.SetFetchCount(i)
	return tnfhc
}

// SetNewCount sets the "new_count" field.
func (tnfhc *TwitterNotesFetchHistoryCreate) SetNewCount(i int) *TwitterNotesFetchHistoryCreate {
	tnfhc.mutation.SetNewCount(i)
	return tnfhc
}

// SetID sets the "id" field.
func (tnfhc *TwitterNotesFetchHistoryCreate) SetID(i int64) *TwitterNotesFetchHistoryCreate {
	tnfhc.mutation.SetID(i)
	return tnfhc
}

// Mutation returns the TwitterNotesFetchHistoryMutation object of the builder.
func (tnfhc *TwitterNotesFetchHistoryCreate) Mutation() *TwitterNotesFetchHistoryMutation {
	return tnfhc.mutation
}

// Save creates the TwitterNotesFetchHistory in the database.
func (tnfhc *TwitterNotesFetchHistoryCreate) Save(ctx context.Context) (*TwitterNotesFetchHistory, error) {
	return withHooks(ctx, tnfhc.sqlSave, tnfhc.mutation, tnfhc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tnfhc *TwitterNotesFetchHistoryCreate) SaveX(ctx context.Context) *TwitterNotesFetchHistory {
	v, err := tnfhc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tnfhc *TwitterNotesFetchHistoryCreate) Exec(ctx context.Context) error {
	_, err := tnfhc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tnfhc *TwitterNotesFetchHistoryCreate) ExecX(ctx context.Context) {
	if err := tnfhc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tnfhc *TwitterNotesFetchHistoryCreate) check() error {
	if _, ok := tnfhc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`core: missing required field "TwitterNotesFetchHistory.user_id"`)}
	}
	if _, ok := tnfhc.mutation.FetchedAt(); !ok {
		return &ValidationError{Name: "fetched_at", err: errors.New(`core: missing required field "TwitterNotesFetchHistory.fetched_at"`)}
	}
	if _, ok := tnfhc.mutation.FetchCount(); !ok {
		return &ValidationError{Name: "fetch_count", err: errors.New(`core: missing required field "TwitterNotesFetchHistory.fetch_count"`)}
	}
	if _, ok := tnfhc.mutation.NewCount(); !ok {
		return &ValidationError{Name: "new_count", err: errors.New(`core: missing required field "TwitterNotesFetchHistory.new_count"`)}
	}
	return nil
}

func (tnfhc *TwitterNotesFetchHistoryCreate) sqlSave(ctx context.Context) (*TwitterNotesFetchHistory, error) {
	if err := tnfhc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tnfhc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tnfhc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	tnfhc.mutation.id = &_node.ID
	tnfhc.mutation.done = true
	return _node, nil
}

func (tnfhc *TwitterNotesFetchHistoryCreate) createSpec() (*TwitterNotesFetchHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &TwitterNotesFetchHistory{config: tnfhc.config}
		_spec = sqlgraph.NewCreateSpec(twitternotesfetchhistory.Table, sqlgraph.NewFieldSpec(twitternotesfetchhistory.FieldID, field.TypeInt64))
	)
	_spec.Schema = tnfhc.schemaConfig.TwitterNotesFetchHistory
	_spec.OnConflict = tnfhc.conflict
	if id, ok := tnfhc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tnfhc.mutation.UserID(); ok {
		_spec.SetField(twitternotesfetchhistory.FieldUserID, field.TypeString, value)
		_node.UserID = value
	}
	if value, ok := tnfhc.mutation.Username(); ok {
		_spec.SetField(twitternotesfetchhistory.FieldUsername, field.TypeString, value)
		_node.Username = value
	}
	if value, ok := tnfhc.mutation.Name(); ok {
		_spec.SetField(twitternotesfetchhistory.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := tnfhc.mutation.FetchedAt(); ok {
		_spec.SetField(twitternotesfetchhistory.FieldFetchedAt, field.TypeTime, value)
		_node.FetchedAt = value
	}
	if value, ok := tnfhc.mutation.FetchCount(); ok {
		_spec.SetField(twitternotesfetchhistory.FieldFetchCount, field.TypeInt, value)
		_node.FetchCount = value
	}
	if value, ok := tnfhc.mutation.NewCount(); ok {
		_spec.SetField(twitternotesfetchhistory.FieldNewCount, field.TypeInt, value)
		_node.NewCount = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TwitterNotesFetchHistory.Create().
//		SetUserID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TwitterNotesFetchHistoryUpsert) {
//			SetUserID(v+v).
//		}).
//		Exec(ctx)
func (tnfhc *TwitterNotesFetchHistoryCreate) OnConflict(opts ...sql.ConflictOption) *TwitterNotesFetchHistoryUpsertOne {
	tnfhc.conflict = opts
	return &TwitterNotesFetchHistoryUpsertOne{
		create: tnfhc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TwitterNotesFetchHistory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tnfhc *TwitterNotesFetchHistoryCreate) OnConflictColumns(columns ...string) *TwitterNotesFetchHistoryUpsertOne {
	tnfhc.conflict = append(tnfhc.conflict, sql.ConflictColumns(columns...))
	return &TwitterNotesFetchHistoryUpsertOne{
		create: tnfhc,
	}
}

type (
	// TwitterNotesFetchHistoryUpsertOne is the builder for "upsert"-ing
	//  one TwitterNotesFetchHistory node.
	TwitterNotesFetchHistoryUpsertOne struct {
		create *TwitterNotesFetchHistoryCreate
	}

	// TwitterNotesFetchHistoryUpsert is the "OnConflict" setter.
	TwitterNotesFetchHistoryUpsert struct {
		*sql.UpdateSet
	}
)

// SetUserID sets the "user_id" field.
func (u *TwitterNotesFetchHistoryUpsert) SetUserID(v string) *TwitterNotesFetchHistoryUpsert {
	u.Set(twitternotesfetchhistory.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *TwitterNotesFetchHistoryUpsert) UpdateUserID() *TwitterNotesFetchHistoryUpsert {
	u.SetExcluded(twitternotesfetchhistory.FieldUserID)
	return u
}

// SetUsername sets the "username" field.
func (u *TwitterNotesFetchHistoryUpsert) SetUsername(v string) *TwitterNotesFetchHistoryUpsert {
	u.Set(twitternotesfetchhistory.FieldUsername, v)
	return u
}

// UpdateUsername sets the "username" field to the value that was provided on create.
func (u *TwitterNotesFetchHistoryUpsert) UpdateUsername() *TwitterNotesFetchHistoryUpsert {
	u.SetExcluded(twitternotesfetchhistory.FieldUsername)
	return u
}

// ClearUsername clears the value of the "username" field.
func (u *TwitterNotesFetchHistoryUpsert) ClearUsername() *TwitterNotesFetchHistoryUpsert {
	u.SetNull(twitternotesfetchhistory.FieldUsername)
	return u
}

// SetName sets the "name" field.
func (u *TwitterNotesFetchHistoryUpsert) SetName(v string) *TwitterNotesFetchHistoryUpsert {
	u.Set(twitternotesfetchhistory.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TwitterNotesFetchHistoryUpsert) UpdateName() *TwitterNotesFetchHistoryUpsert {
	u.SetExcluded(twitternotesfetchhistory.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *TwitterNotesFetchHistoryUpsert) ClearName() *TwitterNotesFetchHistoryUpsert {
	u.SetNull(twitternotesfetchhistory.FieldName)
	return u
}

// SetFetchedAt sets the "fetched_at" field.
func (u *TwitterNotesFetchHistoryUpsert) SetFetchedAt(v time.Time) *TwitterNotesFetchHistoryUpsert {
	u.Set(twitternotesfetchhistory.FieldFetchedAt, v)
	return u
}

// UpdateFetchedAt sets the "fetched_at" field to the value that was provided on create.
func (u *TwitterNotesFetchHistoryUpsert) UpdateFetchedAt() *TwitterNotesFetchHistoryUpsert {
	u.SetExcluded(twitternotesfetchhistory.FieldFetchedAt)
	return u
}

// SetFetchCount sets the "fetch_count" field.
func (u *TwitterNotesFetchHistoryUpsert) SetFetchCount(v int) *TwitterNotesFetchHistoryUpsert {
	u.Set(twitternotesfetchhistory.FieldFetchCount, v)
	return u
}

// UpdateFetchCount sets the "fetch_count" field to the value that was provided on create.
func (u *TwitterNotesFetchHistoryUpsert) UpdateFetchCount() *TwitterNotesFetchHistoryUpsert {
	u.SetExcluded(twitternotesfetchhistory.FieldFetchCount)
	return u
}

// AddFetchCount adds v to the "fetch_count" field.
func (u *TwitterNotesFetchHistoryUpsert) AddFetchCount(v int) *TwitterNotesFetchHistoryUpsert {
	u.Add(twitternotesfetchhistory.FieldFetchCount, v)
	return u
}

// SetNewCount sets the "new_count" field.
func (u *TwitterNotesFetchHistoryUpsert) SetNewCount(v int) *TwitterNotesFetchHistoryUpsert {
	u.Set(twitternotesfetchhistory.FieldNewCount, v)
	return u
}

// UpdateNewCount sets the "new_count" field to the value that was provided on create.
func (u *TwitterNotesFetchHistoryUpsert) UpdateNewCount() *TwitterNotesFetchHistoryUpsert {
	u.SetExcluded(twitternotesfetchhistory.FieldNewCount)
	return u
}

// AddNewCount adds v to the "new_count" field.
func (u *TwitterNotesFetchHistoryUpsert) AddNewCount(v int) *TwitterNotesFetchHistoryUpsert {
	u.Add(twitternotesfetchhistory.FieldNewCount, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.TwitterNotesFetchHistory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(twitternotesfetchhistory.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TwitterNotesFetchHistoryUpsertOne) UpdateNewValues() *TwitterNotesFetchHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(twitternotesfetchhistory.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TwitterNotesFetchHistory.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TwitterNotesFetchHistoryUpsertOne) Ignore() *TwitterNotesFetchHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TwitterNotesFetchHistoryUpsertOne) DoNothing() *TwitterNotesFetchHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TwitterNotesFetchHistoryCreate.OnConflict
// documentation for more info.
func (u *TwitterNotesFetchHistoryUpsertOne) Update(set func(*TwitterNotesFetchHistoryUpsert)) *TwitterNotesFetchHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TwitterNotesFetchHistoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetUserID sets the "user_id" field.
func (u *TwitterNotesFetchHistoryUpsertOne) SetUserID(v string) *TwitterNotesFetchHistoryUpsertOne {
	return u.Update(func(s *TwitterNotesFetchHistoryUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *TwitterNotesFetchHistoryUpsertOne) UpdateUserID() *TwitterNotesFetchHistoryUpsertOne {
	return u.Update(func(s *TwitterNotesFetchHistoryUpsert) {
		s.UpdateUserID()
	})
}

// SetUsername sets the "username" field.
func (u *TwitterNotesFetchHistoryUpsertOne) SetUsername(v string) *TwitterNotesFetchHistoryUpsertOne {
	return u.Update(func(s *TwitterNotesFetchHistoryUpsert) {
		s.SetUsername(v)
	})
}

// UpdateUsername sets the "username" field to the value that was provided on create.
func (u *TwitterNotesFetchHistoryUpsertOne) UpdateUsername() *TwitterNotesFetchHistoryUpsertOne {
	return u.Update(func(s *TwitterNotesFetchHistoryUpsert) {
		s.UpdateUsername()
	})
}

// ClearUsername clears the value of the "username" field.
func (u *TwitterNotesFetchHistoryUpsertOne) ClearUsername() *TwitterNotesFetchHistoryUpsertOne {
	return u.Update(func(s *TwitterNotesFetchHistoryUpsert) {
		s.ClearUsername()
	})
}

// SetName sets the "name" field.
func (u *TwitterNotesFetchHistoryUpsertOne) SetName(v string) *TwitterNotesFetchHistoryUpsertOne {
	return u.Update(func(s *TwitterNotesFetchHistoryUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TwitterNotesFetchHistoryUpsertOne) UpdateName() *TwitterNotesFetchHistoryUpsertOne {
	return u.Update(func(s *TwitterNotesFetchHistoryUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *TwitterNotesFetchHistoryUpsertOne) ClearName() *TwitterNotesFetchHistoryUpsertOne {
	return u.Update(func(s *TwitterNotesFetchHistoryUpsert) {
		s.ClearName()
	})
}

// SetFetchedAt sets the "fetched_at" field.
func (u *TwitterNotesFetchHistoryUpsertOne) SetFetchedAt(v time.Time) *TwitterNotesFetchHistoryUpsertOne {
	return u.Update(func(s *TwitterNotesFetchHistoryUpsert) {
		s.SetFetchedAt(v)
	})
}

// UpdateFetchedAt sets the "fetched_at" field to the value that was provided on create.
func (u *TwitterNotesFetchHistoryUpsertOne) UpdateFetchedAt() *TwitterNotesFetchHistoryUpsertOne {
	return u.Update(func(s *TwitterNotesFetchHistoryUpsert) {
		s.UpdateFetchedAt()
	})
}

// SetFetchCount sets the "fetch_count" field.
func (u *TwitterNotesFetchHistoryUpsertOne) SetFetchCount(v int) *TwitterNotesFetchHistoryUpsertOne {
	return u.Update(func(s *TwitterNotesFetchHistoryUpsert) {
		s.SetFetchCount(v)
	})
}

// AddFetchCount adds v to the "fetch_count" field.
func (u *TwitterNotesFetchHistoryUpsertOne) AddFetchCount(v int) *TwitterNotesFetchHistoryUpsertOne {
	return u.Update(func(s *TwitterNotesFetchHistoryUpsert) {
		s.AddFetchCount(v)
	})
}

// UpdateFetchCount sets the "fetch_count" field to the value that was provided on create.
func (u *TwitterNotesFetchHistoryUpsertOne) UpdateFetchCount() *TwitterNotesFetchHistoryUpsertOne {
	return u.Update(func(s *TwitterNotesFetchHistoryUpsert) {
		s.UpdateFetchCount()
	})
}

// SetNewCount sets the "new_count" field.
func (u *TwitterNotesFetchHistoryUpsertOne) SetNewCount(v int) *TwitterNotesFetchHistoryUpsertOne {
	return u.Update(func(s *TwitterNotesFetchHistoryUpsert) {
		s.SetNewCount(v)
	})
}

// AddNewCount adds v to the "new_count" field.
func (u *TwitterNotesFetchHistoryUpsertOne) AddNewCount(v int) *TwitterNotesFetchHistoryUpsertOne {
	return u.Update(func(s *TwitterNotesFetchHistoryUpsert) {
		s.AddNewCount(v)
	})
}

// UpdateNewCount sets the "new_count" field to the value that was provided on create.
func (u *TwitterNotesFetchHistoryUpsertOne) UpdateNewCount() *TwitterNotesFetchHistoryUpsertOne {
	return u.Update(func(s *TwitterNotesFetchHistoryUpsert) {
		s.UpdateNewCount()
	})
}

// Exec executes the query.
func (u *TwitterNotesFetchHistoryUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("core: missing options for TwitterNotesFetchHistoryCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TwitterNotesFetchHistoryUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TwitterNotesFetchHistoryUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TwitterNotesFetchHistoryUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TwitterNotesFetchHistoryCreateBulk is the builder for creating many TwitterNotesFetchHistory entities in bulk.
type TwitterNotesFetchHistoryCreateBulk struct {
	config
	err      error
	builders []*TwitterNotesFetchHistoryCreate
	conflict []sql.ConflictOption
}

// Save creates the TwitterNotesFetchHistory entities in the database.
func (tnfhcb *TwitterNotesFetchHistoryCreateBulk) Save(ctx context.Context) ([]*TwitterNotesFetchHistory, error) {
	if tnfhcb.err != nil {
		return nil, tnfhcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tnfhcb.builders))
	nodes := make([]*TwitterNotesFetchHistory, len(tnfhcb.builders))
	mutators := make([]Mutator, len(tnfhcb.builders))
	for i := range tnfhcb.builders {
		func(i int, root context.Context) {
			builder := tnfhcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TwitterNotesFetchHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tnfhcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tnfhcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tnfhcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tnfhcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tnfhcb *TwitterNotesFetchHistoryCreateBulk) SaveX(ctx context.Context) []*TwitterNotesFetchHistory {
	v, err := tnfhcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tnfhcb *TwitterNotesFetchHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := tnfhcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tnfhcb *TwitterNotesFetchHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := tnfhcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TwitterNotesFetchHistory.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TwitterNotesFetchHistoryUpsert) {
//			SetUserID(v+v).
//		}).
//		Exec(ctx)
func (tnfhcb *TwitterNotesFetchHistoryCreateBulk) OnConflict(opts ...sql.ConflictOption) *TwitterNotesFetchHistoryUpsertBulk {
	tnfhcb.conflict = opts
	return &TwitterNotesFetchHistoryUpsertBulk{
		create: tnfhcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TwitterNotesFetchHistory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tnfhcb *TwitterNotesFetchHistoryCreateBulk) OnConflictColumns(columns ...string) *TwitterNotesFetchHistoryUpsertBulk {
	tnfhcb.conflict = append(tnfhcb.conflict, sql.ConflictColumns(columns...))
	return &TwitterNotesFetchHistoryUpsertBulk{
		create: tnfhcb,
	}
}

// TwitterNotesFetchHistoryUpsertBulk is the builder for "upsert"-ing
// a bulk of TwitterNotesFetchHistory nodes.
type TwitterNotesFetchHistoryUpsertBulk struct {
	create *TwitterNotesFetchHistoryCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TwitterNotesFetchHistory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(twitternotesfetchhistory.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TwitterNotesFetchHistoryUpsertBulk) UpdateNewValues() *TwitterNotesFetchHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(twitternotesfetchhistory.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TwitterNotesFetchHistory.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TwitterNotesFetchHistoryUpsertBulk) Ignore() *TwitterNotesFetchHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TwitterNotesFetchHistoryUpsertBulk) DoNothing() *TwitterNotesFetchHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TwitterNotesFetchHistoryCreateBulk.OnConflict
// documentation for more info.
func (u *TwitterNotesFetchHistoryUpsertBulk) Update(set func(*TwitterNotesFetchHistoryUpsert)) *TwitterNotesFetchHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TwitterNotesFetchHistoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetUserID sets the "user_id" field.
func (u *TwitterNotesFetchHistoryUpsertBulk) SetUserID(v string) *TwitterNotesFetchHistoryUpsertBulk {
	return u.Update(func(s *TwitterNotesFetchHistoryUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *TwitterNotesFetchHistoryUpsertBulk) UpdateUserID() *TwitterNotesFetchHistoryUpsertBulk {
	return u.Update(func(s *TwitterNotesFetchHistoryUpsert) {
		s.UpdateUserID()
	})
}

// SetUsername sets the "username" field.
func (u *TwitterNotesFetchHistoryUpsertBulk) SetUsername(v string) *TwitterNotesFetchHistoryUpsertBulk {
	return u.Update(func(s *TwitterNotesFetchHistoryUpsert) {
		s.SetUsername(v)
	})
}

// UpdateUsername sets the "username" field to the value that was provided on create.
func (u *TwitterNotesFetchHistoryUpsertBulk) UpdateUsername() *TwitterNotesFetchHistoryUpsertBulk {
	return u.Update(func(s *TwitterNotesFetchHistoryUpsert) {
		s.UpdateUsername()
	})
}

// ClearUsername clears the value of the "username" field.
func (u *TwitterNotesFetchHistoryUpsertBulk) ClearUsername() *TwitterNotesFetchHistoryUpsertBulk {
	return u.Update(func(s *TwitterNotesFetchHistoryUpsert) {
		s.ClearUsername()
	})
}

// SetName sets the "name" field.
func (u *TwitterNotesFetchHistoryUpsertBulk) SetName(v string) *TwitterNotesFetchHistoryUpsertBulk {
	return u.Update(func(s *TwitterNotesFetchHistoryUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TwitterNotesFetchHistoryUpsertBulk) UpdateName() *TwitterNotesFetchHistoryUpsertBulk {
	return u.Update(func(s *TwitterNotesFetchHistoryUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *TwitterNotesFetchHistoryUpsertBulk) ClearName() *TwitterNotesFetchHistoryUpsertBulk {
	return u.Update(func(s *TwitterNotesFetchHistoryUpsert) {
		s.ClearName()
	})
}

// SetFetchedAt sets the "fetched_at" field.
func (u *TwitterNotesFetchHistoryUpsertBulk) SetFetchedAt(v time.Time) *TwitterNotesFetchHistoryUpsertBulk {
	return u.Update(func(s *TwitterNotesFetchHistoryUpsert) {
		s.SetFetchedAt(v)
	})
}

// UpdateFetchedAt sets the "fetched_at" field to the value that was provided on create.
func (u *TwitterNotesFetchHistoryUpsertBulk) UpdateFetchedAt() *TwitterNotesFetchHistoryUpsertBulk {
	return u.Update(func(s *TwitterNotesFetchHistoryUpsert) {
		s.UpdateFetchedAt()
	})
}

// SetFetchCount sets the "fetch_count" field.
func (u *TwitterNotesFetchHistoryUpsertBulk) SetFetchCount(v int) *TwitterNotesFetchHistoryUpsertBulk {
	return u.Update(func(s *TwitterNotesFetchHistoryUpsert) {
		s.SetFetchCount(v)
	})
}

// AddFetchCount adds v to the "fetch_count" field.
func (u *TwitterNotesFetchHistoryUpsertBulk) AddFetchCount(v int) *TwitterNotesFetchHistoryUpsertBulk {
	return u.Update(func(s *TwitterNotesFetchHistoryUpsert) {
		s.AddFetchCount(v)
	})
}

// UpdateFetchCount sets the "fetch_count" field to the value that was provided on create.
func (u *TwitterNotesFetchHistoryUpsertBulk) UpdateFetchCount() *TwitterNotesFetchHistoryUpsertBulk {
	return u.Update(func(s *TwitterNotesFetchHistoryUpsert) {
		s.UpdateFetchCount()
	})
}

// SetNewCount sets the "new_count" field.
func (u *TwitterNotesFetchHistoryUpsertBulk) SetNewCount(v int) *TwitterNotesFetchHistoryUpsertBulk {
	return u.Update(func(s *TwitterNotesFetchHistoryUpsert) {
		s.SetNewCount(v)
	})
}

// AddNewCount adds v to the "new_count" field.
func (u *TwitterNotesFetchHistoryUpsertBulk) AddNewCount(v int) *TwitterNotesFetchHistoryUpsertBulk {
	return u.Update(func(s *TwitterNotesFetchHistoryUpsert) {
		s.AddNewCount(v)
	})
}

// UpdateNewCount sets the "new_count" field to the value that was provided on create.
func (u *TwitterNotesFetchHistoryUpsertBulk) UpdateNewCount() *TwitterNotesFetchHistoryUpsertBulk {
	return u.Update(func(s *TwitterNotesFetchHistoryUpsert) {
		s.UpdateNewCount()
	})
}

// Exec executes the query.
func (u *TwitterNotesFetchHistoryUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("core: OnConflict was set for builder %d. Set it on the TwitterNotesFetchHistoryCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("core: missing options for TwitterNotesFetchHistoryCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TwitterNotesFetchHistoryUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
