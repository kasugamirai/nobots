// Code generated by ent, DO NOT EDIT.

package core

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"freefrom.space/nobot/core/botevents"
	"freefrom.space/nobot/core/internal"
	"freefrom.space/nobot/core/predicate"
)

// BotEventsUpdate is the builder for updating BotEvents entities.
type BotEventsUpdate struct {
	config
	hooks     []Hook
	mutation  *BotEventsMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the BotEventsUpdate builder.
func (beu *BotEventsUpdate) Where(ps ...predicate.BotEvents) *BotEventsUpdate {
	beu.mutation.Where(ps...)
	return beu
}

// SetEventID sets the "event_id" field.
func (beu *BotEventsUpdate) SetEventID(s string) *BotEventsUpdate {
	beu.mutation.SetEventID(s)
	return beu
}

// SetNillableEventID sets the "event_id" field if the given value is not nil.
func (beu *BotEventsUpdate) SetNillableEventID(s *string) *BotEventsUpdate {
	if s != nil {
		beu.SetEventID(*s)
	}
	return beu
}

// SetInsertedAt sets the "inserted_at" field.
func (beu *BotEventsUpdate) SetInsertedAt(t time.Time) *BotEventsUpdate {
	beu.mutation.SetInsertedAt(t)
	return beu
}

// SetNillableInsertedAt sets the "inserted_at" field if the given value is not nil.
func (beu *BotEventsUpdate) SetNillableInsertedAt(t *time.Time) *BotEventsUpdate {
	if t != nil {
		beu.SetInsertedAt(*t)
	}
	return beu
}

// ClearInsertedAt clears the value of the "inserted_at" field.
func (beu *BotEventsUpdate) ClearInsertedAt() *BotEventsUpdate {
	beu.mutation.ClearInsertedAt()
	return beu
}

// Mutation returns the BotEventsMutation object of the builder.
func (beu *BotEventsUpdate) Mutation() *BotEventsMutation {
	return beu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (beu *BotEventsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, beu.sqlSave, beu.mutation, beu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (beu *BotEventsUpdate) SaveX(ctx context.Context) int {
	affected, err := beu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (beu *BotEventsUpdate) Exec(ctx context.Context) error {
	_, err := beu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (beu *BotEventsUpdate) ExecX(ctx context.Context) {
	if err := beu.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (beu *BotEventsUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *BotEventsUpdate {
	beu.modifiers = append(beu.modifiers, modifiers...)
	return beu
}

func (beu *BotEventsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(botevents.Table, botevents.Columns, sqlgraph.NewFieldSpec(botevents.FieldID, field.TypeInt))
	if ps := beu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := beu.mutation.EventID(); ok {
		_spec.SetField(botevents.FieldEventID, field.TypeString, value)
	}
	if value, ok := beu.mutation.InsertedAt(); ok {
		_spec.SetField(botevents.FieldInsertedAt, field.TypeTime, value)
	}
	if beu.mutation.InsertedAtCleared() {
		_spec.ClearField(botevents.FieldInsertedAt, field.TypeTime)
	}
	_spec.Node.Schema = beu.schemaConfig.BotEvents
	ctx = internal.NewSchemaConfigContext(ctx, beu.schemaConfig)
	_spec.AddModifiers(beu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, beu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{botevents.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	beu.mutation.done = true
	return n, nil
}

// BotEventsUpdateOne is the builder for updating a single BotEvents entity.
type BotEventsUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *BotEventsMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetEventID sets the "event_id" field.
func (beuo *BotEventsUpdateOne) SetEventID(s string) *BotEventsUpdateOne {
	beuo.mutation.SetEventID(s)
	return beuo
}

// SetNillableEventID sets the "event_id" field if the given value is not nil.
func (beuo *BotEventsUpdateOne) SetNillableEventID(s *string) *BotEventsUpdateOne {
	if s != nil {
		beuo.SetEventID(*s)
	}
	return beuo
}

// SetInsertedAt sets the "inserted_at" field.
func (beuo *BotEventsUpdateOne) SetInsertedAt(t time.Time) *BotEventsUpdateOne {
	beuo.mutation.SetInsertedAt(t)
	return beuo
}

// SetNillableInsertedAt sets the "inserted_at" field if the given value is not nil.
func (beuo *BotEventsUpdateOne) SetNillableInsertedAt(t *time.Time) *BotEventsUpdateOne {
	if t != nil {
		beuo.SetInsertedAt(*t)
	}
	return beuo
}

// ClearInsertedAt clears the value of the "inserted_at" field.
func (beuo *BotEventsUpdateOne) ClearInsertedAt() *BotEventsUpdateOne {
	beuo.mutation.ClearInsertedAt()
	return beuo
}

// Mutation returns the BotEventsMutation object of the builder.
func (beuo *BotEventsUpdateOne) Mutation() *BotEventsMutation {
	return beuo.mutation
}

// Where appends a list predicates to the BotEventsUpdate builder.
func (beuo *BotEventsUpdateOne) Where(ps ...predicate.BotEvents) *BotEventsUpdateOne {
	beuo.mutation.Where(ps...)
	return beuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (beuo *BotEventsUpdateOne) Select(field string, fields ...string) *BotEventsUpdateOne {
	beuo.fields = append([]string{field}, fields...)
	return beuo
}

// Save executes the query and returns the updated BotEvents entity.
func (beuo *BotEventsUpdateOne) Save(ctx context.Context) (*BotEvents, error) {
	return withHooks(ctx, beuo.sqlSave, beuo.mutation, beuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (beuo *BotEventsUpdateOne) SaveX(ctx context.Context) *BotEvents {
	node, err := beuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (beuo *BotEventsUpdateOne) Exec(ctx context.Context) error {
	_, err := beuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (beuo *BotEventsUpdateOne) ExecX(ctx context.Context) {
	if err := beuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (beuo *BotEventsUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *BotEventsUpdateOne {
	beuo.modifiers = append(beuo.modifiers, modifiers...)
	return beuo
}

func (beuo *BotEventsUpdateOne) sqlSave(ctx context.Context) (_node *BotEvents, err error) {
	_spec := sqlgraph.NewUpdateSpec(botevents.Table, botevents.Columns, sqlgraph.NewFieldSpec(botevents.FieldID, field.TypeInt))
	id, ok := beuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`core: missing "BotEvents.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := beuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, botevents.FieldID)
		for _, f := range fields {
			if !botevents.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("core: invalid field %q for query", f)}
			}
			if f != botevents.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := beuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := beuo.mutation.EventID(); ok {
		_spec.SetField(botevents.FieldEventID, field.TypeString, value)
	}
	if value, ok := beuo.mutation.InsertedAt(); ok {
		_spec.SetField(botevents.FieldInsertedAt, field.TypeTime, value)
	}
	if beuo.mutation.InsertedAtCleared() {
		_spec.ClearField(botevents.FieldInsertedAt, field.TypeTime)
	}
	_spec.Node.Schema = beuo.schemaConfig.BotEvents
	ctx = internal.NewSchemaConfigContext(ctx, beuo.schemaConfig)
	_spec.AddModifiers(beuo.modifiers...)
	_node = &BotEvents{config: beuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, beuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{botevents.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	beuo.mutation.done = true
	return _node, nil
}
