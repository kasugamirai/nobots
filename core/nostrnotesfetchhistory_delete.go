// Code generated by ent, DO NOT EDIT.

package core

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"freefrom.space/nobot/core/internal"
	"freefrom.space/nobot/core/nostrnotesfetchhistory"
	"freefrom.space/nobot/core/predicate"
)

// NostrNotesFetchHistoryDelete is the builder for deleting a NostrNotesFetchHistory entity.
type NostrNotesFetchHistoryDelete struct {
	config
	hooks    []Hook
	mutation *NostrNotesFetchHistoryMutation
}

// Where appends a list predicates to the NostrNotesFetchHistoryDelete builder.
func (nnfhd *NostrNotesFetchHistoryDelete) Where(ps ...predicate.NostrNotesFetchHistory) *NostrNotesFetchHistoryDelete {
	nnfhd.mutation.Where(ps...)
	return nnfhd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (nnfhd *NostrNotesFetchHistoryDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, nnfhd.sqlExec, nnfhd.mutation, nnfhd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (nnfhd *NostrNotesFetchHistoryDelete) ExecX(ctx context.Context) int {
	n, err := nnfhd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (nnfhd *NostrNotesFetchHistoryDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(nostrnotesfetchhistory.Table, sqlgraph.NewFieldSpec(nostrnotesfetchhistory.FieldID, field.TypeString))
	_spec.Node.Schema = nnfhd.schemaConfig.NostrNotesFetchHistory
	ctx = internal.NewSchemaConfigContext(ctx, nnfhd.schemaConfig)
	if ps := nnfhd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, nnfhd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	nnfhd.mutation.done = true
	return affected, err
}

// NostrNotesFetchHistoryDeleteOne is the builder for deleting a single NostrNotesFetchHistory entity.
type NostrNotesFetchHistoryDeleteOne struct {
	nnfhd *NostrNotesFetchHistoryDelete
}

// Where appends a list predicates to the NostrNotesFetchHistoryDelete builder.
func (nnfhdo *NostrNotesFetchHistoryDeleteOne) Where(ps ...predicate.NostrNotesFetchHistory) *NostrNotesFetchHistoryDeleteOne {
	nnfhdo.nnfhd.mutation.Where(ps...)
	return nnfhdo
}

// Exec executes the deletion query.
func (nnfhdo *NostrNotesFetchHistoryDeleteOne) Exec(ctx context.Context) error {
	n, err := nnfhdo.nnfhd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{nostrnotesfetchhistory.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (nnfhdo *NostrNotesFetchHistoryDeleteOne) ExecX(ctx context.Context) {
	if err := nnfhdo.Exec(ctx); err != nil {
		panic(err)
	}
}
