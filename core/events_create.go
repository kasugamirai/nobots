// Code generated by ent, DO NOT EDIT.

package core

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"freefrom.space/nobot/core/events"
)

// EventsCreate is the builder for creating a Events entity.
type EventsCreate struct {
	config
	mutation *EventsMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetEventID sets the "event_id" field.
func (ec *EventsCreate) SetEventID(b []byte) *EventsCreate {
	ec.mutation.SetEventID(b)
	return ec
}

// SetPubkey sets the "pubkey" field.
func (ec *EventsCreate) SetPubkey(b []byte) *EventsCreate {
	ec.mutation.SetPubkey(b)
	return ec
}

// SetCreatedAt sets the "created_at" field.
func (ec *EventsCreate) SetCreatedAt(t time.Time) *EventsCreate {
	ec.mutation.SetCreatedAt(t)
	return ec
}

// SetDeletedAt sets the "deleted_at" field.
func (ec *EventsCreate) SetDeletedAt(t time.Time) *EventsCreate {
	ec.mutation.SetDeletedAt(t)
	return ec
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ec *EventsCreate) SetNillableDeletedAt(t *time.Time) *EventsCreate {
	if t != nil {
		ec.SetDeletedAt(*t)
	}
	return ec
}

// SetKind sets the "kind" field.
func (ec *EventsCreate) SetKind(i int64) *EventsCreate {
	ec.mutation.SetKind(i)
	return ec
}

// SetTags sets the "tags" field.
func (ec *EventsCreate) SetTags(s [][]string) *EventsCreate {
	ec.mutation.SetTags(s)
	return ec
}

// SetContent sets the "content" field.
func (ec *EventsCreate) SetContent(s string) *EventsCreate {
	ec.mutation.SetContent(s)
	return ec
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (ec *EventsCreate) SetNillableContent(s *string) *EventsCreate {
	if s != nil {
		ec.SetContent(*s)
	}
	return ec
}

// SetSig sets the "sig" field.
func (ec *EventsCreate) SetSig(b []byte) *EventsCreate {
	ec.mutation.SetSig(b)
	return ec
}

// SetID sets the "id" field.
func (ec *EventsCreate) SetID(i int64) *EventsCreate {
	ec.mutation.SetID(i)
	return ec
}

// Mutation returns the EventsMutation object of the builder.
func (ec *EventsCreate) Mutation() *EventsMutation {
	return ec.mutation
}

// Save creates the Events in the database.
func (ec *EventsCreate) Save(ctx context.Context) (*Events, error) {
	ec.defaults()
	return withHooks(ctx, ec.sqlSave, ec.mutation, ec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ec *EventsCreate) SaveX(ctx context.Context) *Events {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ec *EventsCreate) Exec(ctx context.Context) error {
	_, err := ec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ec *EventsCreate) ExecX(ctx context.Context) {
	if err := ec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ec *EventsCreate) defaults() {
	if _, ok := ec.mutation.Tags(); !ok {
		v := events.DefaultTags
		ec.mutation.SetTags(v)
	}
	if _, ok := ec.mutation.Content(); !ok {
		v := events.DefaultContent
		ec.mutation.SetContent(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ec *EventsCreate) check() error {
	if _, ok := ec.mutation.EventID(); !ok {
		return &ValidationError{Name: "event_id", err: errors.New(`core: missing required field "Events.event_id"`)}
	}
	if _, ok := ec.mutation.Pubkey(); !ok {
		return &ValidationError{Name: "pubkey", err: errors.New(`core: missing required field "Events.pubkey"`)}
	}
	if _, ok := ec.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`core: missing required field "Events.created_at"`)}
	}
	if _, ok := ec.mutation.Kind(); !ok {
		return &ValidationError{Name: "kind", err: errors.New(`core: missing required field "Events.kind"`)}
	}
	if _, ok := ec.mutation.Tags(); !ok {
		return &ValidationError{Name: "tags", err: errors.New(`core: missing required field "Events.tags"`)}
	}
	if _, ok := ec.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`core: missing required field "Events.content"`)}
	}
	if _, ok := ec.mutation.Sig(); !ok {
		return &ValidationError{Name: "sig", err: errors.New(`core: missing required field "Events.sig"`)}
	}
	return nil
}

func (ec *EventsCreate) sqlSave(ctx context.Context) (*Events, error) {
	if err := ec.check(); err != nil {
		return nil, err
	}
	_node, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	ec.mutation.id = &_node.ID
	ec.mutation.done = true
	return _node, nil
}

func (ec *EventsCreate) createSpec() (*Events, *sqlgraph.CreateSpec) {
	var (
		_node = &Events{config: ec.config}
		_spec = sqlgraph.NewCreateSpec(events.Table, sqlgraph.NewFieldSpec(events.FieldID, field.TypeInt64))
	)
	_spec.Schema = ec.schemaConfig.Events
	_spec.OnConflict = ec.conflict
	if id, ok := ec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ec.mutation.EventID(); ok {
		_spec.SetField(events.FieldEventID, field.TypeBytes, value)
		_node.EventID = value
	}
	if value, ok := ec.mutation.Pubkey(); ok {
		_spec.SetField(events.FieldPubkey, field.TypeBytes, value)
		_node.Pubkey = value
	}
	if value, ok := ec.mutation.CreatedAt(); ok {
		_spec.SetField(events.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ec.mutation.DeletedAt(); ok {
		_spec.SetField(events.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := ec.mutation.Kind(); ok {
		_spec.SetField(events.FieldKind, field.TypeInt64, value)
		_node.Kind = value
	}
	if value, ok := ec.mutation.Tags(); ok {
		_spec.SetField(events.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := ec.mutation.Content(); ok {
		_spec.SetField(events.FieldContent, field.TypeString, value)
		_node.Content = value
	}
	if value, ok := ec.mutation.Sig(); ok {
		_spec.SetField(events.FieldSig, field.TypeBytes, value)
		_node.Sig = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Events.Create().
//		SetEventID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.EventsUpsert) {
//			SetEventID(v+v).
//		}).
//		Exec(ctx)
func (ec *EventsCreate) OnConflict(opts ...sql.ConflictOption) *EventsUpsertOne {
	ec.conflict = opts
	return &EventsUpsertOne{
		create: ec,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Events.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ec *EventsCreate) OnConflictColumns(columns ...string) *EventsUpsertOne {
	ec.conflict = append(ec.conflict, sql.ConflictColumns(columns...))
	return &EventsUpsertOne{
		create: ec,
	}
}

type (
	// EventsUpsertOne is the builder for "upsert"-ing
	//  one Events node.
	EventsUpsertOne struct {
		create *EventsCreate
	}

	// EventsUpsert is the "OnConflict" setter.
	EventsUpsert struct {
		*sql.UpdateSet
	}
)

// SetEventID sets the "event_id" field.
func (u *EventsUpsert) SetEventID(v []byte) *EventsUpsert {
	u.Set(events.FieldEventID, v)
	return u
}

// UpdateEventID sets the "event_id" field to the value that was provided on create.
func (u *EventsUpsert) UpdateEventID() *EventsUpsert {
	u.SetExcluded(events.FieldEventID)
	return u
}

// SetPubkey sets the "pubkey" field.
func (u *EventsUpsert) SetPubkey(v []byte) *EventsUpsert {
	u.Set(events.FieldPubkey, v)
	return u
}

// UpdatePubkey sets the "pubkey" field to the value that was provided on create.
func (u *EventsUpsert) UpdatePubkey() *EventsUpsert {
	u.SetExcluded(events.FieldPubkey)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *EventsUpsert) SetCreatedAt(v time.Time) *EventsUpsert {
	u.Set(events.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *EventsUpsert) UpdateCreatedAt() *EventsUpsert {
	u.SetExcluded(events.FieldCreatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *EventsUpsert) SetDeletedAt(v time.Time) *EventsUpsert {
	u.Set(events.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *EventsUpsert) UpdateDeletedAt() *EventsUpsert {
	u.SetExcluded(events.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *EventsUpsert) ClearDeletedAt() *EventsUpsert {
	u.SetNull(events.FieldDeletedAt)
	return u
}

// SetKind sets the "kind" field.
func (u *EventsUpsert) SetKind(v int64) *EventsUpsert {
	u.Set(events.FieldKind, v)
	return u
}

// UpdateKind sets the "kind" field to the value that was provided on create.
func (u *EventsUpsert) UpdateKind() *EventsUpsert {
	u.SetExcluded(events.FieldKind)
	return u
}

// AddKind adds v to the "kind" field.
func (u *EventsUpsert) AddKind(v int64) *EventsUpsert {
	u.Add(events.FieldKind, v)
	return u
}

// SetTags sets the "tags" field.
func (u *EventsUpsert) SetTags(v [][]string) *EventsUpsert {
	u.Set(events.FieldTags, v)
	return u
}

// UpdateTags sets the "tags" field to the value that was provided on create.
func (u *EventsUpsert) UpdateTags() *EventsUpsert {
	u.SetExcluded(events.FieldTags)
	return u
}

// SetContent sets the "content" field.
func (u *EventsUpsert) SetContent(v string) *EventsUpsert {
	u.Set(events.FieldContent, v)
	return u
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *EventsUpsert) UpdateContent() *EventsUpsert {
	u.SetExcluded(events.FieldContent)
	return u
}

// SetSig sets the "sig" field.
func (u *EventsUpsert) SetSig(v []byte) *EventsUpsert {
	u.Set(events.FieldSig, v)
	return u
}

// UpdateSig sets the "sig" field to the value that was provided on create.
func (u *EventsUpsert) UpdateSig() *EventsUpsert {
	u.SetExcluded(events.FieldSig)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Events.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(events.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *EventsUpsertOne) UpdateNewValues() *EventsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(events.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Events.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *EventsUpsertOne) Ignore() *EventsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *EventsUpsertOne) DoNothing() *EventsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the EventsCreate.OnConflict
// documentation for more info.
func (u *EventsUpsertOne) Update(set func(*EventsUpsert)) *EventsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&EventsUpsert{UpdateSet: update})
	}))
	return u
}

// SetEventID sets the "event_id" field.
func (u *EventsUpsertOne) SetEventID(v []byte) *EventsUpsertOne {
	return u.Update(func(s *EventsUpsert) {
		s.SetEventID(v)
	})
}

// UpdateEventID sets the "event_id" field to the value that was provided on create.
func (u *EventsUpsertOne) UpdateEventID() *EventsUpsertOne {
	return u.Update(func(s *EventsUpsert) {
		s.UpdateEventID()
	})
}

// SetPubkey sets the "pubkey" field.
func (u *EventsUpsertOne) SetPubkey(v []byte) *EventsUpsertOne {
	return u.Update(func(s *EventsUpsert) {
		s.SetPubkey(v)
	})
}

// UpdatePubkey sets the "pubkey" field to the value that was provided on create.
func (u *EventsUpsertOne) UpdatePubkey() *EventsUpsertOne {
	return u.Update(func(s *EventsUpsert) {
		s.UpdatePubkey()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *EventsUpsertOne) SetCreatedAt(v time.Time) *EventsUpsertOne {
	return u.Update(func(s *EventsUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *EventsUpsertOne) UpdateCreatedAt() *EventsUpsertOne {
	return u.Update(func(s *EventsUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *EventsUpsertOne) SetDeletedAt(v time.Time) *EventsUpsertOne {
	return u.Update(func(s *EventsUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *EventsUpsertOne) UpdateDeletedAt() *EventsUpsertOne {
	return u.Update(func(s *EventsUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *EventsUpsertOne) ClearDeletedAt() *EventsUpsertOne {
	return u.Update(func(s *EventsUpsert) {
		s.ClearDeletedAt()
	})
}

// SetKind sets the "kind" field.
func (u *EventsUpsertOne) SetKind(v int64) *EventsUpsertOne {
	return u.Update(func(s *EventsUpsert) {
		s.SetKind(v)
	})
}

// AddKind adds v to the "kind" field.
func (u *EventsUpsertOne) AddKind(v int64) *EventsUpsertOne {
	return u.Update(func(s *EventsUpsert) {
		s.AddKind(v)
	})
}

// UpdateKind sets the "kind" field to the value that was provided on create.
func (u *EventsUpsertOne) UpdateKind() *EventsUpsertOne {
	return u.Update(func(s *EventsUpsert) {
		s.UpdateKind()
	})
}

// SetTags sets the "tags" field.
func (u *EventsUpsertOne) SetTags(v [][]string) *EventsUpsertOne {
	return u.Update(func(s *EventsUpsert) {
		s.SetTags(v)
	})
}

// UpdateTags sets the "tags" field to the value that was provided on create.
func (u *EventsUpsertOne) UpdateTags() *EventsUpsertOne {
	return u.Update(func(s *EventsUpsert) {
		s.UpdateTags()
	})
}

// SetContent sets the "content" field.
func (u *EventsUpsertOne) SetContent(v string) *EventsUpsertOne {
	return u.Update(func(s *EventsUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *EventsUpsertOne) UpdateContent() *EventsUpsertOne {
	return u.Update(func(s *EventsUpsert) {
		s.UpdateContent()
	})
}

// SetSig sets the "sig" field.
func (u *EventsUpsertOne) SetSig(v []byte) *EventsUpsertOne {
	return u.Update(func(s *EventsUpsert) {
		s.SetSig(v)
	})
}

// UpdateSig sets the "sig" field to the value that was provided on create.
func (u *EventsUpsertOne) UpdateSig() *EventsUpsertOne {
	return u.Update(func(s *EventsUpsert) {
		s.UpdateSig()
	})
}

// Exec executes the query.
func (u *EventsUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("core: missing options for EventsCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *EventsUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *EventsUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *EventsUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// EventsCreateBulk is the builder for creating many Events entities in bulk.
type EventsCreateBulk struct {
	config
	err      error
	builders []*EventsCreate
	conflict []sql.ConflictOption
}

// Save creates the Events entities in the database.
func (ecb *EventsCreateBulk) Save(ctx context.Context) ([]*Events, error) {
	if ecb.err != nil {
		return nil, ecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ecb.builders))
	nodes := make([]*Events, len(ecb.builders))
	mutators := make([]Mutator, len(ecb.builders))
	for i := range ecb.builders {
		func(i int, root context.Context) {
			builder := ecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EventsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ecb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ecb *EventsCreateBulk) SaveX(ctx context.Context) []*Events {
	v, err := ecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecb *EventsCreateBulk) Exec(ctx context.Context) error {
	_, err := ecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecb *EventsCreateBulk) ExecX(ctx context.Context) {
	if err := ecb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Events.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.EventsUpsert) {
//			SetEventID(v+v).
//		}).
//		Exec(ctx)
func (ecb *EventsCreateBulk) OnConflict(opts ...sql.ConflictOption) *EventsUpsertBulk {
	ecb.conflict = opts
	return &EventsUpsertBulk{
		create: ecb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Events.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ecb *EventsCreateBulk) OnConflictColumns(columns ...string) *EventsUpsertBulk {
	ecb.conflict = append(ecb.conflict, sql.ConflictColumns(columns...))
	return &EventsUpsertBulk{
		create: ecb,
	}
}

// EventsUpsertBulk is the builder for "upsert"-ing
// a bulk of Events nodes.
type EventsUpsertBulk struct {
	create *EventsCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Events.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(events.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *EventsUpsertBulk) UpdateNewValues() *EventsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(events.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Events.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *EventsUpsertBulk) Ignore() *EventsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *EventsUpsertBulk) DoNothing() *EventsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the EventsCreateBulk.OnConflict
// documentation for more info.
func (u *EventsUpsertBulk) Update(set func(*EventsUpsert)) *EventsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&EventsUpsert{UpdateSet: update})
	}))
	return u
}

// SetEventID sets the "event_id" field.
func (u *EventsUpsertBulk) SetEventID(v []byte) *EventsUpsertBulk {
	return u.Update(func(s *EventsUpsert) {
		s.SetEventID(v)
	})
}

// UpdateEventID sets the "event_id" field to the value that was provided on create.
func (u *EventsUpsertBulk) UpdateEventID() *EventsUpsertBulk {
	return u.Update(func(s *EventsUpsert) {
		s.UpdateEventID()
	})
}

// SetPubkey sets the "pubkey" field.
func (u *EventsUpsertBulk) SetPubkey(v []byte) *EventsUpsertBulk {
	return u.Update(func(s *EventsUpsert) {
		s.SetPubkey(v)
	})
}

// UpdatePubkey sets the "pubkey" field to the value that was provided on create.
func (u *EventsUpsertBulk) UpdatePubkey() *EventsUpsertBulk {
	return u.Update(func(s *EventsUpsert) {
		s.UpdatePubkey()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *EventsUpsertBulk) SetCreatedAt(v time.Time) *EventsUpsertBulk {
	return u.Update(func(s *EventsUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *EventsUpsertBulk) UpdateCreatedAt() *EventsUpsertBulk {
	return u.Update(func(s *EventsUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *EventsUpsertBulk) SetDeletedAt(v time.Time) *EventsUpsertBulk {
	return u.Update(func(s *EventsUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *EventsUpsertBulk) UpdateDeletedAt() *EventsUpsertBulk {
	return u.Update(func(s *EventsUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *EventsUpsertBulk) ClearDeletedAt() *EventsUpsertBulk {
	return u.Update(func(s *EventsUpsert) {
		s.ClearDeletedAt()
	})
}

// SetKind sets the "kind" field.
func (u *EventsUpsertBulk) SetKind(v int64) *EventsUpsertBulk {
	return u.Update(func(s *EventsUpsert) {
		s.SetKind(v)
	})
}

// AddKind adds v to the "kind" field.
func (u *EventsUpsertBulk) AddKind(v int64) *EventsUpsertBulk {
	return u.Update(func(s *EventsUpsert) {
		s.AddKind(v)
	})
}

// UpdateKind sets the "kind" field to the value that was provided on create.
func (u *EventsUpsertBulk) UpdateKind() *EventsUpsertBulk {
	return u.Update(func(s *EventsUpsert) {
		s.UpdateKind()
	})
}

// SetTags sets the "tags" field.
func (u *EventsUpsertBulk) SetTags(v [][]string) *EventsUpsertBulk {
	return u.Update(func(s *EventsUpsert) {
		s.SetTags(v)
	})
}

// UpdateTags sets the "tags" field to the value that was provided on create.
func (u *EventsUpsertBulk) UpdateTags() *EventsUpsertBulk {
	return u.Update(func(s *EventsUpsert) {
		s.UpdateTags()
	})
}

// SetContent sets the "content" field.
func (u *EventsUpsertBulk) SetContent(v string) *EventsUpsertBulk {
	return u.Update(func(s *EventsUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *EventsUpsertBulk) UpdateContent() *EventsUpsertBulk {
	return u.Update(func(s *EventsUpsert) {
		s.UpdateContent()
	})
}

// SetSig sets the "sig" field.
func (u *EventsUpsertBulk) SetSig(v []byte) *EventsUpsertBulk {
	return u.Update(func(s *EventsUpsert) {
		s.SetSig(v)
	})
}

// UpdateSig sets the "sig" field to the value that was provided on create.
func (u *EventsUpsertBulk) UpdateSig() *EventsUpsertBulk {
	return u.Update(func(s *EventsUpsert) {
		s.UpdateSig()
	})
}

// Exec executes the query.
func (u *EventsUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("core: OnConflict was set for builder %d. Set it on the EventsCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("core: missing options for EventsCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *EventsUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
