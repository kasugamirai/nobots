// Code generated by ent, DO NOT EDIT.

package core

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"freefrom.space/nobot/core/botevents"
)

// BotEventsCreate is the builder for creating a BotEvents entity.
type BotEventsCreate struct {
	config
	mutation *BotEventsMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetEventID sets the "event_id" field.
func (bec *BotEventsCreate) SetEventID(s string) *BotEventsCreate {
	bec.mutation.SetEventID(s)
	return bec
}

// SetInsertedAt sets the "inserted_at" field.
func (bec *BotEventsCreate) SetInsertedAt(t time.Time) *BotEventsCreate {
	bec.mutation.SetInsertedAt(t)
	return bec
}

// SetNillableInsertedAt sets the "inserted_at" field if the given value is not nil.
func (bec *BotEventsCreate) SetNillableInsertedAt(t *time.Time) *BotEventsCreate {
	if t != nil {
		bec.SetInsertedAt(*t)
	}
	return bec
}

// Mutation returns the BotEventsMutation object of the builder.
func (bec *BotEventsCreate) Mutation() *BotEventsMutation {
	return bec.mutation
}

// Save creates the BotEvents in the database.
func (bec *BotEventsCreate) Save(ctx context.Context) (*BotEvents, error) {
	return withHooks(ctx, bec.sqlSave, bec.mutation, bec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bec *BotEventsCreate) SaveX(ctx context.Context) *BotEvents {
	v, err := bec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bec *BotEventsCreate) Exec(ctx context.Context) error {
	_, err := bec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bec *BotEventsCreate) ExecX(ctx context.Context) {
	if err := bec.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bec *BotEventsCreate) check() error {
	if _, ok := bec.mutation.EventID(); !ok {
		return &ValidationError{Name: "event_id", err: errors.New(`core: missing required field "BotEvents.event_id"`)}
	}
	return nil
}

func (bec *BotEventsCreate) sqlSave(ctx context.Context) (*BotEvents, error) {
	if err := bec.check(); err != nil {
		return nil, err
	}
	_node, _spec := bec.createSpec()
	if err := sqlgraph.CreateNode(ctx, bec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	bec.mutation.id = &_node.ID
	bec.mutation.done = true
	return _node, nil
}

func (bec *BotEventsCreate) createSpec() (*BotEvents, *sqlgraph.CreateSpec) {
	var (
		_node = &BotEvents{config: bec.config}
		_spec = sqlgraph.NewCreateSpec(botevents.Table, sqlgraph.NewFieldSpec(botevents.FieldID, field.TypeInt))
	)
	_spec.Schema = bec.schemaConfig.BotEvents
	_spec.OnConflict = bec.conflict
	if value, ok := bec.mutation.EventID(); ok {
		_spec.SetField(botevents.FieldEventID, field.TypeString, value)
		_node.EventID = value
	}
	if value, ok := bec.mutation.InsertedAt(); ok {
		_spec.SetField(botevents.FieldInsertedAt, field.TypeTime, value)
		_node.InsertedAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BotEvents.Create().
//		SetEventID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BotEventsUpsert) {
//			SetEventID(v+v).
//		}).
//		Exec(ctx)
func (bec *BotEventsCreate) OnConflict(opts ...sql.ConflictOption) *BotEventsUpsertOne {
	bec.conflict = opts
	return &BotEventsUpsertOne{
		create: bec,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BotEvents.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bec *BotEventsCreate) OnConflictColumns(columns ...string) *BotEventsUpsertOne {
	bec.conflict = append(bec.conflict, sql.ConflictColumns(columns...))
	return &BotEventsUpsertOne{
		create: bec,
	}
}

type (
	// BotEventsUpsertOne is the builder for "upsert"-ing
	//  one BotEvents node.
	BotEventsUpsertOne struct {
		create *BotEventsCreate
	}

	// BotEventsUpsert is the "OnConflict" setter.
	BotEventsUpsert struct {
		*sql.UpdateSet
	}
)

// SetEventID sets the "event_id" field.
func (u *BotEventsUpsert) SetEventID(v string) *BotEventsUpsert {
	u.Set(botevents.FieldEventID, v)
	return u
}

// UpdateEventID sets the "event_id" field to the value that was provided on create.
func (u *BotEventsUpsert) UpdateEventID() *BotEventsUpsert {
	u.SetExcluded(botevents.FieldEventID)
	return u
}

// SetInsertedAt sets the "inserted_at" field.
func (u *BotEventsUpsert) SetInsertedAt(v time.Time) *BotEventsUpsert {
	u.Set(botevents.FieldInsertedAt, v)
	return u
}

// UpdateInsertedAt sets the "inserted_at" field to the value that was provided on create.
func (u *BotEventsUpsert) UpdateInsertedAt() *BotEventsUpsert {
	u.SetExcluded(botevents.FieldInsertedAt)
	return u
}

// ClearInsertedAt clears the value of the "inserted_at" field.
func (u *BotEventsUpsert) ClearInsertedAt() *BotEventsUpsert {
	u.SetNull(botevents.FieldInsertedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.BotEvents.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *BotEventsUpsertOne) UpdateNewValues() *BotEventsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BotEvents.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *BotEventsUpsertOne) Ignore() *BotEventsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BotEventsUpsertOne) DoNothing() *BotEventsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BotEventsCreate.OnConflict
// documentation for more info.
func (u *BotEventsUpsertOne) Update(set func(*BotEventsUpsert)) *BotEventsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BotEventsUpsert{UpdateSet: update})
	}))
	return u
}

// SetEventID sets the "event_id" field.
func (u *BotEventsUpsertOne) SetEventID(v string) *BotEventsUpsertOne {
	return u.Update(func(s *BotEventsUpsert) {
		s.SetEventID(v)
	})
}

// UpdateEventID sets the "event_id" field to the value that was provided on create.
func (u *BotEventsUpsertOne) UpdateEventID() *BotEventsUpsertOne {
	return u.Update(func(s *BotEventsUpsert) {
		s.UpdateEventID()
	})
}

// SetInsertedAt sets the "inserted_at" field.
func (u *BotEventsUpsertOne) SetInsertedAt(v time.Time) *BotEventsUpsertOne {
	return u.Update(func(s *BotEventsUpsert) {
		s.SetInsertedAt(v)
	})
}

// UpdateInsertedAt sets the "inserted_at" field to the value that was provided on create.
func (u *BotEventsUpsertOne) UpdateInsertedAt() *BotEventsUpsertOne {
	return u.Update(func(s *BotEventsUpsert) {
		s.UpdateInsertedAt()
	})
}

// ClearInsertedAt clears the value of the "inserted_at" field.
func (u *BotEventsUpsertOne) ClearInsertedAt() *BotEventsUpsertOne {
	return u.Update(func(s *BotEventsUpsert) {
		s.ClearInsertedAt()
	})
}

// Exec executes the query.
func (u *BotEventsUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("core: missing options for BotEventsCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BotEventsUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *BotEventsUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *BotEventsUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// BotEventsCreateBulk is the builder for creating many BotEvents entities in bulk.
type BotEventsCreateBulk struct {
	config
	err      error
	builders []*BotEventsCreate
	conflict []sql.ConflictOption
}

// Save creates the BotEvents entities in the database.
func (becb *BotEventsCreateBulk) Save(ctx context.Context) ([]*BotEvents, error) {
	if becb.err != nil {
		return nil, becb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(becb.builders))
	nodes := make([]*BotEvents, len(becb.builders))
	mutators := make([]Mutator, len(becb.builders))
	for i := range becb.builders {
		func(i int, root context.Context) {
			builder := becb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BotEventsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, becb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = becb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, becb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, becb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (becb *BotEventsCreateBulk) SaveX(ctx context.Context) []*BotEvents {
	v, err := becb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (becb *BotEventsCreateBulk) Exec(ctx context.Context) error {
	_, err := becb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (becb *BotEventsCreateBulk) ExecX(ctx context.Context) {
	if err := becb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BotEvents.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BotEventsUpsert) {
//			SetEventID(v+v).
//		}).
//		Exec(ctx)
func (becb *BotEventsCreateBulk) OnConflict(opts ...sql.ConflictOption) *BotEventsUpsertBulk {
	becb.conflict = opts
	return &BotEventsUpsertBulk{
		create: becb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BotEvents.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (becb *BotEventsCreateBulk) OnConflictColumns(columns ...string) *BotEventsUpsertBulk {
	becb.conflict = append(becb.conflict, sql.ConflictColumns(columns...))
	return &BotEventsUpsertBulk{
		create: becb,
	}
}

// BotEventsUpsertBulk is the builder for "upsert"-ing
// a bulk of BotEvents nodes.
type BotEventsUpsertBulk struct {
	create *BotEventsCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.BotEvents.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *BotEventsUpsertBulk) UpdateNewValues() *BotEventsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BotEvents.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *BotEventsUpsertBulk) Ignore() *BotEventsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BotEventsUpsertBulk) DoNothing() *BotEventsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BotEventsCreateBulk.OnConflict
// documentation for more info.
func (u *BotEventsUpsertBulk) Update(set func(*BotEventsUpsert)) *BotEventsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BotEventsUpsert{UpdateSet: update})
	}))
	return u
}

// SetEventID sets the "event_id" field.
func (u *BotEventsUpsertBulk) SetEventID(v string) *BotEventsUpsertBulk {
	return u.Update(func(s *BotEventsUpsert) {
		s.SetEventID(v)
	})
}

// UpdateEventID sets the "event_id" field to the value that was provided on create.
func (u *BotEventsUpsertBulk) UpdateEventID() *BotEventsUpsertBulk {
	return u.Update(func(s *BotEventsUpsert) {
		s.UpdateEventID()
	})
}

// SetInsertedAt sets the "inserted_at" field.
func (u *BotEventsUpsertBulk) SetInsertedAt(v time.Time) *BotEventsUpsertBulk {
	return u.Update(func(s *BotEventsUpsert) {
		s.SetInsertedAt(v)
	})
}

// UpdateInsertedAt sets the "inserted_at" field to the value that was provided on create.
func (u *BotEventsUpsertBulk) UpdateInsertedAt() *BotEventsUpsertBulk {
	return u.Update(func(s *BotEventsUpsert) {
		s.UpdateInsertedAt()
	})
}

// ClearInsertedAt clears the value of the "inserted_at" field.
func (u *BotEventsUpsertBulk) ClearInsertedAt() *BotEventsUpsertBulk {
	return u.Update(func(s *BotEventsUpsert) {
		s.ClearInsertedAt()
	})
}

// Exec executes the query.
func (u *BotEventsUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("core: OnConflict was set for builder %d. Set it on the BotEventsCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("core: missing options for BotEventsCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BotEventsUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
