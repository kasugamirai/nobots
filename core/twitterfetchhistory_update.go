// Code generated by ent, DO NOT EDIT.

package core

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"freefrom.space/nobot/core/internal"
	"freefrom.space/nobot/core/predicate"
	"freefrom.space/nobot/core/twitterfetchhistory"
)

// TwitterFetchHistoryUpdate is the builder for updating TwitterFetchHistory entities.
type TwitterFetchHistoryUpdate struct {
	config
	hooks     []Hook
	mutation  *TwitterFetchHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the TwitterFetchHistoryUpdate builder.
func (tfhu *TwitterFetchHistoryUpdate) Where(ps ...predicate.TwitterFetchHistory) *TwitterFetchHistoryUpdate {
	tfhu.mutation.Where(ps...)
	return tfhu
}

// SetItemID sets the "item_id" field.
func (tfhu *TwitterFetchHistoryUpdate) SetItemID(s string) *TwitterFetchHistoryUpdate {
	tfhu.mutation.SetItemID(s)
	return tfhu
}

// SetNillableItemID sets the "item_id" field if the given value is not nil.
func (tfhu *TwitterFetchHistoryUpdate) SetNillableItemID(s *string) *TwitterFetchHistoryUpdate {
	if s != nil {
		tfhu.SetItemID(*s)
	}
	return tfhu
}

// SetName sets the "name" field.
func (tfhu *TwitterFetchHistoryUpdate) SetName(s string) *TwitterFetchHistoryUpdate {
	tfhu.mutation.SetName(s)
	return tfhu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tfhu *TwitterFetchHistoryUpdate) SetNillableName(s *string) *TwitterFetchHistoryUpdate {
	if s != nil {
		tfhu.SetName(*s)
	}
	return tfhu
}

// SetFetchType sets the "fetch_type" field.
func (tfhu *TwitterFetchHistoryUpdate) SetFetchType(s string) *TwitterFetchHistoryUpdate {
	tfhu.mutation.SetFetchType(s)
	return tfhu
}

// SetNillableFetchType sets the "fetch_type" field if the given value is not nil.
func (tfhu *TwitterFetchHistoryUpdate) SetNillableFetchType(s *string) *TwitterFetchHistoryUpdate {
	if s != nil {
		tfhu.SetFetchType(*s)
	}
	return tfhu
}

// SetFetchAt sets the "fetch_at" field.
func (tfhu *TwitterFetchHistoryUpdate) SetFetchAt(t time.Time) *TwitterFetchHistoryUpdate {
	tfhu.mutation.SetFetchAt(t)
	return tfhu
}

// SetNillableFetchAt sets the "fetch_at" field if the given value is not nil.
func (tfhu *TwitterFetchHistoryUpdate) SetNillableFetchAt(t *time.Time) *TwitterFetchHistoryUpdate {
	if t != nil {
		tfhu.SetFetchAt(*t)
	}
	return tfhu
}

// SetContent sets the "content" field.
func (tfhu *TwitterFetchHistoryUpdate) SetContent(s string) *TwitterFetchHistoryUpdate {
	tfhu.mutation.SetContent(s)
	return tfhu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (tfhu *TwitterFetchHistoryUpdate) SetNillableContent(s *string) *TwitterFetchHistoryUpdate {
	if s != nil {
		tfhu.SetContent(*s)
	}
	return tfhu
}

// Mutation returns the TwitterFetchHistoryMutation object of the builder.
func (tfhu *TwitterFetchHistoryUpdate) Mutation() *TwitterFetchHistoryMutation {
	return tfhu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tfhu *TwitterFetchHistoryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tfhu.sqlSave, tfhu.mutation, tfhu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tfhu *TwitterFetchHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := tfhu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tfhu *TwitterFetchHistoryUpdate) Exec(ctx context.Context) error {
	_, err := tfhu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tfhu *TwitterFetchHistoryUpdate) ExecX(ctx context.Context) {
	if err := tfhu.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tfhu *TwitterFetchHistoryUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TwitterFetchHistoryUpdate {
	tfhu.modifiers = append(tfhu.modifiers, modifiers...)
	return tfhu
}

func (tfhu *TwitterFetchHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(twitterfetchhistory.Table, twitterfetchhistory.Columns, sqlgraph.NewFieldSpec(twitterfetchhistory.FieldID, field.TypeInt))
	if ps := tfhu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tfhu.mutation.ItemID(); ok {
		_spec.SetField(twitterfetchhistory.FieldItemID, field.TypeString, value)
	}
	if value, ok := tfhu.mutation.Name(); ok {
		_spec.SetField(twitterfetchhistory.FieldName, field.TypeString, value)
	}
	if value, ok := tfhu.mutation.FetchType(); ok {
		_spec.SetField(twitterfetchhistory.FieldFetchType, field.TypeString, value)
	}
	if value, ok := tfhu.mutation.FetchAt(); ok {
		_spec.SetField(twitterfetchhistory.FieldFetchAt, field.TypeTime, value)
	}
	if value, ok := tfhu.mutation.Content(); ok {
		_spec.SetField(twitterfetchhistory.FieldContent, field.TypeString, value)
	}
	_spec.Node.Schema = tfhu.schemaConfig.TwitterFetchHistory
	ctx = internal.NewSchemaConfigContext(ctx, tfhu.schemaConfig)
	_spec.AddModifiers(tfhu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, tfhu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{twitterfetchhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tfhu.mutation.done = true
	return n, nil
}

// TwitterFetchHistoryUpdateOne is the builder for updating a single TwitterFetchHistory entity.
type TwitterFetchHistoryUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *TwitterFetchHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetItemID sets the "item_id" field.
func (tfhuo *TwitterFetchHistoryUpdateOne) SetItemID(s string) *TwitterFetchHistoryUpdateOne {
	tfhuo.mutation.SetItemID(s)
	return tfhuo
}

// SetNillableItemID sets the "item_id" field if the given value is not nil.
func (tfhuo *TwitterFetchHistoryUpdateOne) SetNillableItemID(s *string) *TwitterFetchHistoryUpdateOne {
	if s != nil {
		tfhuo.SetItemID(*s)
	}
	return tfhuo
}

// SetName sets the "name" field.
func (tfhuo *TwitterFetchHistoryUpdateOne) SetName(s string) *TwitterFetchHistoryUpdateOne {
	tfhuo.mutation.SetName(s)
	return tfhuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tfhuo *TwitterFetchHistoryUpdateOne) SetNillableName(s *string) *TwitterFetchHistoryUpdateOne {
	if s != nil {
		tfhuo.SetName(*s)
	}
	return tfhuo
}

// SetFetchType sets the "fetch_type" field.
func (tfhuo *TwitterFetchHistoryUpdateOne) SetFetchType(s string) *TwitterFetchHistoryUpdateOne {
	tfhuo.mutation.SetFetchType(s)
	return tfhuo
}

// SetNillableFetchType sets the "fetch_type" field if the given value is not nil.
func (tfhuo *TwitterFetchHistoryUpdateOne) SetNillableFetchType(s *string) *TwitterFetchHistoryUpdateOne {
	if s != nil {
		tfhuo.SetFetchType(*s)
	}
	return tfhuo
}

// SetFetchAt sets the "fetch_at" field.
func (tfhuo *TwitterFetchHistoryUpdateOne) SetFetchAt(t time.Time) *TwitterFetchHistoryUpdateOne {
	tfhuo.mutation.SetFetchAt(t)
	return tfhuo
}

// SetNillableFetchAt sets the "fetch_at" field if the given value is not nil.
func (tfhuo *TwitterFetchHistoryUpdateOne) SetNillableFetchAt(t *time.Time) *TwitterFetchHistoryUpdateOne {
	if t != nil {
		tfhuo.SetFetchAt(*t)
	}
	return tfhuo
}

// SetContent sets the "content" field.
func (tfhuo *TwitterFetchHistoryUpdateOne) SetContent(s string) *TwitterFetchHistoryUpdateOne {
	tfhuo.mutation.SetContent(s)
	return tfhuo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (tfhuo *TwitterFetchHistoryUpdateOne) SetNillableContent(s *string) *TwitterFetchHistoryUpdateOne {
	if s != nil {
		tfhuo.SetContent(*s)
	}
	return tfhuo
}

// Mutation returns the TwitterFetchHistoryMutation object of the builder.
func (tfhuo *TwitterFetchHistoryUpdateOne) Mutation() *TwitterFetchHistoryMutation {
	return tfhuo.mutation
}

// Where appends a list predicates to the TwitterFetchHistoryUpdate builder.
func (tfhuo *TwitterFetchHistoryUpdateOne) Where(ps ...predicate.TwitterFetchHistory) *TwitterFetchHistoryUpdateOne {
	tfhuo.mutation.Where(ps...)
	return tfhuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tfhuo *TwitterFetchHistoryUpdateOne) Select(field string, fields ...string) *TwitterFetchHistoryUpdateOne {
	tfhuo.fields = append([]string{field}, fields...)
	return tfhuo
}

// Save executes the query and returns the updated TwitterFetchHistory entity.
func (tfhuo *TwitterFetchHistoryUpdateOne) Save(ctx context.Context) (*TwitterFetchHistory, error) {
	return withHooks(ctx, tfhuo.sqlSave, tfhuo.mutation, tfhuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tfhuo *TwitterFetchHistoryUpdateOne) SaveX(ctx context.Context) *TwitterFetchHistory {
	node, err := tfhuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tfhuo *TwitterFetchHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := tfhuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tfhuo *TwitterFetchHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := tfhuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tfhuo *TwitterFetchHistoryUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TwitterFetchHistoryUpdateOne {
	tfhuo.modifiers = append(tfhuo.modifiers, modifiers...)
	return tfhuo
}

func (tfhuo *TwitterFetchHistoryUpdateOne) sqlSave(ctx context.Context) (_node *TwitterFetchHistory, err error) {
	_spec := sqlgraph.NewUpdateSpec(twitterfetchhistory.Table, twitterfetchhistory.Columns, sqlgraph.NewFieldSpec(twitterfetchhistory.FieldID, field.TypeInt))
	id, ok := tfhuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`core: missing "TwitterFetchHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tfhuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, twitterfetchhistory.FieldID)
		for _, f := range fields {
			if !twitterfetchhistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("core: invalid field %q for query", f)}
			}
			if f != twitterfetchhistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tfhuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tfhuo.mutation.ItemID(); ok {
		_spec.SetField(twitterfetchhistory.FieldItemID, field.TypeString, value)
	}
	if value, ok := tfhuo.mutation.Name(); ok {
		_spec.SetField(twitterfetchhistory.FieldName, field.TypeString, value)
	}
	if value, ok := tfhuo.mutation.FetchType(); ok {
		_spec.SetField(twitterfetchhistory.FieldFetchType, field.TypeString, value)
	}
	if value, ok := tfhuo.mutation.FetchAt(); ok {
		_spec.SetField(twitterfetchhistory.FieldFetchAt, field.TypeTime, value)
	}
	if value, ok := tfhuo.mutation.Content(); ok {
		_spec.SetField(twitterfetchhistory.FieldContent, field.TypeString, value)
	}
	_spec.Node.Schema = tfhuo.schemaConfig.TwitterFetchHistory
	ctx = internal.NewSchemaConfigContext(ctx, tfhuo.schemaConfig)
	_spec.AddModifiers(tfhuo.modifiers...)
	_node = &TwitterFetchHistory{config: tfhuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tfhuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{twitterfetchhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tfhuo.mutation.done = true
	return _node, nil
}
