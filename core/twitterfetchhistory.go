// Code generated by ent, DO NOT EDIT.

package core

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"freefrom.space/nobot/core/twitterfetchhistory"
)

// TwitterFetchHistory is the model entity for the TwitterFetchHistory schema.
type TwitterFetchHistory struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// profile id, twitter id, ...
	ItemID string `json:"item_id,omitempty"`
	// readable name
	Name string `json:"name,omitempty"`
	// profile twitter ...
	FetchType string `json:"fetch_type,omitempty"`
	// FetchAt holds the value of the "fetch_at" field.
	FetchAt time.Time `json:"fetch_at,omitempty"`
	// fetch result in yaml format
	Content      string `json:"content,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TwitterFetchHistory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case twitterfetchhistory.FieldID:
			values[i] = new(sql.NullInt64)
		case twitterfetchhistory.FieldItemID, twitterfetchhistory.FieldName, twitterfetchhistory.FieldFetchType, twitterfetchhistory.FieldContent:
			values[i] = new(sql.NullString)
		case twitterfetchhistory.FieldFetchAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TwitterFetchHistory fields.
func (tfh *TwitterFetchHistory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case twitterfetchhistory.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tfh.ID = int(value.Int64)
		case twitterfetchhistory.FieldItemID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field item_id", values[i])
			} else if value.Valid {
				tfh.ItemID = value.String
			}
		case twitterfetchhistory.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				tfh.Name = value.String
			}
		case twitterfetchhistory.FieldFetchType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field fetch_type", values[i])
			} else if value.Valid {
				tfh.FetchType = value.String
			}
		case twitterfetchhistory.FieldFetchAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field fetch_at", values[i])
			} else if value.Valid {
				tfh.FetchAt = value.Time
			}
		case twitterfetchhistory.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				tfh.Content = value.String
			}
		default:
			tfh.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TwitterFetchHistory.
// This includes values selected through modifiers, order, etc.
func (tfh *TwitterFetchHistory) Value(name string) (ent.Value, error) {
	return tfh.selectValues.Get(name)
}

// Update returns a builder for updating this TwitterFetchHistory.
// Note that you need to call TwitterFetchHistory.Unwrap() before calling this method if this TwitterFetchHistory
// was returned from a transaction, and the transaction was committed or rolled back.
func (tfh *TwitterFetchHistory) Update() *TwitterFetchHistoryUpdateOne {
	return NewTwitterFetchHistoryClient(tfh.config).UpdateOne(tfh)
}

// Unwrap unwraps the TwitterFetchHistory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tfh *TwitterFetchHistory) Unwrap() *TwitterFetchHistory {
	_tx, ok := tfh.config.driver.(*txDriver)
	if !ok {
		panic("core: TwitterFetchHistory is not a transactional entity")
	}
	tfh.config.driver = _tx.drv
	return tfh
}

// String implements the fmt.Stringer.
func (tfh *TwitterFetchHistory) String() string {
	var builder strings.Builder
	builder.WriteString("TwitterFetchHistory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tfh.ID))
	builder.WriteString("item_id=")
	builder.WriteString(tfh.ItemID)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(tfh.Name)
	builder.WriteString(", ")
	builder.WriteString("fetch_type=")
	builder.WriteString(tfh.FetchType)
	builder.WriteString(", ")
	builder.WriteString("fetch_at=")
	builder.WriteString(tfh.FetchAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(tfh.Content)
	builder.WriteByte(')')
	return builder.String()
}

// TwitterFetchHistories is a parsable slice of TwitterFetchHistory.
type TwitterFetchHistories []*TwitterFetchHistory
