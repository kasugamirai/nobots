// Code generated by ent, DO NOT EDIT.

package twitterfetchhistory

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the twitterfetchhistory type in the database.
	Label = "twitter_fetch_history"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldItemID holds the string denoting the item_id field in the database.
	FieldItemID = "item_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldFetchType holds the string denoting the fetch_type field in the database.
	FieldFetchType = "fetch_type"
	// FieldFetchAt holds the string denoting the fetch_at field in the database.
	FieldFetchAt = "fetch_at"
	// FieldContent holds the string denoting the content field in the database.
	FieldContent = "content"
	// Table holds the table name of the twitterfetchhistory in the database.
	Table = "twitter_fetch_histories"
)

// Columns holds all SQL columns for twitterfetchhistory fields.
var Columns = []string{
	FieldID,
	FieldItemID,
	FieldName,
	FieldFetchType,
	FieldFetchAt,
	FieldContent,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultFetchAt holds the default value on creation for the "fetch_at" field.
	DefaultFetchAt func() time.Time
)

// OrderOption defines the ordering options for the TwitterFetchHistory queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByItemID orders the results by the item_id field.
func ByItemID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldItemID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByFetchType orders the results by the fetch_type field.
func ByFetchType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFetchType, opts...).ToFunc()
}

// ByFetchAt orders the results by the fetch_at field.
func ByFetchAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFetchAt, opts...).ToFunc()
}

// ByContent orders the results by the content field.
func ByContent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContent, opts...).ToFunc()
}
