// Code generated by ent, DO NOT EDIT.

package core

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"freefrom.space/nobot/core/internal"
	"freefrom.space/nobot/core/nostrnotesfetchhistory"
	"freefrom.space/nobot/core/predicate"
)

// NostrNotesFetchHistoryUpdate is the builder for updating NostrNotesFetchHistory entities.
type NostrNotesFetchHistoryUpdate struct {
	config
	hooks     []Hook
	mutation  *NostrNotesFetchHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the NostrNotesFetchHistoryUpdate builder.
func (nnfhu *NostrNotesFetchHistoryUpdate) Where(ps ...predicate.NostrNotesFetchHistory) *NostrNotesFetchHistoryUpdate {
	nnfhu.mutation.Where(ps...)
	return nnfhu
}

// SetPublishAt sets the "publish_at" field.
func (nnfhu *NostrNotesFetchHistoryUpdate) SetPublishAt(t time.Time) *NostrNotesFetchHistoryUpdate {
	nnfhu.mutation.SetPublishAt(t)
	return nnfhu
}

// SetNillablePublishAt sets the "publish_at" field if the given value is not nil.
func (nnfhu *NostrNotesFetchHistoryUpdate) SetNillablePublishAt(t *time.Time) *NostrNotesFetchHistoryUpdate {
	if t != nil {
		nnfhu.SetPublishAt(*t)
	}
	return nnfhu
}

// SetPublicKeyHex sets the "public_key_hex" field.
func (nnfhu *NostrNotesFetchHistoryUpdate) SetPublicKeyHex(s string) *NostrNotesFetchHistoryUpdate {
	nnfhu.mutation.SetPublicKeyHex(s)
	return nnfhu
}

// SetNillablePublicKeyHex sets the "public_key_hex" field if the given value is not nil.
func (nnfhu *NostrNotesFetchHistoryUpdate) SetNillablePublicKeyHex(s *string) *NostrNotesFetchHistoryUpdate {
	if s != nil {
		nnfhu.SetPublicKeyHex(*s)
	}
	return nnfhu
}

// SetContext sets the "context" field.
func (nnfhu *NostrNotesFetchHistoryUpdate) SetContext(s string) *NostrNotesFetchHistoryUpdate {
	nnfhu.mutation.SetContext(s)
	return nnfhu
}

// SetNillableContext sets the "context" field if the given value is not nil.
func (nnfhu *NostrNotesFetchHistoryUpdate) SetNillableContext(s *string) *NostrNotesFetchHistoryUpdate {
	if s != nil {
		nnfhu.SetContext(*s)
	}
	return nnfhu
}

// Mutation returns the NostrNotesFetchHistoryMutation object of the builder.
func (nnfhu *NostrNotesFetchHistoryUpdate) Mutation() *NostrNotesFetchHistoryMutation {
	return nnfhu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (nnfhu *NostrNotesFetchHistoryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, nnfhu.sqlSave, nnfhu.mutation, nnfhu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nnfhu *NostrNotesFetchHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := nnfhu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (nnfhu *NostrNotesFetchHistoryUpdate) Exec(ctx context.Context) error {
	_, err := nnfhu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nnfhu *NostrNotesFetchHistoryUpdate) ExecX(ctx context.Context) {
	if err := nnfhu.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (nnfhu *NostrNotesFetchHistoryUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *NostrNotesFetchHistoryUpdate {
	nnfhu.modifiers = append(nnfhu.modifiers, modifiers...)
	return nnfhu
}

func (nnfhu *NostrNotesFetchHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(nostrnotesfetchhistory.Table, nostrnotesfetchhistory.Columns, sqlgraph.NewFieldSpec(nostrnotesfetchhistory.FieldID, field.TypeString))
	if ps := nnfhu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nnfhu.mutation.PublishAt(); ok {
		_spec.SetField(nostrnotesfetchhistory.FieldPublishAt, field.TypeTime, value)
	}
	if value, ok := nnfhu.mutation.PublicKeyHex(); ok {
		_spec.SetField(nostrnotesfetchhistory.FieldPublicKeyHex, field.TypeString, value)
	}
	if value, ok := nnfhu.mutation.Context(); ok {
		_spec.SetField(nostrnotesfetchhistory.FieldContext, field.TypeString, value)
	}
	_spec.Node.Schema = nnfhu.schemaConfig.NostrNotesFetchHistory
	ctx = internal.NewSchemaConfigContext(ctx, nnfhu.schemaConfig)
	_spec.AddModifiers(nnfhu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, nnfhu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{nostrnotesfetchhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	nnfhu.mutation.done = true
	return n, nil
}

// NostrNotesFetchHistoryUpdateOne is the builder for updating a single NostrNotesFetchHistory entity.
type NostrNotesFetchHistoryUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *NostrNotesFetchHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetPublishAt sets the "publish_at" field.
func (nnfhuo *NostrNotesFetchHistoryUpdateOne) SetPublishAt(t time.Time) *NostrNotesFetchHistoryUpdateOne {
	nnfhuo.mutation.SetPublishAt(t)
	return nnfhuo
}

// SetNillablePublishAt sets the "publish_at" field if the given value is not nil.
func (nnfhuo *NostrNotesFetchHistoryUpdateOne) SetNillablePublishAt(t *time.Time) *NostrNotesFetchHistoryUpdateOne {
	if t != nil {
		nnfhuo.SetPublishAt(*t)
	}
	return nnfhuo
}

// SetPublicKeyHex sets the "public_key_hex" field.
func (nnfhuo *NostrNotesFetchHistoryUpdateOne) SetPublicKeyHex(s string) *NostrNotesFetchHistoryUpdateOne {
	nnfhuo.mutation.SetPublicKeyHex(s)
	return nnfhuo
}

// SetNillablePublicKeyHex sets the "public_key_hex" field if the given value is not nil.
func (nnfhuo *NostrNotesFetchHistoryUpdateOne) SetNillablePublicKeyHex(s *string) *NostrNotesFetchHistoryUpdateOne {
	if s != nil {
		nnfhuo.SetPublicKeyHex(*s)
	}
	return nnfhuo
}

// SetContext sets the "context" field.
func (nnfhuo *NostrNotesFetchHistoryUpdateOne) SetContext(s string) *NostrNotesFetchHistoryUpdateOne {
	nnfhuo.mutation.SetContext(s)
	return nnfhuo
}

// SetNillableContext sets the "context" field if the given value is not nil.
func (nnfhuo *NostrNotesFetchHistoryUpdateOne) SetNillableContext(s *string) *NostrNotesFetchHistoryUpdateOne {
	if s != nil {
		nnfhuo.SetContext(*s)
	}
	return nnfhuo
}

// Mutation returns the NostrNotesFetchHistoryMutation object of the builder.
func (nnfhuo *NostrNotesFetchHistoryUpdateOne) Mutation() *NostrNotesFetchHistoryMutation {
	return nnfhuo.mutation
}

// Where appends a list predicates to the NostrNotesFetchHistoryUpdate builder.
func (nnfhuo *NostrNotesFetchHistoryUpdateOne) Where(ps ...predicate.NostrNotesFetchHistory) *NostrNotesFetchHistoryUpdateOne {
	nnfhuo.mutation.Where(ps...)
	return nnfhuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (nnfhuo *NostrNotesFetchHistoryUpdateOne) Select(field string, fields ...string) *NostrNotesFetchHistoryUpdateOne {
	nnfhuo.fields = append([]string{field}, fields...)
	return nnfhuo
}

// Save executes the query and returns the updated NostrNotesFetchHistory entity.
func (nnfhuo *NostrNotesFetchHistoryUpdateOne) Save(ctx context.Context) (*NostrNotesFetchHistory, error) {
	return withHooks(ctx, nnfhuo.sqlSave, nnfhuo.mutation, nnfhuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nnfhuo *NostrNotesFetchHistoryUpdateOne) SaveX(ctx context.Context) *NostrNotesFetchHistory {
	node, err := nnfhuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (nnfhuo *NostrNotesFetchHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := nnfhuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nnfhuo *NostrNotesFetchHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := nnfhuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (nnfhuo *NostrNotesFetchHistoryUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *NostrNotesFetchHistoryUpdateOne {
	nnfhuo.modifiers = append(nnfhuo.modifiers, modifiers...)
	return nnfhuo
}

func (nnfhuo *NostrNotesFetchHistoryUpdateOne) sqlSave(ctx context.Context) (_node *NostrNotesFetchHistory, err error) {
	_spec := sqlgraph.NewUpdateSpec(nostrnotesfetchhistory.Table, nostrnotesfetchhistory.Columns, sqlgraph.NewFieldSpec(nostrnotesfetchhistory.FieldID, field.TypeString))
	id, ok := nnfhuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`core: missing "NostrNotesFetchHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := nnfhuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, nostrnotesfetchhistory.FieldID)
		for _, f := range fields {
			if !nostrnotesfetchhistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("core: invalid field %q for query", f)}
			}
			if f != nostrnotesfetchhistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := nnfhuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nnfhuo.mutation.PublishAt(); ok {
		_spec.SetField(nostrnotesfetchhistory.FieldPublishAt, field.TypeTime, value)
	}
	if value, ok := nnfhuo.mutation.PublicKeyHex(); ok {
		_spec.SetField(nostrnotesfetchhistory.FieldPublicKeyHex, field.TypeString, value)
	}
	if value, ok := nnfhuo.mutation.Context(); ok {
		_spec.SetField(nostrnotesfetchhistory.FieldContext, field.TypeString, value)
	}
	_spec.Node.Schema = nnfhuo.schemaConfig.NostrNotesFetchHistory
	ctx = internal.NewSchemaConfigContext(ctx, nnfhuo.schemaConfig)
	_spec.AddModifiers(nnfhuo.modifiers...)
	_node = &NostrNotesFetchHistory{config: nnfhuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, nnfhuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{nostrnotesfetchhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	nnfhuo.mutation.done = true
	return _node, nil
}
