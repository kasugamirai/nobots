// Code generated by ent, DO NOT EDIT.

package core

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"freefrom.space/nobot/core/nostrnotesfetchhistory"
)

// NostrNotesFetchHistoryCreate is the builder for creating a NostrNotesFetchHistory entity.
type NostrNotesFetchHistoryCreate struct {
	config
	mutation *NostrNotesFetchHistoryMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetPublishAt sets the "publish_at" field.
func (nnfhc *NostrNotesFetchHistoryCreate) SetPublishAt(t time.Time) *NostrNotesFetchHistoryCreate {
	nnfhc.mutation.SetPublishAt(t)
	return nnfhc
}

// SetPublicKeyHex sets the "public_key_hex" field.
func (nnfhc *NostrNotesFetchHistoryCreate) SetPublicKeyHex(s string) *NostrNotesFetchHistoryCreate {
	nnfhc.mutation.SetPublicKeyHex(s)
	return nnfhc
}

// SetContext sets the "context" field.
func (nnfhc *NostrNotesFetchHistoryCreate) SetContext(s string) *NostrNotesFetchHistoryCreate {
	nnfhc.mutation.SetContext(s)
	return nnfhc
}

// SetID sets the "id" field.
func (nnfhc *NostrNotesFetchHistoryCreate) SetID(s string) *NostrNotesFetchHistoryCreate {
	nnfhc.mutation.SetID(s)
	return nnfhc
}

// Mutation returns the NostrNotesFetchHistoryMutation object of the builder.
func (nnfhc *NostrNotesFetchHistoryCreate) Mutation() *NostrNotesFetchHistoryMutation {
	return nnfhc.mutation
}

// Save creates the NostrNotesFetchHistory in the database.
func (nnfhc *NostrNotesFetchHistoryCreate) Save(ctx context.Context) (*NostrNotesFetchHistory, error) {
	return withHooks(ctx, nnfhc.sqlSave, nnfhc.mutation, nnfhc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (nnfhc *NostrNotesFetchHistoryCreate) SaveX(ctx context.Context) *NostrNotesFetchHistory {
	v, err := nnfhc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (nnfhc *NostrNotesFetchHistoryCreate) Exec(ctx context.Context) error {
	_, err := nnfhc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nnfhc *NostrNotesFetchHistoryCreate) ExecX(ctx context.Context) {
	if err := nnfhc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nnfhc *NostrNotesFetchHistoryCreate) check() error {
	if _, ok := nnfhc.mutation.PublishAt(); !ok {
		return &ValidationError{Name: "publish_at", err: errors.New(`core: missing required field "NostrNotesFetchHistory.publish_at"`)}
	}
	if _, ok := nnfhc.mutation.PublicKeyHex(); !ok {
		return &ValidationError{Name: "public_key_hex", err: errors.New(`core: missing required field "NostrNotesFetchHistory.public_key_hex"`)}
	}
	if _, ok := nnfhc.mutation.Context(); !ok {
		return &ValidationError{Name: "context", err: errors.New(`core: missing required field "NostrNotesFetchHistory.context"`)}
	}
	if v, ok := nnfhc.mutation.ID(); ok {
		if err := nostrnotesfetchhistory.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`core: validator failed for field "NostrNotesFetchHistory.id": %w`, err)}
		}
	}
	return nil
}

func (nnfhc *NostrNotesFetchHistoryCreate) sqlSave(ctx context.Context) (*NostrNotesFetchHistory, error) {
	if err := nnfhc.check(); err != nil {
		return nil, err
	}
	_node, _spec := nnfhc.createSpec()
	if err := sqlgraph.CreateNode(ctx, nnfhc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected NostrNotesFetchHistory.ID type: %T", _spec.ID.Value)
		}
	}
	nnfhc.mutation.id = &_node.ID
	nnfhc.mutation.done = true
	return _node, nil
}

func (nnfhc *NostrNotesFetchHistoryCreate) createSpec() (*NostrNotesFetchHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &NostrNotesFetchHistory{config: nnfhc.config}
		_spec = sqlgraph.NewCreateSpec(nostrnotesfetchhistory.Table, sqlgraph.NewFieldSpec(nostrnotesfetchhistory.FieldID, field.TypeString))
	)
	_spec.Schema = nnfhc.schemaConfig.NostrNotesFetchHistory
	_spec.OnConflict = nnfhc.conflict
	if id, ok := nnfhc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := nnfhc.mutation.PublishAt(); ok {
		_spec.SetField(nostrnotesfetchhistory.FieldPublishAt, field.TypeTime, value)
		_node.PublishAt = value
	}
	if value, ok := nnfhc.mutation.PublicKeyHex(); ok {
		_spec.SetField(nostrnotesfetchhistory.FieldPublicKeyHex, field.TypeString, value)
		_node.PublicKeyHex = value
	}
	if value, ok := nnfhc.mutation.Context(); ok {
		_spec.SetField(nostrnotesfetchhistory.FieldContext, field.TypeString, value)
		_node.Context = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.NostrNotesFetchHistory.Create().
//		SetPublishAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.NostrNotesFetchHistoryUpsert) {
//			SetPublishAt(v+v).
//		}).
//		Exec(ctx)
func (nnfhc *NostrNotesFetchHistoryCreate) OnConflict(opts ...sql.ConflictOption) *NostrNotesFetchHistoryUpsertOne {
	nnfhc.conflict = opts
	return &NostrNotesFetchHistoryUpsertOne{
		create: nnfhc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.NostrNotesFetchHistory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (nnfhc *NostrNotesFetchHistoryCreate) OnConflictColumns(columns ...string) *NostrNotesFetchHistoryUpsertOne {
	nnfhc.conflict = append(nnfhc.conflict, sql.ConflictColumns(columns...))
	return &NostrNotesFetchHistoryUpsertOne{
		create: nnfhc,
	}
}

type (
	// NostrNotesFetchHistoryUpsertOne is the builder for "upsert"-ing
	//  one NostrNotesFetchHistory node.
	NostrNotesFetchHistoryUpsertOne struct {
		create *NostrNotesFetchHistoryCreate
	}

	// NostrNotesFetchHistoryUpsert is the "OnConflict" setter.
	NostrNotesFetchHistoryUpsert struct {
		*sql.UpdateSet
	}
)

// SetPublishAt sets the "publish_at" field.
func (u *NostrNotesFetchHistoryUpsert) SetPublishAt(v time.Time) *NostrNotesFetchHistoryUpsert {
	u.Set(nostrnotesfetchhistory.FieldPublishAt, v)
	return u
}

// UpdatePublishAt sets the "publish_at" field to the value that was provided on create.
func (u *NostrNotesFetchHistoryUpsert) UpdatePublishAt() *NostrNotesFetchHistoryUpsert {
	u.SetExcluded(nostrnotesfetchhistory.FieldPublishAt)
	return u
}

// SetPublicKeyHex sets the "public_key_hex" field.
func (u *NostrNotesFetchHistoryUpsert) SetPublicKeyHex(v string) *NostrNotesFetchHistoryUpsert {
	u.Set(nostrnotesfetchhistory.FieldPublicKeyHex, v)
	return u
}

// UpdatePublicKeyHex sets the "public_key_hex" field to the value that was provided on create.
func (u *NostrNotesFetchHistoryUpsert) UpdatePublicKeyHex() *NostrNotesFetchHistoryUpsert {
	u.SetExcluded(nostrnotesfetchhistory.FieldPublicKeyHex)
	return u
}

// SetContext sets the "context" field.
func (u *NostrNotesFetchHistoryUpsert) SetContext(v string) *NostrNotesFetchHistoryUpsert {
	u.Set(nostrnotesfetchhistory.FieldContext, v)
	return u
}

// UpdateContext sets the "context" field to the value that was provided on create.
func (u *NostrNotesFetchHistoryUpsert) UpdateContext() *NostrNotesFetchHistoryUpsert {
	u.SetExcluded(nostrnotesfetchhistory.FieldContext)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.NostrNotesFetchHistory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(nostrnotesfetchhistory.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *NostrNotesFetchHistoryUpsertOne) UpdateNewValues() *NostrNotesFetchHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(nostrnotesfetchhistory.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.NostrNotesFetchHistory.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *NostrNotesFetchHistoryUpsertOne) Ignore() *NostrNotesFetchHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *NostrNotesFetchHistoryUpsertOne) DoNothing() *NostrNotesFetchHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the NostrNotesFetchHistoryCreate.OnConflict
// documentation for more info.
func (u *NostrNotesFetchHistoryUpsertOne) Update(set func(*NostrNotesFetchHistoryUpsert)) *NostrNotesFetchHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&NostrNotesFetchHistoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetPublishAt sets the "publish_at" field.
func (u *NostrNotesFetchHistoryUpsertOne) SetPublishAt(v time.Time) *NostrNotesFetchHistoryUpsertOne {
	return u.Update(func(s *NostrNotesFetchHistoryUpsert) {
		s.SetPublishAt(v)
	})
}

// UpdatePublishAt sets the "publish_at" field to the value that was provided on create.
func (u *NostrNotesFetchHistoryUpsertOne) UpdatePublishAt() *NostrNotesFetchHistoryUpsertOne {
	return u.Update(func(s *NostrNotesFetchHistoryUpsert) {
		s.UpdatePublishAt()
	})
}

// SetPublicKeyHex sets the "public_key_hex" field.
func (u *NostrNotesFetchHistoryUpsertOne) SetPublicKeyHex(v string) *NostrNotesFetchHistoryUpsertOne {
	return u.Update(func(s *NostrNotesFetchHistoryUpsert) {
		s.SetPublicKeyHex(v)
	})
}

// UpdatePublicKeyHex sets the "public_key_hex" field to the value that was provided on create.
func (u *NostrNotesFetchHistoryUpsertOne) UpdatePublicKeyHex() *NostrNotesFetchHistoryUpsertOne {
	return u.Update(func(s *NostrNotesFetchHistoryUpsert) {
		s.UpdatePublicKeyHex()
	})
}

// SetContext sets the "context" field.
func (u *NostrNotesFetchHistoryUpsertOne) SetContext(v string) *NostrNotesFetchHistoryUpsertOne {
	return u.Update(func(s *NostrNotesFetchHistoryUpsert) {
		s.SetContext(v)
	})
}

// UpdateContext sets the "context" field to the value that was provided on create.
func (u *NostrNotesFetchHistoryUpsertOne) UpdateContext() *NostrNotesFetchHistoryUpsertOne {
	return u.Update(func(s *NostrNotesFetchHistoryUpsert) {
		s.UpdateContext()
	})
}

// Exec executes the query.
func (u *NostrNotesFetchHistoryUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("core: missing options for NostrNotesFetchHistoryCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *NostrNotesFetchHistoryUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *NostrNotesFetchHistoryUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("core: NostrNotesFetchHistoryUpsertOne.ID is not supported by MySQL driver. Use NostrNotesFetchHistoryUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *NostrNotesFetchHistoryUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// NostrNotesFetchHistoryCreateBulk is the builder for creating many NostrNotesFetchHistory entities in bulk.
type NostrNotesFetchHistoryCreateBulk struct {
	config
	err      error
	builders []*NostrNotesFetchHistoryCreate
	conflict []sql.ConflictOption
}

// Save creates the NostrNotesFetchHistory entities in the database.
func (nnfhcb *NostrNotesFetchHistoryCreateBulk) Save(ctx context.Context) ([]*NostrNotesFetchHistory, error) {
	if nnfhcb.err != nil {
		return nil, nnfhcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(nnfhcb.builders))
	nodes := make([]*NostrNotesFetchHistory, len(nnfhcb.builders))
	mutators := make([]Mutator, len(nnfhcb.builders))
	for i := range nnfhcb.builders {
		func(i int, root context.Context) {
			builder := nnfhcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NostrNotesFetchHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, nnfhcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = nnfhcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, nnfhcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, nnfhcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (nnfhcb *NostrNotesFetchHistoryCreateBulk) SaveX(ctx context.Context) []*NostrNotesFetchHistory {
	v, err := nnfhcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (nnfhcb *NostrNotesFetchHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := nnfhcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nnfhcb *NostrNotesFetchHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := nnfhcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.NostrNotesFetchHistory.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.NostrNotesFetchHistoryUpsert) {
//			SetPublishAt(v+v).
//		}).
//		Exec(ctx)
func (nnfhcb *NostrNotesFetchHistoryCreateBulk) OnConflict(opts ...sql.ConflictOption) *NostrNotesFetchHistoryUpsertBulk {
	nnfhcb.conflict = opts
	return &NostrNotesFetchHistoryUpsertBulk{
		create: nnfhcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.NostrNotesFetchHistory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (nnfhcb *NostrNotesFetchHistoryCreateBulk) OnConflictColumns(columns ...string) *NostrNotesFetchHistoryUpsertBulk {
	nnfhcb.conflict = append(nnfhcb.conflict, sql.ConflictColumns(columns...))
	return &NostrNotesFetchHistoryUpsertBulk{
		create: nnfhcb,
	}
}

// NostrNotesFetchHistoryUpsertBulk is the builder for "upsert"-ing
// a bulk of NostrNotesFetchHistory nodes.
type NostrNotesFetchHistoryUpsertBulk struct {
	create *NostrNotesFetchHistoryCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.NostrNotesFetchHistory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(nostrnotesfetchhistory.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *NostrNotesFetchHistoryUpsertBulk) UpdateNewValues() *NostrNotesFetchHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(nostrnotesfetchhistory.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.NostrNotesFetchHistory.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *NostrNotesFetchHistoryUpsertBulk) Ignore() *NostrNotesFetchHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *NostrNotesFetchHistoryUpsertBulk) DoNothing() *NostrNotesFetchHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the NostrNotesFetchHistoryCreateBulk.OnConflict
// documentation for more info.
func (u *NostrNotesFetchHistoryUpsertBulk) Update(set func(*NostrNotesFetchHistoryUpsert)) *NostrNotesFetchHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&NostrNotesFetchHistoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetPublishAt sets the "publish_at" field.
func (u *NostrNotesFetchHistoryUpsertBulk) SetPublishAt(v time.Time) *NostrNotesFetchHistoryUpsertBulk {
	return u.Update(func(s *NostrNotesFetchHistoryUpsert) {
		s.SetPublishAt(v)
	})
}

// UpdatePublishAt sets the "publish_at" field to the value that was provided on create.
func (u *NostrNotesFetchHistoryUpsertBulk) UpdatePublishAt() *NostrNotesFetchHistoryUpsertBulk {
	return u.Update(func(s *NostrNotesFetchHistoryUpsert) {
		s.UpdatePublishAt()
	})
}

// SetPublicKeyHex sets the "public_key_hex" field.
func (u *NostrNotesFetchHistoryUpsertBulk) SetPublicKeyHex(v string) *NostrNotesFetchHistoryUpsertBulk {
	return u.Update(func(s *NostrNotesFetchHistoryUpsert) {
		s.SetPublicKeyHex(v)
	})
}

// UpdatePublicKeyHex sets the "public_key_hex" field to the value that was provided on create.
func (u *NostrNotesFetchHistoryUpsertBulk) UpdatePublicKeyHex() *NostrNotesFetchHistoryUpsertBulk {
	return u.Update(func(s *NostrNotesFetchHistoryUpsert) {
		s.UpdatePublicKeyHex()
	})
}

// SetContext sets the "context" field.
func (u *NostrNotesFetchHistoryUpsertBulk) SetContext(v string) *NostrNotesFetchHistoryUpsertBulk {
	return u.Update(func(s *NostrNotesFetchHistoryUpsert) {
		s.SetContext(v)
	})
}

// UpdateContext sets the "context" field to the value that was provided on create.
func (u *NostrNotesFetchHistoryUpsertBulk) UpdateContext() *NostrNotesFetchHistoryUpsertBulk {
	return u.Update(func(s *NostrNotesFetchHistoryUpsert) {
		s.UpdateContext()
	})
}

// Exec executes the query.
func (u *NostrNotesFetchHistoryUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("core: OnConflict was set for builder %d. Set it on the NostrNotesFetchHistoryCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("core: missing options for NostrNotesFetchHistoryCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *NostrNotesFetchHistoryUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
