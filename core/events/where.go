// Code generated by ent, DO NOT EDIT.

package events

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"freefrom.space/nobot/core/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Events {
	return predicate.Events(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Events {
	return predicate.Events(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Events {
	return predicate.Events(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Events {
	return predicate.Events(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Events {
	return predicate.Events(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Events {
	return predicate.Events(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Events {
	return predicate.Events(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Events {
	return predicate.Events(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Events {
	return predicate.Events(sql.FieldLTE(FieldID, id))
}

// EventID applies equality check predicate on the "event_id" field. It's identical to EventIDEQ.
func EventID(v []byte) predicate.Events {
	return predicate.Events(sql.FieldEQ(FieldEventID, v))
}

// Pubkey applies equality check predicate on the "pubkey" field. It's identical to PubkeyEQ.
func Pubkey(v []byte) predicate.Events {
	return predicate.Events(sql.FieldEQ(FieldPubkey, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Events {
	return predicate.Events(sql.FieldEQ(FieldCreatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Events {
	return predicate.Events(sql.FieldEQ(FieldDeletedAt, v))
}

// Kind applies equality check predicate on the "kind" field. It's identical to KindEQ.
func Kind(v int64) predicate.Events {
	return predicate.Events(sql.FieldEQ(FieldKind, v))
}

// Content applies equality check predicate on the "content" field. It's identical to ContentEQ.
func Content(v string) predicate.Events {
	return predicate.Events(sql.FieldEQ(FieldContent, v))
}

// Sig applies equality check predicate on the "sig" field. It's identical to SigEQ.
func Sig(v []byte) predicate.Events {
	return predicate.Events(sql.FieldEQ(FieldSig, v))
}

// EventIDEQ applies the EQ predicate on the "event_id" field.
func EventIDEQ(v []byte) predicate.Events {
	return predicate.Events(sql.FieldEQ(FieldEventID, v))
}

// EventIDNEQ applies the NEQ predicate on the "event_id" field.
func EventIDNEQ(v []byte) predicate.Events {
	return predicate.Events(sql.FieldNEQ(FieldEventID, v))
}

// EventIDIn applies the In predicate on the "event_id" field.
func EventIDIn(vs ...[]byte) predicate.Events {
	return predicate.Events(sql.FieldIn(FieldEventID, vs...))
}

// EventIDNotIn applies the NotIn predicate on the "event_id" field.
func EventIDNotIn(vs ...[]byte) predicate.Events {
	return predicate.Events(sql.FieldNotIn(FieldEventID, vs...))
}

// EventIDGT applies the GT predicate on the "event_id" field.
func EventIDGT(v []byte) predicate.Events {
	return predicate.Events(sql.FieldGT(FieldEventID, v))
}

// EventIDGTE applies the GTE predicate on the "event_id" field.
func EventIDGTE(v []byte) predicate.Events {
	return predicate.Events(sql.FieldGTE(FieldEventID, v))
}

// EventIDLT applies the LT predicate on the "event_id" field.
func EventIDLT(v []byte) predicate.Events {
	return predicate.Events(sql.FieldLT(FieldEventID, v))
}

// EventIDLTE applies the LTE predicate on the "event_id" field.
func EventIDLTE(v []byte) predicate.Events {
	return predicate.Events(sql.FieldLTE(FieldEventID, v))
}

// PubkeyEQ applies the EQ predicate on the "pubkey" field.
func PubkeyEQ(v []byte) predicate.Events {
	return predicate.Events(sql.FieldEQ(FieldPubkey, v))
}

// PubkeyNEQ applies the NEQ predicate on the "pubkey" field.
func PubkeyNEQ(v []byte) predicate.Events {
	return predicate.Events(sql.FieldNEQ(FieldPubkey, v))
}

// PubkeyIn applies the In predicate on the "pubkey" field.
func PubkeyIn(vs ...[]byte) predicate.Events {
	return predicate.Events(sql.FieldIn(FieldPubkey, vs...))
}

// PubkeyNotIn applies the NotIn predicate on the "pubkey" field.
func PubkeyNotIn(vs ...[]byte) predicate.Events {
	return predicate.Events(sql.FieldNotIn(FieldPubkey, vs...))
}

// PubkeyGT applies the GT predicate on the "pubkey" field.
func PubkeyGT(v []byte) predicate.Events {
	return predicate.Events(sql.FieldGT(FieldPubkey, v))
}

// PubkeyGTE applies the GTE predicate on the "pubkey" field.
func PubkeyGTE(v []byte) predicate.Events {
	return predicate.Events(sql.FieldGTE(FieldPubkey, v))
}

// PubkeyLT applies the LT predicate on the "pubkey" field.
func PubkeyLT(v []byte) predicate.Events {
	return predicate.Events(sql.FieldLT(FieldPubkey, v))
}

// PubkeyLTE applies the LTE predicate on the "pubkey" field.
func PubkeyLTE(v []byte) predicate.Events {
	return predicate.Events(sql.FieldLTE(FieldPubkey, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Events {
	return predicate.Events(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Events {
	return predicate.Events(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Events {
	return predicate.Events(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Events {
	return predicate.Events(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Events {
	return predicate.Events(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Events {
	return predicate.Events(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Events {
	return predicate.Events(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Events {
	return predicate.Events(sql.FieldLTE(FieldCreatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Events {
	return predicate.Events(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Events {
	return predicate.Events(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Events {
	return predicate.Events(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Events {
	return predicate.Events(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Events {
	return predicate.Events(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Events {
	return predicate.Events(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Events {
	return predicate.Events(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Events {
	return predicate.Events(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Events {
	return predicate.Events(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Events {
	return predicate.Events(sql.FieldNotNull(FieldDeletedAt))
}

// KindEQ applies the EQ predicate on the "kind" field.
func KindEQ(v int64) predicate.Events {
	return predicate.Events(sql.FieldEQ(FieldKind, v))
}

// KindNEQ applies the NEQ predicate on the "kind" field.
func KindNEQ(v int64) predicate.Events {
	return predicate.Events(sql.FieldNEQ(FieldKind, v))
}

// KindIn applies the In predicate on the "kind" field.
func KindIn(vs ...int64) predicate.Events {
	return predicate.Events(sql.FieldIn(FieldKind, vs...))
}

// KindNotIn applies the NotIn predicate on the "kind" field.
func KindNotIn(vs ...int64) predicate.Events {
	return predicate.Events(sql.FieldNotIn(FieldKind, vs...))
}

// KindGT applies the GT predicate on the "kind" field.
func KindGT(v int64) predicate.Events {
	return predicate.Events(sql.FieldGT(FieldKind, v))
}

// KindGTE applies the GTE predicate on the "kind" field.
func KindGTE(v int64) predicate.Events {
	return predicate.Events(sql.FieldGTE(FieldKind, v))
}

// KindLT applies the LT predicate on the "kind" field.
func KindLT(v int64) predicate.Events {
	return predicate.Events(sql.FieldLT(FieldKind, v))
}

// KindLTE applies the LTE predicate on the "kind" field.
func KindLTE(v int64) predicate.Events {
	return predicate.Events(sql.FieldLTE(FieldKind, v))
}

// ContentEQ applies the EQ predicate on the "content" field.
func ContentEQ(v string) predicate.Events {
	return predicate.Events(sql.FieldEQ(FieldContent, v))
}

// ContentNEQ applies the NEQ predicate on the "content" field.
func ContentNEQ(v string) predicate.Events {
	return predicate.Events(sql.FieldNEQ(FieldContent, v))
}

// ContentIn applies the In predicate on the "content" field.
func ContentIn(vs ...string) predicate.Events {
	return predicate.Events(sql.FieldIn(FieldContent, vs...))
}

// ContentNotIn applies the NotIn predicate on the "content" field.
func ContentNotIn(vs ...string) predicate.Events {
	return predicate.Events(sql.FieldNotIn(FieldContent, vs...))
}

// ContentGT applies the GT predicate on the "content" field.
func ContentGT(v string) predicate.Events {
	return predicate.Events(sql.FieldGT(FieldContent, v))
}

// ContentGTE applies the GTE predicate on the "content" field.
func ContentGTE(v string) predicate.Events {
	return predicate.Events(sql.FieldGTE(FieldContent, v))
}

// ContentLT applies the LT predicate on the "content" field.
func ContentLT(v string) predicate.Events {
	return predicate.Events(sql.FieldLT(FieldContent, v))
}

// ContentLTE applies the LTE predicate on the "content" field.
func ContentLTE(v string) predicate.Events {
	return predicate.Events(sql.FieldLTE(FieldContent, v))
}

// ContentContains applies the Contains predicate on the "content" field.
func ContentContains(v string) predicate.Events {
	return predicate.Events(sql.FieldContains(FieldContent, v))
}

// ContentHasPrefix applies the HasPrefix predicate on the "content" field.
func ContentHasPrefix(v string) predicate.Events {
	return predicate.Events(sql.FieldHasPrefix(FieldContent, v))
}

// ContentHasSuffix applies the HasSuffix predicate on the "content" field.
func ContentHasSuffix(v string) predicate.Events {
	return predicate.Events(sql.FieldHasSuffix(FieldContent, v))
}

// ContentEqualFold applies the EqualFold predicate on the "content" field.
func ContentEqualFold(v string) predicate.Events {
	return predicate.Events(sql.FieldEqualFold(FieldContent, v))
}

// ContentContainsFold applies the ContainsFold predicate on the "content" field.
func ContentContainsFold(v string) predicate.Events {
	return predicate.Events(sql.FieldContainsFold(FieldContent, v))
}

// SigEQ applies the EQ predicate on the "sig" field.
func SigEQ(v []byte) predicate.Events {
	return predicate.Events(sql.FieldEQ(FieldSig, v))
}

// SigNEQ applies the NEQ predicate on the "sig" field.
func SigNEQ(v []byte) predicate.Events {
	return predicate.Events(sql.FieldNEQ(FieldSig, v))
}

// SigIn applies the In predicate on the "sig" field.
func SigIn(vs ...[]byte) predicate.Events {
	return predicate.Events(sql.FieldIn(FieldSig, vs...))
}

// SigNotIn applies the NotIn predicate on the "sig" field.
func SigNotIn(vs ...[]byte) predicate.Events {
	return predicate.Events(sql.FieldNotIn(FieldSig, vs...))
}

// SigGT applies the GT predicate on the "sig" field.
func SigGT(v []byte) predicate.Events {
	return predicate.Events(sql.FieldGT(FieldSig, v))
}

// SigGTE applies the GTE predicate on the "sig" field.
func SigGTE(v []byte) predicate.Events {
	return predicate.Events(sql.FieldGTE(FieldSig, v))
}

// SigLT applies the LT predicate on the "sig" field.
func SigLT(v []byte) predicate.Events {
	return predicate.Events(sql.FieldLT(FieldSig, v))
}

// SigLTE applies the LTE predicate on the "sig" field.
func SigLTE(v []byte) predicate.Events {
	return predicate.Events(sql.FieldLTE(FieldSig, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Events) predicate.Events {
	return predicate.Events(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Events) predicate.Events {
	return predicate.Events(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Events) predicate.Events {
	return predicate.Events(sql.NotPredicates(p))
}
