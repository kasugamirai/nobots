// Code generated by ent, DO NOT EDIT.

package events

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the events type in the database.
	Label = "events"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldEventID holds the string denoting the event_id field in the database.
	FieldEventID = "event_id"
	// FieldPubkey holds the string denoting the pubkey field in the database.
	FieldPubkey = "pubkey"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldKind holds the string denoting the kind field in the database.
	FieldKind = "kind"
	// FieldTags holds the string denoting the tags field in the database.
	FieldTags = "tags"
	// FieldContent holds the string denoting the content field in the database.
	FieldContent = "content"
	// FieldSig holds the string denoting the sig field in the database.
	FieldSig = "sig"
	// Table holds the table name of the events in the database.
	Table = "events"
)

// Columns holds all SQL columns for events fields.
var Columns = []string{
	FieldID,
	FieldEventID,
	FieldPubkey,
	FieldCreatedAt,
	FieldDeletedAt,
	FieldKind,
	FieldTags,
	FieldContent,
	FieldSig,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultTags holds the default value on creation for the "tags" field.
	DefaultTags [][]string
	// DefaultContent holds the default value on creation for the "content" field.
	DefaultContent string
)

// OrderOption defines the ordering options for the Events queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByKind orders the results by the kind field.
func ByKind(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKind, opts...).ToFunc()
}

// ByContent orders the results by the content field.
func ByContent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContent, opts...).ToFunc()
}
