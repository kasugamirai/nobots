// Code generated by ent, DO NOT EDIT.

package core

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"freefrom.space/nobot/core/internal"
	"freefrom.space/nobot/core/predicate"
	"freefrom.space/nobot/core/twitternote"
)

// TwitterNoteDelete is the builder for deleting a TwitterNote entity.
type TwitterNoteDelete struct {
	config
	hooks    []Hook
	mutation *TwitterNoteMutation
}

// Where appends a list predicates to the TwitterNoteDelete builder.
func (tnd *TwitterNoteDelete) Where(ps ...predicate.TwitterNote) *TwitterNoteDelete {
	tnd.mutation.Where(ps...)
	return tnd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (tnd *TwitterNoteDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, tnd.sqlExec, tnd.mutation, tnd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (tnd *TwitterNoteDelete) ExecX(ctx context.Context) int {
	n, err := tnd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (tnd *TwitterNoteDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(twitternote.Table, sqlgraph.NewFieldSpec(twitternote.FieldID, field.TypeString))
	_spec.Node.Schema = tnd.schemaConfig.TwitterNote
	ctx = internal.NewSchemaConfigContext(ctx, tnd.schemaConfig)
	if ps := tnd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, tnd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	tnd.mutation.done = true
	return affected, err
}

// TwitterNoteDeleteOne is the builder for deleting a single TwitterNote entity.
type TwitterNoteDeleteOne struct {
	tnd *TwitterNoteDelete
}

// Where appends a list predicates to the TwitterNoteDelete builder.
func (tndo *TwitterNoteDeleteOne) Where(ps ...predicate.TwitterNote) *TwitterNoteDeleteOne {
	tndo.tnd.mutation.Where(ps...)
	return tndo
}

// Exec executes the deletion query.
func (tndo *TwitterNoteDeleteOne) Exec(ctx context.Context) error {
	n, err := tndo.tnd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{twitternote.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (tndo *TwitterNoteDeleteOne) ExecX(ctx context.Context) {
	if err := tndo.Exec(ctx); err != nil {
		panic(err)
	}
}
