// Code generated by ent, DO NOT EDIT.

package botevents

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"freefrom.space/nobot/core/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.BotEvents {
	return predicate.BotEvents(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.BotEvents {
	return predicate.BotEvents(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.BotEvents {
	return predicate.BotEvents(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.BotEvents {
	return predicate.BotEvents(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.BotEvents {
	return predicate.BotEvents(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.BotEvents {
	return predicate.BotEvents(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.BotEvents {
	return predicate.BotEvents(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.BotEvents {
	return predicate.BotEvents(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.BotEvents {
	return predicate.BotEvents(sql.FieldLTE(FieldID, id))
}

// EventID applies equality check predicate on the "event_id" field. It's identical to EventIDEQ.
func EventID(v string) predicate.BotEvents {
	return predicate.BotEvents(sql.FieldEQ(FieldEventID, v))
}

// InsertedAt applies equality check predicate on the "inserted_at" field. It's identical to InsertedAtEQ.
func InsertedAt(v time.Time) predicate.BotEvents {
	return predicate.BotEvents(sql.FieldEQ(FieldInsertedAt, v))
}

// EventIDEQ applies the EQ predicate on the "event_id" field.
func EventIDEQ(v string) predicate.BotEvents {
	return predicate.BotEvents(sql.FieldEQ(FieldEventID, v))
}

// EventIDNEQ applies the NEQ predicate on the "event_id" field.
func EventIDNEQ(v string) predicate.BotEvents {
	return predicate.BotEvents(sql.FieldNEQ(FieldEventID, v))
}

// EventIDIn applies the In predicate on the "event_id" field.
func EventIDIn(vs ...string) predicate.BotEvents {
	return predicate.BotEvents(sql.FieldIn(FieldEventID, vs...))
}

// EventIDNotIn applies the NotIn predicate on the "event_id" field.
func EventIDNotIn(vs ...string) predicate.BotEvents {
	return predicate.BotEvents(sql.FieldNotIn(FieldEventID, vs...))
}

// EventIDGT applies the GT predicate on the "event_id" field.
func EventIDGT(v string) predicate.BotEvents {
	return predicate.BotEvents(sql.FieldGT(FieldEventID, v))
}

// EventIDGTE applies the GTE predicate on the "event_id" field.
func EventIDGTE(v string) predicate.BotEvents {
	return predicate.BotEvents(sql.FieldGTE(FieldEventID, v))
}

// EventIDLT applies the LT predicate on the "event_id" field.
func EventIDLT(v string) predicate.BotEvents {
	return predicate.BotEvents(sql.FieldLT(FieldEventID, v))
}

// EventIDLTE applies the LTE predicate on the "event_id" field.
func EventIDLTE(v string) predicate.BotEvents {
	return predicate.BotEvents(sql.FieldLTE(FieldEventID, v))
}

// EventIDContains applies the Contains predicate on the "event_id" field.
func EventIDContains(v string) predicate.BotEvents {
	return predicate.BotEvents(sql.FieldContains(FieldEventID, v))
}

// EventIDHasPrefix applies the HasPrefix predicate on the "event_id" field.
func EventIDHasPrefix(v string) predicate.BotEvents {
	return predicate.BotEvents(sql.FieldHasPrefix(FieldEventID, v))
}

// EventIDHasSuffix applies the HasSuffix predicate on the "event_id" field.
func EventIDHasSuffix(v string) predicate.BotEvents {
	return predicate.BotEvents(sql.FieldHasSuffix(FieldEventID, v))
}

// EventIDEqualFold applies the EqualFold predicate on the "event_id" field.
func EventIDEqualFold(v string) predicate.BotEvents {
	return predicate.BotEvents(sql.FieldEqualFold(FieldEventID, v))
}

// EventIDContainsFold applies the ContainsFold predicate on the "event_id" field.
func EventIDContainsFold(v string) predicate.BotEvents {
	return predicate.BotEvents(sql.FieldContainsFold(FieldEventID, v))
}

// InsertedAtEQ applies the EQ predicate on the "inserted_at" field.
func InsertedAtEQ(v time.Time) predicate.BotEvents {
	return predicate.BotEvents(sql.FieldEQ(FieldInsertedAt, v))
}

// InsertedAtNEQ applies the NEQ predicate on the "inserted_at" field.
func InsertedAtNEQ(v time.Time) predicate.BotEvents {
	return predicate.BotEvents(sql.FieldNEQ(FieldInsertedAt, v))
}

// InsertedAtIn applies the In predicate on the "inserted_at" field.
func InsertedAtIn(vs ...time.Time) predicate.BotEvents {
	return predicate.BotEvents(sql.FieldIn(FieldInsertedAt, vs...))
}

// InsertedAtNotIn applies the NotIn predicate on the "inserted_at" field.
func InsertedAtNotIn(vs ...time.Time) predicate.BotEvents {
	return predicate.BotEvents(sql.FieldNotIn(FieldInsertedAt, vs...))
}

// InsertedAtGT applies the GT predicate on the "inserted_at" field.
func InsertedAtGT(v time.Time) predicate.BotEvents {
	return predicate.BotEvents(sql.FieldGT(FieldInsertedAt, v))
}

// InsertedAtGTE applies the GTE predicate on the "inserted_at" field.
func InsertedAtGTE(v time.Time) predicate.BotEvents {
	return predicate.BotEvents(sql.FieldGTE(FieldInsertedAt, v))
}

// InsertedAtLT applies the LT predicate on the "inserted_at" field.
func InsertedAtLT(v time.Time) predicate.BotEvents {
	return predicate.BotEvents(sql.FieldLT(FieldInsertedAt, v))
}

// InsertedAtLTE applies the LTE predicate on the "inserted_at" field.
func InsertedAtLTE(v time.Time) predicate.BotEvents {
	return predicate.BotEvents(sql.FieldLTE(FieldInsertedAt, v))
}

// InsertedAtIsNil applies the IsNil predicate on the "inserted_at" field.
func InsertedAtIsNil() predicate.BotEvents {
	return predicate.BotEvents(sql.FieldIsNull(FieldInsertedAt))
}

// InsertedAtNotNil applies the NotNil predicate on the "inserted_at" field.
func InsertedAtNotNil() predicate.BotEvents {
	return predicate.BotEvents(sql.FieldNotNull(FieldInsertedAt))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.BotEvents) predicate.BotEvents {
	return predicate.BotEvents(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.BotEvents) predicate.BotEvents {
	return predicate.BotEvents(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.BotEvents) predicate.BotEvents {
	return predicate.BotEvents(sql.NotPredicates(p))
}
