// Code generated by ent, DO NOT EDIT.

package privacy

import (
	"context"

	"freefrom.space/nobot/core"

	"entgo.io/ent/privacy"
)

var (
	// Allow may be returned by rules to indicate that the policy
	// evaluation should terminate with allow decision.
	Allow = privacy.Allow

	// Deny may be returned by rules to indicate that the policy
	// evaluation should terminate with deny decision.
	Deny = privacy.Deny

	// Skip may be returned by rules to indicate that the policy
	// evaluation should continue to the next rule.
	Skip = privacy.Skip
)

// Allowf returns a formatted wrapped Allow decision.
func Allowf(format string, a ...any) error {
	return privacy.Allowf(format, a...)
}

// Denyf returns a formatted wrapped Deny decision.
func Denyf(format string, a ...any) error {
	return privacy.Denyf(format, a...)
}

// Skipf returns a formatted wrapped Skip decision.
func Skipf(format string, a ...any) error {
	return privacy.Skipf(format, a...)
}

// DecisionContext creates a new context from the given parent context with
// a policy decision attach to it.
func DecisionContext(parent context.Context, decision error) context.Context {
	return privacy.DecisionContext(parent, decision)
}

// DecisionFromContext retrieves the policy decision from the context.
func DecisionFromContext(ctx context.Context) (error, bool) {
	return privacy.DecisionFromContext(ctx)
}

type (
	// Policy groups query and mutation policies.
	Policy = privacy.Policy

	// QueryRule defines the interface deciding whether a
	// query is allowed and optionally modify it.
	QueryRule = privacy.QueryRule
	// QueryPolicy combines multiple query rules into a single policy.
	QueryPolicy = privacy.QueryPolicy

	// MutationRule defines the interface which decides whether a
	// mutation is allowed and optionally modifies it.
	MutationRule = privacy.MutationRule
	// MutationPolicy combines multiple mutation rules into a single policy.
	MutationPolicy = privacy.MutationPolicy
	// MutationRuleFunc type is an adapter which allows the use of
	// ordinary functions as mutation rules.
	MutationRuleFunc = privacy.MutationRuleFunc

	// QueryMutationRule is an interface which groups query and mutation rules.
	QueryMutationRule = privacy.QueryMutationRule
)

// QueryRuleFunc type is an adapter to allow the use of
// ordinary functions as query rules.
type QueryRuleFunc func(context.Context, core.Query) error

// Eval returns f(ctx, q).
func (f QueryRuleFunc) EvalQuery(ctx context.Context, q core.Query) error {
	return f(ctx, q)
}

// AlwaysAllowRule returns a rule that returns an allow decision.
func AlwaysAllowRule() QueryMutationRule {
	return privacy.AlwaysAllowRule()
}

// AlwaysDenyRule returns a rule that returns a deny decision.
func AlwaysDenyRule() QueryMutationRule {
	return privacy.AlwaysDenyRule()
}

// ContextQueryMutationRule creates a query/mutation rule from a context eval func.
func ContextQueryMutationRule(eval func(context.Context) error) QueryMutationRule {
	return privacy.ContextQueryMutationRule(eval)
}

// OnMutationOperation evaluates the given rule only on a given mutation operation.
func OnMutationOperation(rule MutationRule, op core.Op) MutationRule {
	return privacy.OnMutationOperation(rule, op)
}

// DenyMutationOperationRule returns a rule denying specified mutation operation.
func DenyMutationOperationRule(op core.Op) MutationRule {
	rule := MutationRuleFunc(func(_ context.Context, m core.Mutation) error {
		return Denyf("core/privacy: operation %s is not allowed", m.Op())
	})
	return OnMutationOperation(rule, op)
}

// The BotEventsQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type BotEventsQueryRuleFunc func(context.Context, *core.BotEventsQuery) error

// EvalQuery return f(ctx, q).
func (f BotEventsQueryRuleFunc) EvalQuery(ctx context.Context, q core.Query) error {
	if q, ok := q.(*core.BotEventsQuery); ok {
		return f(ctx, q)
	}
	return Denyf("core/privacy: unexpected query type %T, expect *core.BotEventsQuery", q)
}

// The BotEventsMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type BotEventsMutationRuleFunc func(context.Context, *core.BotEventsMutation) error

// EvalMutation calls f(ctx, m).
func (f BotEventsMutationRuleFunc) EvalMutation(ctx context.Context, m core.Mutation) error {
	if m, ok := m.(*core.BotEventsMutation); ok {
		return f(ctx, m)
	}
	return Denyf("core/privacy: unexpected mutation type %T, expect *core.BotEventsMutation", m)
}

// The EventsQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type EventsQueryRuleFunc func(context.Context, *core.EventsQuery) error

// EvalQuery return f(ctx, q).
func (f EventsQueryRuleFunc) EvalQuery(ctx context.Context, q core.Query) error {
	if q, ok := q.(*core.EventsQuery); ok {
		return f(ctx, q)
	}
	return Denyf("core/privacy: unexpected query type %T, expect *core.EventsQuery", q)
}

// The EventsMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type EventsMutationRuleFunc func(context.Context, *core.EventsMutation) error

// EvalMutation calls f(ctx, m).
func (f EventsMutationRuleFunc) EvalMutation(ctx context.Context, m core.Mutation) error {
	if m, ok := m.(*core.EventsMutation); ok {
		return f(ctx, m)
	}
	return Denyf("core/privacy: unexpected mutation type %T, expect *core.EventsMutation", m)
}

// The NostrNotesFetchHistoryQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type NostrNotesFetchHistoryQueryRuleFunc func(context.Context, *core.NostrNotesFetchHistoryQuery) error

// EvalQuery return f(ctx, q).
func (f NostrNotesFetchHistoryQueryRuleFunc) EvalQuery(ctx context.Context, q core.Query) error {
	if q, ok := q.(*core.NostrNotesFetchHistoryQuery); ok {
		return f(ctx, q)
	}
	return Denyf("core/privacy: unexpected query type %T, expect *core.NostrNotesFetchHistoryQuery", q)
}

// The NostrNotesFetchHistoryMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type NostrNotesFetchHistoryMutationRuleFunc func(context.Context, *core.NostrNotesFetchHistoryMutation) error

// EvalMutation calls f(ctx, m).
func (f NostrNotesFetchHistoryMutationRuleFunc) EvalMutation(ctx context.Context, m core.Mutation) error {
	if m, ok := m.(*core.NostrNotesFetchHistoryMutation); ok {
		return f(ctx, m)
	}
	return Denyf("core/privacy: unexpected mutation type %T, expect *core.NostrNotesFetchHistoryMutation", m)
}

// The TwitterFetchHistoryQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type TwitterFetchHistoryQueryRuleFunc func(context.Context, *core.TwitterFetchHistoryQuery) error

// EvalQuery return f(ctx, q).
func (f TwitterFetchHistoryQueryRuleFunc) EvalQuery(ctx context.Context, q core.Query) error {
	if q, ok := q.(*core.TwitterFetchHistoryQuery); ok {
		return f(ctx, q)
	}
	return Denyf("core/privacy: unexpected query type %T, expect *core.TwitterFetchHistoryQuery", q)
}

// The TwitterFetchHistoryMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type TwitterFetchHistoryMutationRuleFunc func(context.Context, *core.TwitterFetchHistoryMutation) error

// EvalMutation calls f(ctx, m).
func (f TwitterFetchHistoryMutationRuleFunc) EvalMutation(ctx context.Context, m core.Mutation) error {
	if m, ok := m.(*core.TwitterFetchHistoryMutation); ok {
		return f(ctx, m)
	}
	return Denyf("core/privacy: unexpected mutation type %T, expect *core.TwitterFetchHistoryMutation", m)
}

// The TwitterNoteQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type TwitterNoteQueryRuleFunc func(context.Context, *core.TwitterNoteQuery) error

// EvalQuery return f(ctx, q).
func (f TwitterNoteQueryRuleFunc) EvalQuery(ctx context.Context, q core.Query) error {
	if q, ok := q.(*core.TwitterNoteQuery); ok {
		return f(ctx, q)
	}
	return Denyf("core/privacy: unexpected query type %T, expect *core.TwitterNoteQuery", q)
}

// The TwitterNoteMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type TwitterNoteMutationRuleFunc func(context.Context, *core.TwitterNoteMutation) error

// EvalMutation calls f(ctx, m).
func (f TwitterNoteMutationRuleFunc) EvalMutation(ctx context.Context, m core.Mutation) error {
	if m, ok := m.(*core.TwitterNoteMutation); ok {
		return f(ctx, m)
	}
	return Denyf("core/privacy: unexpected mutation type %T, expect *core.TwitterNoteMutation", m)
}

// The TwitterNotesFetchHistoryQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type TwitterNotesFetchHistoryQueryRuleFunc func(context.Context, *core.TwitterNotesFetchHistoryQuery) error

// EvalQuery return f(ctx, q).
func (f TwitterNotesFetchHistoryQueryRuleFunc) EvalQuery(ctx context.Context, q core.Query) error {
	if q, ok := q.(*core.TwitterNotesFetchHistoryQuery); ok {
		return f(ctx, q)
	}
	return Denyf("core/privacy: unexpected query type %T, expect *core.TwitterNotesFetchHistoryQuery", q)
}

// The TwitterNotesFetchHistoryMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type TwitterNotesFetchHistoryMutationRuleFunc func(context.Context, *core.TwitterNotesFetchHistoryMutation) error

// EvalMutation calls f(ctx, m).
func (f TwitterNotesFetchHistoryMutationRuleFunc) EvalMutation(ctx context.Context, m core.Mutation) error {
	if m, ok := m.(*core.TwitterNotesFetchHistoryMutation); ok {
		return f(ctx, m)
	}
	return Denyf("core/privacy: unexpected mutation type %T, expect *core.TwitterNotesFetchHistoryMutation", m)
}

// The TwitterProfileQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type TwitterProfileQueryRuleFunc func(context.Context, *core.TwitterProfileQuery) error

// EvalQuery return f(ctx, q).
func (f TwitterProfileQueryRuleFunc) EvalQuery(ctx context.Context, q core.Query) error {
	if q, ok := q.(*core.TwitterProfileQuery); ok {
		return f(ctx, q)
	}
	return Denyf("core/privacy: unexpected query type %T, expect *core.TwitterProfileQuery", q)
}

// The TwitterProfileMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type TwitterProfileMutationRuleFunc func(context.Context, *core.TwitterProfileMutation) error

// EvalMutation calls f(ctx, m).
func (f TwitterProfileMutationRuleFunc) EvalMutation(ctx context.Context, m core.Mutation) error {
	if m, ok := m.(*core.TwitterProfileMutation); ok {
		return f(ctx, m)
	}
	return Denyf("core/privacy: unexpected mutation type %T, expect *core.TwitterProfileMutation", m)
}
