// Code generated by ent, DO NOT EDIT.

package twitterprofile

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the twitterprofile type in the database.
	Label = "twitter_profile"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldUserName holds the string denoting the user_name field in the database.
	FieldUserName = "user_name"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldRawYaml holds the string denoting the raw_yaml field in the database.
	FieldRawYaml = "raw_yaml"
	// FieldActive holds the string denoting the active field in the database.
	FieldActive = "active"
	// FieldJoinedTime holds the string denoting the joined_time field in the database.
	FieldJoinedTime = "joined_time"
	// FieldLikesCount holds the string denoting the likes_count field in the database.
	FieldLikesCount = "likes_count"
	// FieldListedCount holds the string denoting the listed_count field in the database.
	FieldListedCount = "listed_count"
	// FieldFollowersCount holds the string denoting the followers_count field in the database.
	FieldFollowersCount = "followers_count"
	// FieldFollowingCount holds the string denoting the following_count field in the database.
	FieldFollowingCount = "following_count"
	// FieldFriendsCount holds the string denoting the friends_count field in the database.
	FieldFriendsCount = "friends_count"
	// FieldTwitterCount holds the string denoting the twitter_count field in the database.
	FieldTwitterCount = "twitter_count"
	// FieldPinnedNoteID holds the string denoting the pinned_note_id field in the database.
	FieldPinnedNoteID = "pinned_note_id"
	// FieldAvatar holds the string denoting the avatar field in the database.
	FieldAvatar = "avatar"
	// FieldBanner holds the string denoting the banner field in the database.
	FieldBanner = "banner"
	// FieldBiography holds the string denoting the biography field in the database.
	FieldBiography = "biography"
	// FieldBirthday holds the string denoting the birthday field in the database.
	FieldBirthday = "birthday"
	// FieldLocation holds the string denoting the location field in the database.
	FieldLocation = "location"
	// FieldURL holds the string denoting the url field in the database.
	FieldURL = "url"
	// FieldWebsite holds the string denoting the website field in the database.
	FieldWebsite = "website"
	// FieldNsecKey holds the string denoting the nsec_key field in the database.
	FieldNsecKey = "nsec_key"
	// FieldNpubKey holds the string denoting the npub_key field in the database.
	FieldNpubKey = "npub_key"
	// FieldPrivateKeyHex holds the string denoting the private_key_hex field in the database.
	FieldPrivateKeyHex = "private_key_hex"
	// FieldPublicKeyHex holds the string denoting the public_key_hex field in the database.
	FieldPublicKeyHex = "public_key_hex"
	// FieldPublishNostr holds the string denoting the publish_nostr field in the database.
	FieldPublishNostr = "publish_nostr"
	// Table holds the table name of the twitterprofile in the database.
	Table = "twitter_profiles"
)

// Columns holds all SQL columns for twitterprofile fields.
var Columns = []string{
	FieldID,
	FieldUserID,
	FieldUserName,
	FieldName,
	FieldRawYaml,
	FieldActive,
	FieldJoinedTime,
	FieldLikesCount,
	FieldListedCount,
	FieldFollowersCount,
	FieldFollowingCount,
	FieldFriendsCount,
	FieldTwitterCount,
	FieldPinnedNoteID,
	FieldAvatar,
	FieldBanner,
	FieldBiography,
	FieldBirthday,
	FieldLocation,
	FieldURL,
	FieldWebsite,
	FieldNsecKey,
	FieldNpubKey,
	FieldPrivateKeyHex,
	FieldPublicKeyHex,
	FieldPublishNostr,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultPublishNostr holds the default value on creation for the "publish_nostr" field.
	DefaultPublishNostr bool
)

// OrderOption defines the ordering options for the TwitterProfile queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByUserName orders the results by the user_name field.
func ByUserName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserName, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByRawYaml orders the results by the raw_yaml field.
func ByRawYaml(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRawYaml, opts...).ToFunc()
}

// ByActive orders the results by the active field.
func ByActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActive, opts...).ToFunc()
}

// ByJoinedTime orders the results by the joined_time field.
func ByJoinedTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldJoinedTime, opts...).ToFunc()
}

// ByLikesCount orders the results by the likes_count field.
func ByLikesCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLikesCount, opts...).ToFunc()
}

// ByListedCount orders the results by the listed_count field.
func ByListedCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldListedCount, opts...).ToFunc()
}

// ByFollowersCount orders the results by the followers_count field.
func ByFollowersCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFollowersCount, opts...).ToFunc()
}

// ByFollowingCount orders the results by the following_count field.
func ByFollowingCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFollowingCount, opts...).ToFunc()
}

// ByFriendsCount orders the results by the friends_count field.
func ByFriendsCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFriendsCount, opts...).ToFunc()
}

// ByTwitterCount orders the results by the twitter_count field.
func ByTwitterCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTwitterCount, opts...).ToFunc()
}

// ByPinnedNoteID orders the results by the pinned_note_id field.
func ByPinnedNoteID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPinnedNoteID, opts...).ToFunc()
}

// ByAvatar orders the results by the avatar field.
func ByAvatar(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAvatar, opts...).ToFunc()
}

// ByBanner orders the results by the banner field.
func ByBanner(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBanner, opts...).ToFunc()
}

// ByBiography orders the results by the biography field.
func ByBiography(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBiography, opts...).ToFunc()
}

// ByBirthday orders the results by the birthday field.
func ByBirthday(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBirthday, opts...).ToFunc()
}

// ByLocation orders the results by the location field.
func ByLocation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocation, opts...).ToFunc()
}

// ByURL orders the results by the url field.
func ByURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldURL, opts...).ToFunc()
}

// ByWebsite orders the results by the website field.
func ByWebsite(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWebsite, opts...).ToFunc()
}

// ByNsecKey orders the results by the nsec_key field.
func ByNsecKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNsecKey, opts...).ToFunc()
}

// ByNpubKey orders the results by the npub_key field.
func ByNpubKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNpubKey, opts...).ToFunc()
}

// ByPrivateKeyHex orders the results by the private_key_hex field.
func ByPrivateKeyHex(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrivateKeyHex, opts...).ToFunc()
}

// ByPublicKeyHex orders the results by the public_key_hex field.
func ByPublicKeyHex(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPublicKeyHex, opts...).ToFunc()
}

// ByPublishNostr orders the results by the publish_nostr field.
func ByPublishNostr(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPublishNostr, opts...).ToFunc()
}
