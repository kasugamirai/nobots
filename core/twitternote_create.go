// Code generated by ent, DO NOT EDIT.

package core

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"freefrom.space/nobot/core/twitternote"
)

// TwitterNoteCreate is the builder for creating a TwitterNote entity.
type TwitterNoteCreate struct {
	config
	mutation *TwitterNoteMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetUserID sets the "user_id" field.
func (tnc *TwitterNoteCreate) SetUserID(s string) *TwitterNoteCreate {
	tnc.mutation.SetUserID(s)
	return tnc
}

// SetUserName sets the "user_name" field.
func (tnc *TwitterNoteCreate) SetUserName(s string) *TwitterNoteCreate {
	tnc.mutation.SetUserName(s)
	return tnc
}

// SetConversationID sets the "conversation_id" field.
func (tnc *TwitterNoteCreate) SetConversationID(s string) *TwitterNoteCreate {
	tnc.mutation.SetConversationID(s)
	return tnc
}

// SetText sets the "text" field.
func (tnc *TwitterNoteCreate) SetText(s string) *TwitterNoteCreate {
	tnc.mutation.SetText(s)
	return tnc
}

// SetLikes sets the "likes" field.
func (tnc *TwitterNoteCreate) SetLikes(i int) *TwitterNoteCreate {
	tnc.mutation.SetLikes(i)
	return tnc
}

// SetReplies sets the "replies" field.
func (tnc *TwitterNoteCreate) SetReplies(i int) *TwitterNoteCreate {
	tnc.mutation.SetReplies(i)
	return tnc
}

// SetRetweets sets the "retweets" field.
func (tnc *TwitterNoteCreate) SetRetweets(i int) *TwitterNoteCreate {
	tnc.mutation.SetRetweets(i)
	return tnc
}

// SetViews sets the "views" field.
func (tnc *TwitterNoteCreate) SetViews(i int) *TwitterNoteCreate {
	tnc.mutation.SetViews(i)
	return tnc
}

// SetPhotoIds sets the "photo_ids" field.
func (tnc *TwitterNoteCreate) SetPhotoIds(s []string) *TwitterNoteCreate {
	tnc.mutation.SetPhotoIds(s)
	return tnc
}

// SetPhotoUrls sets the "photo_urls" field.
func (tnc *TwitterNoteCreate) SetPhotoUrls(s []string) *TwitterNoteCreate {
	tnc.mutation.SetPhotoUrls(s)
	return tnc
}

// SetVideoID sets the "video_id" field.
func (tnc *TwitterNoteCreate) SetVideoID(s []string) *TwitterNoteCreate {
	tnc.mutation.SetVideoID(s)
	return tnc
}

// SetVideoPreview sets the "video_preview" field.
func (tnc *TwitterNoteCreate) SetVideoPreview(s []string) *TwitterNoteCreate {
	tnc.mutation.SetVideoPreview(s)
	return tnc
}

// SetVideoUrls sets the "video_urls" field.
func (tnc *TwitterNoteCreate) SetVideoUrls(s []string) *TwitterNoteCreate {
	tnc.mutation.SetVideoUrls(s)
	return tnc
}

// SetMentionID sets the "mention_id" field.
func (tnc *TwitterNoteCreate) SetMentionID(s []string) *TwitterNoteCreate {
	tnc.mutation.SetMentionID(s)
	return tnc
}

// SetMentionUsername sets the "mention_username" field.
func (tnc *TwitterNoteCreate) SetMentionUsername(s []string) *TwitterNoteCreate {
	tnc.mutation.SetMentionUsername(s)
	return tnc
}

// SetMentionName sets the "mention_name" field.
func (tnc *TwitterNoteCreate) SetMentionName(s []string) *TwitterNoteCreate {
	tnc.mutation.SetMentionName(s)
	return tnc
}

// SetRetweetedStatusID sets the "retweeted_status_id" field.
func (tnc *TwitterNoteCreate) SetRetweetedStatusID(s string) *TwitterNoteCreate {
	tnc.mutation.SetRetweetedStatusID(s)
	return tnc
}

// SetNillableRetweetedStatusID sets the "retweeted_status_id" field if the given value is not nil.
func (tnc *TwitterNoteCreate) SetNillableRetweetedStatusID(s *string) *TwitterNoteCreate {
	if s != nil {
		tnc.SetRetweetedStatusID(*s)
	}
	return tnc
}

// SetIsRetweet sets the "is_retweet" field.
func (tnc *TwitterNoteCreate) SetIsRetweet(b bool) *TwitterNoteCreate {
	tnc.mutation.SetIsRetweet(b)
	return tnc
}

// SetNillableIsRetweet sets the "is_retweet" field if the given value is not nil.
func (tnc *TwitterNoteCreate) SetNillableIsRetweet(b *bool) *TwitterNoteCreate {
	if b != nil {
		tnc.SetIsRetweet(*b)
	}
	return tnc
}

// SetPostAt sets the "post_at" field.
func (tnc *TwitterNoteCreate) SetPostAt(t time.Time) *TwitterNoteCreate {
	tnc.mutation.SetPostAt(t)
	return tnc
}

// SetNillablePostAt sets the "post_at" field if the given value is not nil.
func (tnc *TwitterNoteCreate) SetNillablePostAt(t *time.Time) *TwitterNoteCreate {
	if t != nil {
		tnc.SetPostAt(*t)
	}
	return tnc
}

// SetUrls sets the "urls" field.
func (tnc *TwitterNoteCreate) SetUrls(s []string) *TwitterNoteCreate {
	tnc.mutation.SetUrls(s)
	return tnc
}

// SetHTMLText sets the "html_text" field.
func (tnc *TwitterNoteCreate) SetHTMLText(s string) *TwitterNoteCreate {
	tnc.mutation.SetHTMLText(s)
	return tnc
}

// SetNillableHTMLText sets the "html_text" field if the given value is not nil.
func (tnc *TwitterNoteCreate) SetNillableHTMLText(s *string) *TwitterNoteCreate {
	if s != nil {
		tnc.SetHTMLText(*s)
	}
	return tnc
}

// SetPermanentURL sets the "permanent_url" field.
func (tnc *TwitterNoteCreate) SetPermanentURL(s string) *TwitterNoteCreate {
	tnc.mutation.SetPermanentURL(s)
	return tnc
}

// SetNillablePermanentURL sets the "permanent_url" field if the given value is not nil.
func (tnc *TwitterNoteCreate) SetNillablePermanentURL(s *string) *TwitterNoteCreate {
	if s != nil {
		tnc.SetPermanentURL(*s)
	}
	return tnc
}

// SetIsReply sets the "is_reply" field.
func (tnc *TwitterNoteCreate) SetIsReply(b bool) *TwitterNoteCreate {
	tnc.mutation.SetIsReply(b)
	return tnc
}

// SetNillableIsReply sets the "is_reply" field if the given value is not nil.
func (tnc *TwitterNoteCreate) SetNillableIsReply(b *bool) *TwitterNoteCreate {
	if b != nil {
		tnc.SetIsReply(*b)
	}
	return tnc
}

// SetIsPin sets the "is_pin" field.
func (tnc *TwitterNoteCreate) SetIsPin(b bool) *TwitterNoteCreate {
	tnc.mutation.SetIsPin(b)
	return tnc
}

// SetNillableIsPin sets the "is_pin" field if the given value is not nil.
func (tnc *TwitterNoteCreate) SetNillableIsPin(b *bool) *TwitterNoteCreate {
	if b != nil {
		tnc.SetIsPin(*b)
	}
	return tnc
}

// SetSensitiveContent sets the "sensitive_content" field.
func (tnc *TwitterNoteCreate) SetSensitiveContent(b bool) *TwitterNoteCreate {
	tnc.mutation.SetSensitiveContent(b)
	return tnc
}

// SetNillableSensitiveContent sets the "sensitive_content" field if the given value is not nil.
func (tnc *TwitterNoteCreate) SetNillableSensitiveContent(b *bool) *TwitterNoteCreate {
	if b != nil {
		tnc.SetSensitiveContent(*b)
	}
	return tnc
}

// SetReplyTo sets the "reply_to" field.
func (tnc *TwitterNoteCreate) SetReplyTo(s string) *TwitterNoteCreate {
	tnc.mutation.SetReplyTo(s)
	return tnc
}

// SetNillableReplyTo sets the "reply_to" field if the given value is not nil.
func (tnc *TwitterNoteCreate) SetNillableReplyTo(s *string) *TwitterNoteCreate {
	if s != nil {
		tnc.SetReplyTo(*s)
	}
	return tnc
}

// SetRawYaml sets the "raw_yaml" field.
func (tnc *TwitterNoteCreate) SetRawYaml(s string) *TwitterNoteCreate {
	tnc.mutation.SetRawYaml(s)
	return tnc
}

// SetHashTags sets the "hash_tags" field.
func (tnc *TwitterNoteCreate) SetHashTags(s []string) *TwitterNoteCreate {
	tnc.mutation.SetHashTags(s)
	return tnc
}

// SetEvent sets the "event" field.
func (tnc *TwitterNoteCreate) SetEvent(s string) *TwitterNoteCreate {
	tnc.mutation.SetEvent(s)
	return tnc
}

// SetNillableEvent sets the "event" field if the given value is not nil.
func (tnc *TwitterNoteCreate) SetNillableEvent(s *string) *TwitterNoteCreate {
	if s != nil {
		tnc.SetEvent(*s)
	}
	return tnc
}

// SetEventID sets the "event_id" field.
func (tnc *TwitterNoteCreate) SetEventID(s string) *TwitterNoteCreate {
	tnc.mutation.SetEventID(s)
	return tnc
}

// SetNillableEventID sets the "event_id" field if the given value is not nil.
func (tnc *TwitterNoteCreate) SetNillableEventID(s *string) *TwitterNoteCreate {
	if s != nil {
		tnc.SetEventID(*s)
	}
	return tnc
}

// SetPublishStatus sets the "publish_status" field.
func (tnc *TwitterNoteCreate) SetPublishStatus(s string) *TwitterNoteCreate {
	tnc.mutation.SetPublishStatus(s)
	return tnc
}

// SetNillablePublishStatus sets the "publish_status" field if the given value is not nil.
func (tnc *TwitterNoteCreate) SetNillablePublishStatus(s *string) *TwitterNoteCreate {
	if s != nil {
		tnc.SetPublishStatus(*s)
	}
	return tnc
}

// SetPublishedAt sets the "published_at" field.
func (tnc *TwitterNoteCreate) SetPublishedAt(t time.Time) *TwitterNoteCreate {
	tnc.mutation.SetPublishedAt(t)
	return tnc
}

// SetNillablePublishedAt sets the "published_at" field if the given value is not nil.
func (tnc *TwitterNoteCreate) SetNillablePublishedAt(t *time.Time) *TwitterNoteCreate {
	if t != nil {
		tnc.SetPublishedAt(*t)
	}
	return tnc
}

// SetFetchedAt sets the "fetched_at" field.
func (tnc *TwitterNoteCreate) SetFetchedAt(t time.Time) *TwitterNoteCreate {
	tnc.mutation.SetFetchedAt(t)
	return tnc
}

// SetNillableFetchedAt sets the "fetched_at" field if the given value is not nil.
func (tnc *TwitterNoteCreate) SetNillableFetchedAt(t *time.Time) *TwitterNoteCreate {
	if t != nil {
		tnc.SetFetchedAt(*t)
	}
	return tnc
}

// SetLanguage sets the "language" field.
func (tnc *TwitterNoteCreate) SetLanguage(s string) *TwitterNoteCreate {
	tnc.mutation.SetLanguage(s)
	return tnc
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (tnc *TwitterNoteCreate) SetNillableLanguage(s *string) *TwitterNoteCreate {
	if s != nil {
		tnc.SetLanguage(*s)
	}
	return tnc
}

// SetID sets the "id" field.
func (tnc *TwitterNoteCreate) SetID(s string) *TwitterNoteCreate {
	tnc.mutation.SetID(s)
	return tnc
}

// Mutation returns the TwitterNoteMutation object of the builder.
func (tnc *TwitterNoteCreate) Mutation() *TwitterNoteMutation {
	return tnc.mutation
}

// Save creates the TwitterNote in the database.
func (tnc *TwitterNoteCreate) Save(ctx context.Context) (*TwitterNote, error) {
	tnc.defaults()
	return withHooks(ctx, tnc.sqlSave, tnc.mutation, tnc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tnc *TwitterNoteCreate) SaveX(ctx context.Context) *TwitterNote {
	v, err := tnc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tnc *TwitterNoteCreate) Exec(ctx context.Context) error {
	_, err := tnc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tnc *TwitterNoteCreate) ExecX(ctx context.Context) {
	if err := tnc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tnc *TwitterNoteCreate) defaults() {
	if _, ok := tnc.mutation.Language(); !ok {
		v := twitternote.DefaultLanguage
		tnc.mutation.SetLanguage(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tnc *TwitterNoteCreate) check() error {
	if _, ok := tnc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`core: missing required field "TwitterNote.user_id"`)}
	}
	if _, ok := tnc.mutation.UserName(); !ok {
		return &ValidationError{Name: "user_name", err: errors.New(`core: missing required field "TwitterNote.user_name"`)}
	}
	if _, ok := tnc.mutation.ConversationID(); !ok {
		return &ValidationError{Name: "conversation_id", err: errors.New(`core: missing required field "TwitterNote.conversation_id"`)}
	}
	if _, ok := tnc.mutation.Text(); !ok {
		return &ValidationError{Name: "text", err: errors.New(`core: missing required field "TwitterNote.text"`)}
	}
	if _, ok := tnc.mutation.Likes(); !ok {
		return &ValidationError{Name: "likes", err: errors.New(`core: missing required field "TwitterNote.likes"`)}
	}
	if _, ok := tnc.mutation.Replies(); !ok {
		return &ValidationError{Name: "replies", err: errors.New(`core: missing required field "TwitterNote.replies"`)}
	}
	if _, ok := tnc.mutation.Retweets(); !ok {
		return &ValidationError{Name: "retweets", err: errors.New(`core: missing required field "TwitterNote.retweets"`)}
	}
	if _, ok := tnc.mutation.Views(); !ok {
		return &ValidationError{Name: "views", err: errors.New(`core: missing required field "TwitterNote.views"`)}
	}
	if _, ok := tnc.mutation.RawYaml(); !ok {
		return &ValidationError{Name: "raw_yaml", err: errors.New(`core: missing required field "TwitterNote.raw_yaml"`)}
	}
	if _, ok := tnc.mutation.HashTags(); !ok {
		return &ValidationError{Name: "hash_tags", err: errors.New(`core: missing required field "TwitterNote.hash_tags"`)}
	}
	if _, ok := tnc.mutation.Language(); !ok {
		return &ValidationError{Name: "language", err: errors.New(`core: missing required field "TwitterNote.language"`)}
	}
	return nil
}

func (tnc *TwitterNoteCreate) sqlSave(ctx context.Context) (*TwitterNote, error) {
	if err := tnc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tnc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tnc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected TwitterNote.ID type: %T", _spec.ID.Value)
		}
	}
	tnc.mutation.id = &_node.ID
	tnc.mutation.done = true
	return _node, nil
}

func (tnc *TwitterNoteCreate) createSpec() (*TwitterNote, *sqlgraph.CreateSpec) {
	var (
		_node = &TwitterNote{config: tnc.config}
		_spec = sqlgraph.NewCreateSpec(twitternote.Table, sqlgraph.NewFieldSpec(twitternote.FieldID, field.TypeString))
	)
	_spec.Schema = tnc.schemaConfig.TwitterNote
	_spec.OnConflict = tnc.conflict
	if id, ok := tnc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tnc.mutation.UserID(); ok {
		_spec.SetField(twitternote.FieldUserID, field.TypeString, value)
		_node.UserID = value
	}
	if value, ok := tnc.mutation.UserName(); ok {
		_spec.SetField(twitternote.FieldUserName, field.TypeString, value)
		_node.UserName = value
	}
	if value, ok := tnc.mutation.ConversationID(); ok {
		_spec.SetField(twitternote.FieldConversationID, field.TypeString, value)
		_node.ConversationID = value
	}
	if value, ok := tnc.mutation.Text(); ok {
		_spec.SetField(twitternote.FieldText, field.TypeString, value)
		_node.Text = value
	}
	if value, ok := tnc.mutation.Likes(); ok {
		_spec.SetField(twitternote.FieldLikes, field.TypeInt, value)
		_node.Likes = value
	}
	if value, ok := tnc.mutation.Replies(); ok {
		_spec.SetField(twitternote.FieldReplies, field.TypeInt, value)
		_node.Replies = value
	}
	if value, ok := tnc.mutation.Retweets(); ok {
		_spec.SetField(twitternote.FieldRetweets, field.TypeInt, value)
		_node.Retweets = value
	}
	if value, ok := tnc.mutation.Views(); ok {
		_spec.SetField(twitternote.FieldViews, field.TypeInt, value)
		_node.Views = value
	}
	if value, ok := tnc.mutation.PhotoIds(); ok {
		_spec.SetField(twitternote.FieldPhotoIds, field.TypeJSON, value)
		_node.PhotoIds = value
	}
	if value, ok := tnc.mutation.PhotoUrls(); ok {
		_spec.SetField(twitternote.FieldPhotoUrls, field.TypeJSON, value)
		_node.PhotoUrls = value
	}
	if value, ok := tnc.mutation.VideoID(); ok {
		_spec.SetField(twitternote.FieldVideoID, field.TypeJSON, value)
		_node.VideoID = value
	}
	if value, ok := tnc.mutation.VideoPreview(); ok {
		_spec.SetField(twitternote.FieldVideoPreview, field.TypeJSON, value)
		_node.VideoPreview = value
	}
	if value, ok := tnc.mutation.VideoUrls(); ok {
		_spec.SetField(twitternote.FieldVideoUrls, field.TypeJSON, value)
		_node.VideoUrls = value
	}
	if value, ok := tnc.mutation.MentionID(); ok {
		_spec.SetField(twitternote.FieldMentionID, field.TypeJSON, value)
		_node.MentionID = value
	}
	if value, ok := tnc.mutation.MentionUsername(); ok {
		_spec.SetField(twitternote.FieldMentionUsername, field.TypeJSON, value)
		_node.MentionUsername = value
	}
	if value, ok := tnc.mutation.MentionName(); ok {
		_spec.SetField(twitternote.FieldMentionName, field.TypeJSON, value)
		_node.MentionName = value
	}
	if value, ok := tnc.mutation.RetweetedStatusID(); ok {
		_spec.SetField(twitternote.FieldRetweetedStatusID, field.TypeString, value)
		_node.RetweetedStatusID = value
	}
	if value, ok := tnc.mutation.IsRetweet(); ok {
		_spec.SetField(twitternote.FieldIsRetweet, field.TypeBool, value)
		_node.IsRetweet = value
	}
	if value, ok := tnc.mutation.PostAt(); ok {
		_spec.SetField(twitternote.FieldPostAt, field.TypeTime, value)
		_node.PostAt = value
	}
	if value, ok := tnc.mutation.Urls(); ok {
		_spec.SetField(twitternote.FieldUrls, field.TypeJSON, value)
		_node.Urls = value
	}
	if value, ok := tnc.mutation.HTMLText(); ok {
		_spec.SetField(twitternote.FieldHTMLText, field.TypeString, value)
		_node.HTMLText = value
	}
	if value, ok := tnc.mutation.PermanentURL(); ok {
		_spec.SetField(twitternote.FieldPermanentURL, field.TypeString, value)
		_node.PermanentURL = value
	}
	if value, ok := tnc.mutation.IsReply(); ok {
		_spec.SetField(twitternote.FieldIsReply, field.TypeBool, value)
		_node.IsReply = value
	}
	if value, ok := tnc.mutation.IsPin(); ok {
		_spec.SetField(twitternote.FieldIsPin, field.TypeBool, value)
		_node.IsPin = value
	}
	if value, ok := tnc.mutation.SensitiveContent(); ok {
		_spec.SetField(twitternote.FieldSensitiveContent, field.TypeBool, value)
		_node.SensitiveContent = value
	}
	if value, ok := tnc.mutation.ReplyTo(); ok {
		_spec.SetField(twitternote.FieldReplyTo, field.TypeString, value)
		_node.ReplyTo = value
	}
	if value, ok := tnc.mutation.RawYaml(); ok {
		_spec.SetField(twitternote.FieldRawYaml, field.TypeString, value)
		_node.RawYaml = value
	}
	if value, ok := tnc.mutation.HashTags(); ok {
		_spec.SetField(twitternote.FieldHashTags, field.TypeJSON, value)
		_node.HashTags = value
	}
	if value, ok := tnc.mutation.Event(); ok {
		_spec.SetField(twitternote.FieldEvent, field.TypeString, value)
		_node.Event = value
	}
	if value, ok := tnc.mutation.EventID(); ok {
		_spec.SetField(twitternote.FieldEventID, field.TypeString, value)
		_node.EventID = value
	}
	if value, ok := tnc.mutation.PublishStatus(); ok {
		_spec.SetField(twitternote.FieldPublishStatus, field.TypeString, value)
		_node.PublishStatus = value
	}
	if value, ok := tnc.mutation.PublishedAt(); ok {
		_spec.SetField(twitternote.FieldPublishedAt, field.TypeTime, value)
		_node.PublishedAt = value
	}
	if value, ok := tnc.mutation.FetchedAt(); ok {
		_spec.SetField(twitternote.FieldFetchedAt, field.TypeTime, value)
		_node.FetchedAt = value
	}
	if value, ok := tnc.mutation.Language(); ok {
		_spec.SetField(twitternote.FieldLanguage, field.TypeString, value)
		_node.Language = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TwitterNote.Create().
//		SetUserID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TwitterNoteUpsert) {
//			SetUserID(v+v).
//		}).
//		Exec(ctx)
func (tnc *TwitterNoteCreate) OnConflict(opts ...sql.ConflictOption) *TwitterNoteUpsertOne {
	tnc.conflict = opts
	return &TwitterNoteUpsertOne{
		create: tnc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TwitterNote.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tnc *TwitterNoteCreate) OnConflictColumns(columns ...string) *TwitterNoteUpsertOne {
	tnc.conflict = append(tnc.conflict, sql.ConflictColumns(columns...))
	return &TwitterNoteUpsertOne{
		create: tnc,
	}
}

type (
	// TwitterNoteUpsertOne is the builder for "upsert"-ing
	//  one TwitterNote node.
	TwitterNoteUpsertOne struct {
		create *TwitterNoteCreate
	}

	// TwitterNoteUpsert is the "OnConflict" setter.
	TwitterNoteUpsert struct {
		*sql.UpdateSet
	}
)

// SetUserID sets the "user_id" field.
func (u *TwitterNoteUpsert) SetUserID(v string) *TwitterNoteUpsert {
	u.Set(twitternote.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *TwitterNoteUpsert) UpdateUserID() *TwitterNoteUpsert {
	u.SetExcluded(twitternote.FieldUserID)
	return u
}

// SetUserName sets the "user_name" field.
func (u *TwitterNoteUpsert) SetUserName(v string) *TwitterNoteUpsert {
	u.Set(twitternote.FieldUserName, v)
	return u
}

// UpdateUserName sets the "user_name" field to the value that was provided on create.
func (u *TwitterNoteUpsert) UpdateUserName() *TwitterNoteUpsert {
	u.SetExcluded(twitternote.FieldUserName)
	return u
}

// SetConversationID sets the "conversation_id" field.
func (u *TwitterNoteUpsert) SetConversationID(v string) *TwitterNoteUpsert {
	u.Set(twitternote.FieldConversationID, v)
	return u
}

// UpdateConversationID sets the "conversation_id" field to the value that was provided on create.
func (u *TwitterNoteUpsert) UpdateConversationID() *TwitterNoteUpsert {
	u.SetExcluded(twitternote.FieldConversationID)
	return u
}

// SetText sets the "text" field.
func (u *TwitterNoteUpsert) SetText(v string) *TwitterNoteUpsert {
	u.Set(twitternote.FieldText, v)
	return u
}

// UpdateText sets the "text" field to the value that was provided on create.
func (u *TwitterNoteUpsert) UpdateText() *TwitterNoteUpsert {
	u.SetExcluded(twitternote.FieldText)
	return u
}

// SetLikes sets the "likes" field.
func (u *TwitterNoteUpsert) SetLikes(v int) *TwitterNoteUpsert {
	u.Set(twitternote.FieldLikes, v)
	return u
}

// UpdateLikes sets the "likes" field to the value that was provided on create.
func (u *TwitterNoteUpsert) UpdateLikes() *TwitterNoteUpsert {
	u.SetExcluded(twitternote.FieldLikes)
	return u
}

// AddLikes adds v to the "likes" field.
func (u *TwitterNoteUpsert) AddLikes(v int) *TwitterNoteUpsert {
	u.Add(twitternote.FieldLikes, v)
	return u
}

// SetReplies sets the "replies" field.
func (u *TwitterNoteUpsert) SetReplies(v int) *TwitterNoteUpsert {
	u.Set(twitternote.FieldReplies, v)
	return u
}

// UpdateReplies sets the "replies" field to the value that was provided on create.
func (u *TwitterNoteUpsert) UpdateReplies() *TwitterNoteUpsert {
	u.SetExcluded(twitternote.FieldReplies)
	return u
}

// AddReplies adds v to the "replies" field.
func (u *TwitterNoteUpsert) AddReplies(v int) *TwitterNoteUpsert {
	u.Add(twitternote.FieldReplies, v)
	return u
}

// SetRetweets sets the "retweets" field.
func (u *TwitterNoteUpsert) SetRetweets(v int) *TwitterNoteUpsert {
	u.Set(twitternote.FieldRetweets, v)
	return u
}

// UpdateRetweets sets the "retweets" field to the value that was provided on create.
func (u *TwitterNoteUpsert) UpdateRetweets() *TwitterNoteUpsert {
	u.SetExcluded(twitternote.FieldRetweets)
	return u
}

// AddRetweets adds v to the "retweets" field.
func (u *TwitterNoteUpsert) AddRetweets(v int) *TwitterNoteUpsert {
	u.Add(twitternote.FieldRetweets, v)
	return u
}

// SetViews sets the "views" field.
func (u *TwitterNoteUpsert) SetViews(v int) *TwitterNoteUpsert {
	u.Set(twitternote.FieldViews, v)
	return u
}

// UpdateViews sets the "views" field to the value that was provided on create.
func (u *TwitterNoteUpsert) UpdateViews() *TwitterNoteUpsert {
	u.SetExcluded(twitternote.FieldViews)
	return u
}

// AddViews adds v to the "views" field.
func (u *TwitterNoteUpsert) AddViews(v int) *TwitterNoteUpsert {
	u.Add(twitternote.FieldViews, v)
	return u
}

// SetPhotoIds sets the "photo_ids" field.
func (u *TwitterNoteUpsert) SetPhotoIds(v []string) *TwitterNoteUpsert {
	u.Set(twitternote.FieldPhotoIds, v)
	return u
}

// UpdatePhotoIds sets the "photo_ids" field to the value that was provided on create.
func (u *TwitterNoteUpsert) UpdatePhotoIds() *TwitterNoteUpsert {
	u.SetExcluded(twitternote.FieldPhotoIds)
	return u
}

// ClearPhotoIds clears the value of the "photo_ids" field.
func (u *TwitterNoteUpsert) ClearPhotoIds() *TwitterNoteUpsert {
	u.SetNull(twitternote.FieldPhotoIds)
	return u
}

// SetPhotoUrls sets the "photo_urls" field.
func (u *TwitterNoteUpsert) SetPhotoUrls(v []string) *TwitterNoteUpsert {
	u.Set(twitternote.FieldPhotoUrls, v)
	return u
}

// UpdatePhotoUrls sets the "photo_urls" field to the value that was provided on create.
func (u *TwitterNoteUpsert) UpdatePhotoUrls() *TwitterNoteUpsert {
	u.SetExcluded(twitternote.FieldPhotoUrls)
	return u
}

// ClearPhotoUrls clears the value of the "photo_urls" field.
func (u *TwitterNoteUpsert) ClearPhotoUrls() *TwitterNoteUpsert {
	u.SetNull(twitternote.FieldPhotoUrls)
	return u
}

// SetVideoID sets the "video_id" field.
func (u *TwitterNoteUpsert) SetVideoID(v []string) *TwitterNoteUpsert {
	u.Set(twitternote.FieldVideoID, v)
	return u
}

// UpdateVideoID sets the "video_id" field to the value that was provided on create.
func (u *TwitterNoteUpsert) UpdateVideoID() *TwitterNoteUpsert {
	u.SetExcluded(twitternote.FieldVideoID)
	return u
}

// ClearVideoID clears the value of the "video_id" field.
func (u *TwitterNoteUpsert) ClearVideoID() *TwitterNoteUpsert {
	u.SetNull(twitternote.FieldVideoID)
	return u
}

// SetVideoPreview sets the "video_preview" field.
func (u *TwitterNoteUpsert) SetVideoPreview(v []string) *TwitterNoteUpsert {
	u.Set(twitternote.FieldVideoPreview, v)
	return u
}

// UpdateVideoPreview sets the "video_preview" field to the value that was provided on create.
func (u *TwitterNoteUpsert) UpdateVideoPreview() *TwitterNoteUpsert {
	u.SetExcluded(twitternote.FieldVideoPreview)
	return u
}

// ClearVideoPreview clears the value of the "video_preview" field.
func (u *TwitterNoteUpsert) ClearVideoPreview() *TwitterNoteUpsert {
	u.SetNull(twitternote.FieldVideoPreview)
	return u
}

// SetVideoUrls sets the "video_urls" field.
func (u *TwitterNoteUpsert) SetVideoUrls(v []string) *TwitterNoteUpsert {
	u.Set(twitternote.FieldVideoUrls, v)
	return u
}

// UpdateVideoUrls sets the "video_urls" field to the value that was provided on create.
func (u *TwitterNoteUpsert) UpdateVideoUrls() *TwitterNoteUpsert {
	u.SetExcluded(twitternote.FieldVideoUrls)
	return u
}

// ClearVideoUrls clears the value of the "video_urls" field.
func (u *TwitterNoteUpsert) ClearVideoUrls() *TwitterNoteUpsert {
	u.SetNull(twitternote.FieldVideoUrls)
	return u
}

// SetMentionID sets the "mention_id" field.
func (u *TwitterNoteUpsert) SetMentionID(v []string) *TwitterNoteUpsert {
	u.Set(twitternote.FieldMentionID, v)
	return u
}

// UpdateMentionID sets the "mention_id" field to the value that was provided on create.
func (u *TwitterNoteUpsert) UpdateMentionID() *TwitterNoteUpsert {
	u.SetExcluded(twitternote.FieldMentionID)
	return u
}

// ClearMentionID clears the value of the "mention_id" field.
func (u *TwitterNoteUpsert) ClearMentionID() *TwitterNoteUpsert {
	u.SetNull(twitternote.FieldMentionID)
	return u
}

// SetMentionUsername sets the "mention_username" field.
func (u *TwitterNoteUpsert) SetMentionUsername(v []string) *TwitterNoteUpsert {
	u.Set(twitternote.FieldMentionUsername, v)
	return u
}

// UpdateMentionUsername sets the "mention_username" field to the value that was provided on create.
func (u *TwitterNoteUpsert) UpdateMentionUsername() *TwitterNoteUpsert {
	u.SetExcluded(twitternote.FieldMentionUsername)
	return u
}

// ClearMentionUsername clears the value of the "mention_username" field.
func (u *TwitterNoteUpsert) ClearMentionUsername() *TwitterNoteUpsert {
	u.SetNull(twitternote.FieldMentionUsername)
	return u
}

// SetMentionName sets the "mention_name" field.
func (u *TwitterNoteUpsert) SetMentionName(v []string) *TwitterNoteUpsert {
	u.Set(twitternote.FieldMentionName, v)
	return u
}

// UpdateMentionName sets the "mention_name" field to the value that was provided on create.
func (u *TwitterNoteUpsert) UpdateMentionName() *TwitterNoteUpsert {
	u.SetExcluded(twitternote.FieldMentionName)
	return u
}

// ClearMentionName clears the value of the "mention_name" field.
func (u *TwitterNoteUpsert) ClearMentionName() *TwitterNoteUpsert {
	u.SetNull(twitternote.FieldMentionName)
	return u
}

// SetRetweetedStatusID sets the "retweeted_status_id" field.
func (u *TwitterNoteUpsert) SetRetweetedStatusID(v string) *TwitterNoteUpsert {
	u.Set(twitternote.FieldRetweetedStatusID, v)
	return u
}

// UpdateRetweetedStatusID sets the "retweeted_status_id" field to the value that was provided on create.
func (u *TwitterNoteUpsert) UpdateRetweetedStatusID() *TwitterNoteUpsert {
	u.SetExcluded(twitternote.FieldRetweetedStatusID)
	return u
}

// ClearRetweetedStatusID clears the value of the "retweeted_status_id" field.
func (u *TwitterNoteUpsert) ClearRetweetedStatusID() *TwitterNoteUpsert {
	u.SetNull(twitternote.FieldRetweetedStatusID)
	return u
}

// SetIsRetweet sets the "is_retweet" field.
func (u *TwitterNoteUpsert) SetIsRetweet(v bool) *TwitterNoteUpsert {
	u.Set(twitternote.FieldIsRetweet, v)
	return u
}

// UpdateIsRetweet sets the "is_retweet" field to the value that was provided on create.
func (u *TwitterNoteUpsert) UpdateIsRetweet() *TwitterNoteUpsert {
	u.SetExcluded(twitternote.FieldIsRetweet)
	return u
}

// ClearIsRetweet clears the value of the "is_retweet" field.
func (u *TwitterNoteUpsert) ClearIsRetweet() *TwitterNoteUpsert {
	u.SetNull(twitternote.FieldIsRetweet)
	return u
}

// SetPostAt sets the "post_at" field.
func (u *TwitterNoteUpsert) SetPostAt(v time.Time) *TwitterNoteUpsert {
	u.Set(twitternote.FieldPostAt, v)
	return u
}

// UpdatePostAt sets the "post_at" field to the value that was provided on create.
func (u *TwitterNoteUpsert) UpdatePostAt() *TwitterNoteUpsert {
	u.SetExcluded(twitternote.FieldPostAt)
	return u
}

// ClearPostAt clears the value of the "post_at" field.
func (u *TwitterNoteUpsert) ClearPostAt() *TwitterNoteUpsert {
	u.SetNull(twitternote.FieldPostAt)
	return u
}

// SetUrls sets the "urls" field.
func (u *TwitterNoteUpsert) SetUrls(v []string) *TwitterNoteUpsert {
	u.Set(twitternote.FieldUrls, v)
	return u
}

// UpdateUrls sets the "urls" field to the value that was provided on create.
func (u *TwitterNoteUpsert) UpdateUrls() *TwitterNoteUpsert {
	u.SetExcluded(twitternote.FieldUrls)
	return u
}

// ClearUrls clears the value of the "urls" field.
func (u *TwitterNoteUpsert) ClearUrls() *TwitterNoteUpsert {
	u.SetNull(twitternote.FieldUrls)
	return u
}

// SetHTMLText sets the "html_text" field.
func (u *TwitterNoteUpsert) SetHTMLText(v string) *TwitterNoteUpsert {
	u.Set(twitternote.FieldHTMLText, v)
	return u
}

// UpdateHTMLText sets the "html_text" field to the value that was provided on create.
func (u *TwitterNoteUpsert) UpdateHTMLText() *TwitterNoteUpsert {
	u.SetExcluded(twitternote.FieldHTMLText)
	return u
}

// ClearHTMLText clears the value of the "html_text" field.
func (u *TwitterNoteUpsert) ClearHTMLText() *TwitterNoteUpsert {
	u.SetNull(twitternote.FieldHTMLText)
	return u
}

// SetPermanentURL sets the "permanent_url" field.
func (u *TwitterNoteUpsert) SetPermanentURL(v string) *TwitterNoteUpsert {
	u.Set(twitternote.FieldPermanentURL, v)
	return u
}

// UpdatePermanentURL sets the "permanent_url" field to the value that was provided on create.
func (u *TwitterNoteUpsert) UpdatePermanentURL() *TwitterNoteUpsert {
	u.SetExcluded(twitternote.FieldPermanentURL)
	return u
}

// ClearPermanentURL clears the value of the "permanent_url" field.
func (u *TwitterNoteUpsert) ClearPermanentURL() *TwitterNoteUpsert {
	u.SetNull(twitternote.FieldPermanentURL)
	return u
}

// SetIsReply sets the "is_reply" field.
func (u *TwitterNoteUpsert) SetIsReply(v bool) *TwitterNoteUpsert {
	u.Set(twitternote.FieldIsReply, v)
	return u
}

// UpdateIsReply sets the "is_reply" field to the value that was provided on create.
func (u *TwitterNoteUpsert) UpdateIsReply() *TwitterNoteUpsert {
	u.SetExcluded(twitternote.FieldIsReply)
	return u
}

// ClearIsReply clears the value of the "is_reply" field.
func (u *TwitterNoteUpsert) ClearIsReply() *TwitterNoteUpsert {
	u.SetNull(twitternote.FieldIsReply)
	return u
}

// SetIsPin sets the "is_pin" field.
func (u *TwitterNoteUpsert) SetIsPin(v bool) *TwitterNoteUpsert {
	u.Set(twitternote.FieldIsPin, v)
	return u
}

// UpdateIsPin sets the "is_pin" field to the value that was provided on create.
func (u *TwitterNoteUpsert) UpdateIsPin() *TwitterNoteUpsert {
	u.SetExcluded(twitternote.FieldIsPin)
	return u
}

// ClearIsPin clears the value of the "is_pin" field.
func (u *TwitterNoteUpsert) ClearIsPin() *TwitterNoteUpsert {
	u.SetNull(twitternote.FieldIsPin)
	return u
}

// SetSensitiveContent sets the "sensitive_content" field.
func (u *TwitterNoteUpsert) SetSensitiveContent(v bool) *TwitterNoteUpsert {
	u.Set(twitternote.FieldSensitiveContent, v)
	return u
}

// UpdateSensitiveContent sets the "sensitive_content" field to the value that was provided on create.
func (u *TwitterNoteUpsert) UpdateSensitiveContent() *TwitterNoteUpsert {
	u.SetExcluded(twitternote.FieldSensitiveContent)
	return u
}

// ClearSensitiveContent clears the value of the "sensitive_content" field.
func (u *TwitterNoteUpsert) ClearSensitiveContent() *TwitterNoteUpsert {
	u.SetNull(twitternote.FieldSensitiveContent)
	return u
}

// SetReplyTo sets the "reply_to" field.
func (u *TwitterNoteUpsert) SetReplyTo(v string) *TwitterNoteUpsert {
	u.Set(twitternote.FieldReplyTo, v)
	return u
}

// UpdateReplyTo sets the "reply_to" field to the value that was provided on create.
func (u *TwitterNoteUpsert) UpdateReplyTo() *TwitterNoteUpsert {
	u.SetExcluded(twitternote.FieldReplyTo)
	return u
}

// ClearReplyTo clears the value of the "reply_to" field.
func (u *TwitterNoteUpsert) ClearReplyTo() *TwitterNoteUpsert {
	u.SetNull(twitternote.FieldReplyTo)
	return u
}

// SetRawYaml sets the "raw_yaml" field.
func (u *TwitterNoteUpsert) SetRawYaml(v string) *TwitterNoteUpsert {
	u.Set(twitternote.FieldRawYaml, v)
	return u
}

// UpdateRawYaml sets the "raw_yaml" field to the value that was provided on create.
func (u *TwitterNoteUpsert) UpdateRawYaml() *TwitterNoteUpsert {
	u.SetExcluded(twitternote.FieldRawYaml)
	return u
}

// SetHashTags sets the "hash_tags" field.
func (u *TwitterNoteUpsert) SetHashTags(v []string) *TwitterNoteUpsert {
	u.Set(twitternote.FieldHashTags, v)
	return u
}

// UpdateHashTags sets the "hash_tags" field to the value that was provided on create.
func (u *TwitterNoteUpsert) UpdateHashTags() *TwitterNoteUpsert {
	u.SetExcluded(twitternote.FieldHashTags)
	return u
}

// SetEvent sets the "event" field.
func (u *TwitterNoteUpsert) SetEvent(v string) *TwitterNoteUpsert {
	u.Set(twitternote.FieldEvent, v)
	return u
}

// UpdateEvent sets the "event" field to the value that was provided on create.
func (u *TwitterNoteUpsert) UpdateEvent() *TwitterNoteUpsert {
	u.SetExcluded(twitternote.FieldEvent)
	return u
}

// ClearEvent clears the value of the "event" field.
func (u *TwitterNoteUpsert) ClearEvent() *TwitterNoteUpsert {
	u.SetNull(twitternote.FieldEvent)
	return u
}

// SetEventID sets the "event_id" field.
func (u *TwitterNoteUpsert) SetEventID(v string) *TwitterNoteUpsert {
	u.Set(twitternote.FieldEventID, v)
	return u
}

// UpdateEventID sets the "event_id" field to the value that was provided on create.
func (u *TwitterNoteUpsert) UpdateEventID() *TwitterNoteUpsert {
	u.SetExcluded(twitternote.FieldEventID)
	return u
}

// ClearEventID clears the value of the "event_id" field.
func (u *TwitterNoteUpsert) ClearEventID() *TwitterNoteUpsert {
	u.SetNull(twitternote.FieldEventID)
	return u
}

// SetPublishStatus sets the "publish_status" field.
func (u *TwitterNoteUpsert) SetPublishStatus(v string) *TwitterNoteUpsert {
	u.Set(twitternote.FieldPublishStatus, v)
	return u
}

// UpdatePublishStatus sets the "publish_status" field to the value that was provided on create.
func (u *TwitterNoteUpsert) UpdatePublishStatus() *TwitterNoteUpsert {
	u.SetExcluded(twitternote.FieldPublishStatus)
	return u
}

// ClearPublishStatus clears the value of the "publish_status" field.
func (u *TwitterNoteUpsert) ClearPublishStatus() *TwitterNoteUpsert {
	u.SetNull(twitternote.FieldPublishStatus)
	return u
}

// SetPublishedAt sets the "published_at" field.
func (u *TwitterNoteUpsert) SetPublishedAt(v time.Time) *TwitterNoteUpsert {
	u.Set(twitternote.FieldPublishedAt, v)
	return u
}

// UpdatePublishedAt sets the "published_at" field to the value that was provided on create.
func (u *TwitterNoteUpsert) UpdatePublishedAt() *TwitterNoteUpsert {
	u.SetExcluded(twitternote.FieldPublishedAt)
	return u
}

// ClearPublishedAt clears the value of the "published_at" field.
func (u *TwitterNoteUpsert) ClearPublishedAt() *TwitterNoteUpsert {
	u.SetNull(twitternote.FieldPublishedAt)
	return u
}

// SetFetchedAt sets the "fetched_at" field.
func (u *TwitterNoteUpsert) SetFetchedAt(v time.Time) *TwitterNoteUpsert {
	u.Set(twitternote.FieldFetchedAt, v)
	return u
}

// UpdateFetchedAt sets the "fetched_at" field to the value that was provided on create.
func (u *TwitterNoteUpsert) UpdateFetchedAt() *TwitterNoteUpsert {
	u.SetExcluded(twitternote.FieldFetchedAt)
	return u
}

// ClearFetchedAt clears the value of the "fetched_at" field.
func (u *TwitterNoteUpsert) ClearFetchedAt() *TwitterNoteUpsert {
	u.SetNull(twitternote.FieldFetchedAt)
	return u
}

// SetLanguage sets the "language" field.
func (u *TwitterNoteUpsert) SetLanguage(v string) *TwitterNoteUpsert {
	u.Set(twitternote.FieldLanguage, v)
	return u
}

// UpdateLanguage sets the "language" field to the value that was provided on create.
func (u *TwitterNoteUpsert) UpdateLanguage() *TwitterNoteUpsert {
	u.SetExcluded(twitternote.FieldLanguage)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.TwitterNote.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(twitternote.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TwitterNoteUpsertOne) UpdateNewValues() *TwitterNoteUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(twitternote.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TwitterNote.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TwitterNoteUpsertOne) Ignore() *TwitterNoteUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TwitterNoteUpsertOne) DoNothing() *TwitterNoteUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TwitterNoteCreate.OnConflict
// documentation for more info.
func (u *TwitterNoteUpsertOne) Update(set func(*TwitterNoteUpsert)) *TwitterNoteUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TwitterNoteUpsert{UpdateSet: update})
	}))
	return u
}

// SetUserID sets the "user_id" field.
func (u *TwitterNoteUpsertOne) SetUserID(v string) *TwitterNoteUpsertOne {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *TwitterNoteUpsertOne) UpdateUserID() *TwitterNoteUpsertOne {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.UpdateUserID()
	})
}

// SetUserName sets the "user_name" field.
func (u *TwitterNoteUpsertOne) SetUserName(v string) *TwitterNoteUpsertOne {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.SetUserName(v)
	})
}

// UpdateUserName sets the "user_name" field to the value that was provided on create.
func (u *TwitterNoteUpsertOne) UpdateUserName() *TwitterNoteUpsertOne {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.UpdateUserName()
	})
}

// SetConversationID sets the "conversation_id" field.
func (u *TwitterNoteUpsertOne) SetConversationID(v string) *TwitterNoteUpsertOne {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.SetConversationID(v)
	})
}

// UpdateConversationID sets the "conversation_id" field to the value that was provided on create.
func (u *TwitterNoteUpsertOne) UpdateConversationID() *TwitterNoteUpsertOne {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.UpdateConversationID()
	})
}

// SetText sets the "text" field.
func (u *TwitterNoteUpsertOne) SetText(v string) *TwitterNoteUpsertOne {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.SetText(v)
	})
}

// UpdateText sets the "text" field to the value that was provided on create.
func (u *TwitterNoteUpsertOne) UpdateText() *TwitterNoteUpsertOne {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.UpdateText()
	})
}

// SetLikes sets the "likes" field.
func (u *TwitterNoteUpsertOne) SetLikes(v int) *TwitterNoteUpsertOne {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.SetLikes(v)
	})
}

// AddLikes adds v to the "likes" field.
func (u *TwitterNoteUpsertOne) AddLikes(v int) *TwitterNoteUpsertOne {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.AddLikes(v)
	})
}

// UpdateLikes sets the "likes" field to the value that was provided on create.
func (u *TwitterNoteUpsertOne) UpdateLikes() *TwitterNoteUpsertOne {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.UpdateLikes()
	})
}

// SetReplies sets the "replies" field.
func (u *TwitterNoteUpsertOne) SetReplies(v int) *TwitterNoteUpsertOne {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.SetReplies(v)
	})
}

// AddReplies adds v to the "replies" field.
func (u *TwitterNoteUpsertOne) AddReplies(v int) *TwitterNoteUpsertOne {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.AddReplies(v)
	})
}

// UpdateReplies sets the "replies" field to the value that was provided on create.
func (u *TwitterNoteUpsertOne) UpdateReplies() *TwitterNoteUpsertOne {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.UpdateReplies()
	})
}

// SetRetweets sets the "retweets" field.
func (u *TwitterNoteUpsertOne) SetRetweets(v int) *TwitterNoteUpsertOne {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.SetRetweets(v)
	})
}

// AddRetweets adds v to the "retweets" field.
func (u *TwitterNoteUpsertOne) AddRetweets(v int) *TwitterNoteUpsertOne {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.AddRetweets(v)
	})
}

// UpdateRetweets sets the "retweets" field to the value that was provided on create.
func (u *TwitterNoteUpsertOne) UpdateRetweets() *TwitterNoteUpsertOne {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.UpdateRetweets()
	})
}

// SetViews sets the "views" field.
func (u *TwitterNoteUpsertOne) SetViews(v int) *TwitterNoteUpsertOne {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.SetViews(v)
	})
}

// AddViews adds v to the "views" field.
func (u *TwitterNoteUpsertOne) AddViews(v int) *TwitterNoteUpsertOne {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.AddViews(v)
	})
}

// UpdateViews sets the "views" field to the value that was provided on create.
func (u *TwitterNoteUpsertOne) UpdateViews() *TwitterNoteUpsertOne {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.UpdateViews()
	})
}

// SetPhotoIds sets the "photo_ids" field.
func (u *TwitterNoteUpsertOne) SetPhotoIds(v []string) *TwitterNoteUpsertOne {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.SetPhotoIds(v)
	})
}

// UpdatePhotoIds sets the "photo_ids" field to the value that was provided on create.
func (u *TwitterNoteUpsertOne) UpdatePhotoIds() *TwitterNoteUpsertOne {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.UpdatePhotoIds()
	})
}

// ClearPhotoIds clears the value of the "photo_ids" field.
func (u *TwitterNoteUpsertOne) ClearPhotoIds() *TwitterNoteUpsertOne {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.ClearPhotoIds()
	})
}

// SetPhotoUrls sets the "photo_urls" field.
func (u *TwitterNoteUpsertOne) SetPhotoUrls(v []string) *TwitterNoteUpsertOne {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.SetPhotoUrls(v)
	})
}

// UpdatePhotoUrls sets the "photo_urls" field to the value that was provided on create.
func (u *TwitterNoteUpsertOne) UpdatePhotoUrls() *TwitterNoteUpsertOne {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.UpdatePhotoUrls()
	})
}

// ClearPhotoUrls clears the value of the "photo_urls" field.
func (u *TwitterNoteUpsertOne) ClearPhotoUrls() *TwitterNoteUpsertOne {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.ClearPhotoUrls()
	})
}

// SetVideoID sets the "video_id" field.
func (u *TwitterNoteUpsertOne) SetVideoID(v []string) *TwitterNoteUpsertOne {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.SetVideoID(v)
	})
}

// UpdateVideoID sets the "video_id" field to the value that was provided on create.
func (u *TwitterNoteUpsertOne) UpdateVideoID() *TwitterNoteUpsertOne {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.UpdateVideoID()
	})
}

// ClearVideoID clears the value of the "video_id" field.
func (u *TwitterNoteUpsertOne) ClearVideoID() *TwitterNoteUpsertOne {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.ClearVideoID()
	})
}

// SetVideoPreview sets the "video_preview" field.
func (u *TwitterNoteUpsertOne) SetVideoPreview(v []string) *TwitterNoteUpsertOne {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.SetVideoPreview(v)
	})
}

// UpdateVideoPreview sets the "video_preview" field to the value that was provided on create.
func (u *TwitterNoteUpsertOne) UpdateVideoPreview() *TwitterNoteUpsertOne {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.UpdateVideoPreview()
	})
}

// ClearVideoPreview clears the value of the "video_preview" field.
func (u *TwitterNoteUpsertOne) ClearVideoPreview() *TwitterNoteUpsertOne {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.ClearVideoPreview()
	})
}

// SetVideoUrls sets the "video_urls" field.
func (u *TwitterNoteUpsertOne) SetVideoUrls(v []string) *TwitterNoteUpsertOne {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.SetVideoUrls(v)
	})
}

// UpdateVideoUrls sets the "video_urls" field to the value that was provided on create.
func (u *TwitterNoteUpsertOne) UpdateVideoUrls() *TwitterNoteUpsertOne {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.UpdateVideoUrls()
	})
}

// ClearVideoUrls clears the value of the "video_urls" field.
func (u *TwitterNoteUpsertOne) ClearVideoUrls() *TwitterNoteUpsertOne {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.ClearVideoUrls()
	})
}

// SetMentionID sets the "mention_id" field.
func (u *TwitterNoteUpsertOne) SetMentionID(v []string) *TwitterNoteUpsertOne {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.SetMentionID(v)
	})
}

// UpdateMentionID sets the "mention_id" field to the value that was provided on create.
func (u *TwitterNoteUpsertOne) UpdateMentionID() *TwitterNoteUpsertOne {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.UpdateMentionID()
	})
}

// ClearMentionID clears the value of the "mention_id" field.
func (u *TwitterNoteUpsertOne) ClearMentionID() *TwitterNoteUpsertOne {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.ClearMentionID()
	})
}

// SetMentionUsername sets the "mention_username" field.
func (u *TwitterNoteUpsertOne) SetMentionUsername(v []string) *TwitterNoteUpsertOne {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.SetMentionUsername(v)
	})
}

// UpdateMentionUsername sets the "mention_username" field to the value that was provided on create.
func (u *TwitterNoteUpsertOne) UpdateMentionUsername() *TwitterNoteUpsertOne {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.UpdateMentionUsername()
	})
}

// ClearMentionUsername clears the value of the "mention_username" field.
func (u *TwitterNoteUpsertOne) ClearMentionUsername() *TwitterNoteUpsertOne {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.ClearMentionUsername()
	})
}

// SetMentionName sets the "mention_name" field.
func (u *TwitterNoteUpsertOne) SetMentionName(v []string) *TwitterNoteUpsertOne {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.SetMentionName(v)
	})
}

// UpdateMentionName sets the "mention_name" field to the value that was provided on create.
func (u *TwitterNoteUpsertOne) UpdateMentionName() *TwitterNoteUpsertOne {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.UpdateMentionName()
	})
}

// ClearMentionName clears the value of the "mention_name" field.
func (u *TwitterNoteUpsertOne) ClearMentionName() *TwitterNoteUpsertOne {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.ClearMentionName()
	})
}

// SetRetweetedStatusID sets the "retweeted_status_id" field.
func (u *TwitterNoteUpsertOne) SetRetweetedStatusID(v string) *TwitterNoteUpsertOne {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.SetRetweetedStatusID(v)
	})
}

// UpdateRetweetedStatusID sets the "retweeted_status_id" field to the value that was provided on create.
func (u *TwitterNoteUpsertOne) UpdateRetweetedStatusID() *TwitterNoteUpsertOne {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.UpdateRetweetedStatusID()
	})
}

// ClearRetweetedStatusID clears the value of the "retweeted_status_id" field.
func (u *TwitterNoteUpsertOne) ClearRetweetedStatusID() *TwitterNoteUpsertOne {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.ClearRetweetedStatusID()
	})
}

// SetIsRetweet sets the "is_retweet" field.
func (u *TwitterNoteUpsertOne) SetIsRetweet(v bool) *TwitterNoteUpsertOne {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.SetIsRetweet(v)
	})
}

// UpdateIsRetweet sets the "is_retweet" field to the value that was provided on create.
func (u *TwitterNoteUpsertOne) UpdateIsRetweet() *TwitterNoteUpsertOne {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.UpdateIsRetweet()
	})
}

// ClearIsRetweet clears the value of the "is_retweet" field.
func (u *TwitterNoteUpsertOne) ClearIsRetweet() *TwitterNoteUpsertOne {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.ClearIsRetweet()
	})
}

// SetPostAt sets the "post_at" field.
func (u *TwitterNoteUpsertOne) SetPostAt(v time.Time) *TwitterNoteUpsertOne {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.SetPostAt(v)
	})
}

// UpdatePostAt sets the "post_at" field to the value that was provided on create.
func (u *TwitterNoteUpsertOne) UpdatePostAt() *TwitterNoteUpsertOne {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.UpdatePostAt()
	})
}

// ClearPostAt clears the value of the "post_at" field.
func (u *TwitterNoteUpsertOne) ClearPostAt() *TwitterNoteUpsertOne {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.ClearPostAt()
	})
}

// SetUrls sets the "urls" field.
func (u *TwitterNoteUpsertOne) SetUrls(v []string) *TwitterNoteUpsertOne {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.SetUrls(v)
	})
}

// UpdateUrls sets the "urls" field to the value that was provided on create.
func (u *TwitterNoteUpsertOne) UpdateUrls() *TwitterNoteUpsertOne {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.UpdateUrls()
	})
}

// ClearUrls clears the value of the "urls" field.
func (u *TwitterNoteUpsertOne) ClearUrls() *TwitterNoteUpsertOne {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.ClearUrls()
	})
}

// SetHTMLText sets the "html_text" field.
func (u *TwitterNoteUpsertOne) SetHTMLText(v string) *TwitterNoteUpsertOne {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.SetHTMLText(v)
	})
}

// UpdateHTMLText sets the "html_text" field to the value that was provided on create.
func (u *TwitterNoteUpsertOne) UpdateHTMLText() *TwitterNoteUpsertOne {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.UpdateHTMLText()
	})
}

// ClearHTMLText clears the value of the "html_text" field.
func (u *TwitterNoteUpsertOne) ClearHTMLText() *TwitterNoteUpsertOne {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.ClearHTMLText()
	})
}

// SetPermanentURL sets the "permanent_url" field.
func (u *TwitterNoteUpsertOne) SetPermanentURL(v string) *TwitterNoteUpsertOne {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.SetPermanentURL(v)
	})
}

// UpdatePermanentURL sets the "permanent_url" field to the value that was provided on create.
func (u *TwitterNoteUpsertOne) UpdatePermanentURL() *TwitterNoteUpsertOne {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.UpdatePermanentURL()
	})
}

// ClearPermanentURL clears the value of the "permanent_url" field.
func (u *TwitterNoteUpsertOne) ClearPermanentURL() *TwitterNoteUpsertOne {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.ClearPermanentURL()
	})
}

// SetIsReply sets the "is_reply" field.
func (u *TwitterNoteUpsertOne) SetIsReply(v bool) *TwitterNoteUpsertOne {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.SetIsReply(v)
	})
}

// UpdateIsReply sets the "is_reply" field to the value that was provided on create.
func (u *TwitterNoteUpsertOne) UpdateIsReply() *TwitterNoteUpsertOne {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.UpdateIsReply()
	})
}

// ClearIsReply clears the value of the "is_reply" field.
func (u *TwitterNoteUpsertOne) ClearIsReply() *TwitterNoteUpsertOne {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.ClearIsReply()
	})
}

// SetIsPin sets the "is_pin" field.
func (u *TwitterNoteUpsertOne) SetIsPin(v bool) *TwitterNoteUpsertOne {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.SetIsPin(v)
	})
}

// UpdateIsPin sets the "is_pin" field to the value that was provided on create.
func (u *TwitterNoteUpsertOne) UpdateIsPin() *TwitterNoteUpsertOne {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.UpdateIsPin()
	})
}

// ClearIsPin clears the value of the "is_pin" field.
func (u *TwitterNoteUpsertOne) ClearIsPin() *TwitterNoteUpsertOne {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.ClearIsPin()
	})
}

// SetSensitiveContent sets the "sensitive_content" field.
func (u *TwitterNoteUpsertOne) SetSensitiveContent(v bool) *TwitterNoteUpsertOne {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.SetSensitiveContent(v)
	})
}

// UpdateSensitiveContent sets the "sensitive_content" field to the value that was provided on create.
func (u *TwitterNoteUpsertOne) UpdateSensitiveContent() *TwitterNoteUpsertOne {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.UpdateSensitiveContent()
	})
}

// ClearSensitiveContent clears the value of the "sensitive_content" field.
func (u *TwitterNoteUpsertOne) ClearSensitiveContent() *TwitterNoteUpsertOne {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.ClearSensitiveContent()
	})
}

// SetReplyTo sets the "reply_to" field.
func (u *TwitterNoteUpsertOne) SetReplyTo(v string) *TwitterNoteUpsertOne {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.SetReplyTo(v)
	})
}

// UpdateReplyTo sets the "reply_to" field to the value that was provided on create.
func (u *TwitterNoteUpsertOne) UpdateReplyTo() *TwitterNoteUpsertOne {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.UpdateReplyTo()
	})
}

// ClearReplyTo clears the value of the "reply_to" field.
func (u *TwitterNoteUpsertOne) ClearReplyTo() *TwitterNoteUpsertOne {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.ClearReplyTo()
	})
}

// SetRawYaml sets the "raw_yaml" field.
func (u *TwitterNoteUpsertOne) SetRawYaml(v string) *TwitterNoteUpsertOne {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.SetRawYaml(v)
	})
}

// UpdateRawYaml sets the "raw_yaml" field to the value that was provided on create.
func (u *TwitterNoteUpsertOne) UpdateRawYaml() *TwitterNoteUpsertOne {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.UpdateRawYaml()
	})
}

// SetHashTags sets the "hash_tags" field.
func (u *TwitterNoteUpsertOne) SetHashTags(v []string) *TwitterNoteUpsertOne {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.SetHashTags(v)
	})
}

// UpdateHashTags sets the "hash_tags" field to the value that was provided on create.
func (u *TwitterNoteUpsertOne) UpdateHashTags() *TwitterNoteUpsertOne {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.UpdateHashTags()
	})
}

// SetEvent sets the "event" field.
func (u *TwitterNoteUpsertOne) SetEvent(v string) *TwitterNoteUpsertOne {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.SetEvent(v)
	})
}

// UpdateEvent sets the "event" field to the value that was provided on create.
func (u *TwitterNoteUpsertOne) UpdateEvent() *TwitterNoteUpsertOne {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.UpdateEvent()
	})
}

// ClearEvent clears the value of the "event" field.
func (u *TwitterNoteUpsertOne) ClearEvent() *TwitterNoteUpsertOne {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.ClearEvent()
	})
}

// SetEventID sets the "event_id" field.
func (u *TwitterNoteUpsertOne) SetEventID(v string) *TwitterNoteUpsertOne {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.SetEventID(v)
	})
}

// UpdateEventID sets the "event_id" field to the value that was provided on create.
func (u *TwitterNoteUpsertOne) UpdateEventID() *TwitterNoteUpsertOne {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.UpdateEventID()
	})
}

// ClearEventID clears the value of the "event_id" field.
func (u *TwitterNoteUpsertOne) ClearEventID() *TwitterNoteUpsertOne {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.ClearEventID()
	})
}

// SetPublishStatus sets the "publish_status" field.
func (u *TwitterNoteUpsertOne) SetPublishStatus(v string) *TwitterNoteUpsertOne {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.SetPublishStatus(v)
	})
}

// UpdatePublishStatus sets the "publish_status" field to the value that was provided on create.
func (u *TwitterNoteUpsertOne) UpdatePublishStatus() *TwitterNoteUpsertOne {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.UpdatePublishStatus()
	})
}

// ClearPublishStatus clears the value of the "publish_status" field.
func (u *TwitterNoteUpsertOne) ClearPublishStatus() *TwitterNoteUpsertOne {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.ClearPublishStatus()
	})
}

// SetPublishedAt sets the "published_at" field.
func (u *TwitterNoteUpsertOne) SetPublishedAt(v time.Time) *TwitterNoteUpsertOne {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.SetPublishedAt(v)
	})
}

// UpdatePublishedAt sets the "published_at" field to the value that was provided on create.
func (u *TwitterNoteUpsertOne) UpdatePublishedAt() *TwitterNoteUpsertOne {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.UpdatePublishedAt()
	})
}

// ClearPublishedAt clears the value of the "published_at" field.
func (u *TwitterNoteUpsertOne) ClearPublishedAt() *TwitterNoteUpsertOne {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.ClearPublishedAt()
	})
}

// SetFetchedAt sets the "fetched_at" field.
func (u *TwitterNoteUpsertOne) SetFetchedAt(v time.Time) *TwitterNoteUpsertOne {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.SetFetchedAt(v)
	})
}

// UpdateFetchedAt sets the "fetched_at" field to the value that was provided on create.
func (u *TwitterNoteUpsertOne) UpdateFetchedAt() *TwitterNoteUpsertOne {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.UpdateFetchedAt()
	})
}

// ClearFetchedAt clears the value of the "fetched_at" field.
func (u *TwitterNoteUpsertOne) ClearFetchedAt() *TwitterNoteUpsertOne {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.ClearFetchedAt()
	})
}

// SetLanguage sets the "language" field.
func (u *TwitterNoteUpsertOne) SetLanguage(v string) *TwitterNoteUpsertOne {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.SetLanguage(v)
	})
}

// UpdateLanguage sets the "language" field to the value that was provided on create.
func (u *TwitterNoteUpsertOne) UpdateLanguage() *TwitterNoteUpsertOne {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.UpdateLanguage()
	})
}

// Exec executes the query.
func (u *TwitterNoteUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("core: missing options for TwitterNoteCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TwitterNoteUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TwitterNoteUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("core: TwitterNoteUpsertOne.ID is not supported by MySQL driver. Use TwitterNoteUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TwitterNoteUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TwitterNoteCreateBulk is the builder for creating many TwitterNote entities in bulk.
type TwitterNoteCreateBulk struct {
	config
	err      error
	builders []*TwitterNoteCreate
	conflict []sql.ConflictOption
}

// Save creates the TwitterNote entities in the database.
func (tncb *TwitterNoteCreateBulk) Save(ctx context.Context) ([]*TwitterNote, error) {
	if tncb.err != nil {
		return nil, tncb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tncb.builders))
	nodes := make([]*TwitterNote, len(tncb.builders))
	mutators := make([]Mutator, len(tncb.builders))
	for i := range tncb.builders {
		func(i int, root context.Context) {
			builder := tncb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TwitterNoteMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tncb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tncb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tncb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tncb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tncb *TwitterNoteCreateBulk) SaveX(ctx context.Context) []*TwitterNote {
	v, err := tncb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tncb *TwitterNoteCreateBulk) Exec(ctx context.Context) error {
	_, err := tncb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tncb *TwitterNoteCreateBulk) ExecX(ctx context.Context) {
	if err := tncb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TwitterNote.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TwitterNoteUpsert) {
//			SetUserID(v+v).
//		}).
//		Exec(ctx)
func (tncb *TwitterNoteCreateBulk) OnConflict(opts ...sql.ConflictOption) *TwitterNoteUpsertBulk {
	tncb.conflict = opts
	return &TwitterNoteUpsertBulk{
		create: tncb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TwitterNote.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tncb *TwitterNoteCreateBulk) OnConflictColumns(columns ...string) *TwitterNoteUpsertBulk {
	tncb.conflict = append(tncb.conflict, sql.ConflictColumns(columns...))
	return &TwitterNoteUpsertBulk{
		create: tncb,
	}
}

// TwitterNoteUpsertBulk is the builder for "upsert"-ing
// a bulk of TwitterNote nodes.
type TwitterNoteUpsertBulk struct {
	create *TwitterNoteCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TwitterNote.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(twitternote.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TwitterNoteUpsertBulk) UpdateNewValues() *TwitterNoteUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(twitternote.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TwitterNote.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TwitterNoteUpsertBulk) Ignore() *TwitterNoteUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TwitterNoteUpsertBulk) DoNothing() *TwitterNoteUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TwitterNoteCreateBulk.OnConflict
// documentation for more info.
func (u *TwitterNoteUpsertBulk) Update(set func(*TwitterNoteUpsert)) *TwitterNoteUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TwitterNoteUpsert{UpdateSet: update})
	}))
	return u
}

// SetUserID sets the "user_id" field.
func (u *TwitterNoteUpsertBulk) SetUserID(v string) *TwitterNoteUpsertBulk {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *TwitterNoteUpsertBulk) UpdateUserID() *TwitterNoteUpsertBulk {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.UpdateUserID()
	})
}

// SetUserName sets the "user_name" field.
func (u *TwitterNoteUpsertBulk) SetUserName(v string) *TwitterNoteUpsertBulk {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.SetUserName(v)
	})
}

// UpdateUserName sets the "user_name" field to the value that was provided on create.
func (u *TwitterNoteUpsertBulk) UpdateUserName() *TwitterNoteUpsertBulk {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.UpdateUserName()
	})
}

// SetConversationID sets the "conversation_id" field.
func (u *TwitterNoteUpsertBulk) SetConversationID(v string) *TwitterNoteUpsertBulk {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.SetConversationID(v)
	})
}

// UpdateConversationID sets the "conversation_id" field to the value that was provided on create.
func (u *TwitterNoteUpsertBulk) UpdateConversationID() *TwitterNoteUpsertBulk {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.UpdateConversationID()
	})
}

// SetText sets the "text" field.
func (u *TwitterNoteUpsertBulk) SetText(v string) *TwitterNoteUpsertBulk {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.SetText(v)
	})
}

// UpdateText sets the "text" field to the value that was provided on create.
func (u *TwitterNoteUpsertBulk) UpdateText() *TwitterNoteUpsertBulk {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.UpdateText()
	})
}

// SetLikes sets the "likes" field.
func (u *TwitterNoteUpsertBulk) SetLikes(v int) *TwitterNoteUpsertBulk {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.SetLikes(v)
	})
}

// AddLikes adds v to the "likes" field.
func (u *TwitterNoteUpsertBulk) AddLikes(v int) *TwitterNoteUpsertBulk {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.AddLikes(v)
	})
}

// UpdateLikes sets the "likes" field to the value that was provided on create.
func (u *TwitterNoteUpsertBulk) UpdateLikes() *TwitterNoteUpsertBulk {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.UpdateLikes()
	})
}

// SetReplies sets the "replies" field.
func (u *TwitterNoteUpsertBulk) SetReplies(v int) *TwitterNoteUpsertBulk {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.SetReplies(v)
	})
}

// AddReplies adds v to the "replies" field.
func (u *TwitterNoteUpsertBulk) AddReplies(v int) *TwitterNoteUpsertBulk {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.AddReplies(v)
	})
}

// UpdateReplies sets the "replies" field to the value that was provided on create.
func (u *TwitterNoteUpsertBulk) UpdateReplies() *TwitterNoteUpsertBulk {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.UpdateReplies()
	})
}

// SetRetweets sets the "retweets" field.
func (u *TwitterNoteUpsertBulk) SetRetweets(v int) *TwitterNoteUpsertBulk {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.SetRetweets(v)
	})
}

// AddRetweets adds v to the "retweets" field.
func (u *TwitterNoteUpsertBulk) AddRetweets(v int) *TwitterNoteUpsertBulk {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.AddRetweets(v)
	})
}

// UpdateRetweets sets the "retweets" field to the value that was provided on create.
func (u *TwitterNoteUpsertBulk) UpdateRetweets() *TwitterNoteUpsertBulk {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.UpdateRetweets()
	})
}

// SetViews sets the "views" field.
func (u *TwitterNoteUpsertBulk) SetViews(v int) *TwitterNoteUpsertBulk {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.SetViews(v)
	})
}

// AddViews adds v to the "views" field.
func (u *TwitterNoteUpsertBulk) AddViews(v int) *TwitterNoteUpsertBulk {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.AddViews(v)
	})
}

// UpdateViews sets the "views" field to the value that was provided on create.
func (u *TwitterNoteUpsertBulk) UpdateViews() *TwitterNoteUpsertBulk {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.UpdateViews()
	})
}

// SetPhotoIds sets the "photo_ids" field.
func (u *TwitterNoteUpsertBulk) SetPhotoIds(v []string) *TwitterNoteUpsertBulk {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.SetPhotoIds(v)
	})
}

// UpdatePhotoIds sets the "photo_ids" field to the value that was provided on create.
func (u *TwitterNoteUpsertBulk) UpdatePhotoIds() *TwitterNoteUpsertBulk {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.UpdatePhotoIds()
	})
}

// ClearPhotoIds clears the value of the "photo_ids" field.
func (u *TwitterNoteUpsertBulk) ClearPhotoIds() *TwitterNoteUpsertBulk {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.ClearPhotoIds()
	})
}

// SetPhotoUrls sets the "photo_urls" field.
func (u *TwitterNoteUpsertBulk) SetPhotoUrls(v []string) *TwitterNoteUpsertBulk {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.SetPhotoUrls(v)
	})
}

// UpdatePhotoUrls sets the "photo_urls" field to the value that was provided on create.
func (u *TwitterNoteUpsertBulk) UpdatePhotoUrls() *TwitterNoteUpsertBulk {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.UpdatePhotoUrls()
	})
}

// ClearPhotoUrls clears the value of the "photo_urls" field.
func (u *TwitterNoteUpsertBulk) ClearPhotoUrls() *TwitterNoteUpsertBulk {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.ClearPhotoUrls()
	})
}

// SetVideoID sets the "video_id" field.
func (u *TwitterNoteUpsertBulk) SetVideoID(v []string) *TwitterNoteUpsertBulk {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.SetVideoID(v)
	})
}

// UpdateVideoID sets the "video_id" field to the value that was provided on create.
func (u *TwitterNoteUpsertBulk) UpdateVideoID() *TwitterNoteUpsertBulk {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.UpdateVideoID()
	})
}

// ClearVideoID clears the value of the "video_id" field.
func (u *TwitterNoteUpsertBulk) ClearVideoID() *TwitterNoteUpsertBulk {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.ClearVideoID()
	})
}

// SetVideoPreview sets the "video_preview" field.
func (u *TwitterNoteUpsertBulk) SetVideoPreview(v []string) *TwitterNoteUpsertBulk {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.SetVideoPreview(v)
	})
}

// UpdateVideoPreview sets the "video_preview" field to the value that was provided on create.
func (u *TwitterNoteUpsertBulk) UpdateVideoPreview() *TwitterNoteUpsertBulk {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.UpdateVideoPreview()
	})
}

// ClearVideoPreview clears the value of the "video_preview" field.
func (u *TwitterNoteUpsertBulk) ClearVideoPreview() *TwitterNoteUpsertBulk {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.ClearVideoPreview()
	})
}

// SetVideoUrls sets the "video_urls" field.
func (u *TwitterNoteUpsertBulk) SetVideoUrls(v []string) *TwitterNoteUpsertBulk {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.SetVideoUrls(v)
	})
}

// UpdateVideoUrls sets the "video_urls" field to the value that was provided on create.
func (u *TwitterNoteUpsertBulk) UpdateVideoUrls() *TwitterNoteUpsertBulk {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.UpdateVideoUrls()
	})
}

// ClearVideoUrls clears the value of the "video_urls" field.
func (u *TwitterNoteUpsertBulk) ClearVideoUrls() *TwitterNoteUpsertBulk {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.ClearVideoUrls()
	})
}

// SetMentionID sets the "mention_id" field.
func (u *TwitterNoteUpsertBulk) SetMentionID(v []string) *TwitterNoteUpsertBulk {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.SetMentionID(v)
	})
}

// UpdateMentionID sets the "mention_id" field to the value that was provided on create.
func (u *TwitterNoteUpsertBulk) UpdateMentionID() *TwitterNoteUpsertBulk {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.UpdateMentionID()
	})
}

// ClearMentionID clears the value of the "mention_id" field.
func (u *TwitterNoteUpsertBulk) ClearMentionID() *TwitterNoteUpsertBulk {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.ClearMentionID()
	})
}

// SetMentionUsername sets the "mention_username" field.
func (u *TwitterNoteUpsertBulk) SetMentionUsername(v []string) *TwitterNoteUpsertBulk {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.SetMentionUsername(v)
	})
}

// UpdateMentionUsername sets the "mention_username" field to the value that was provided on create.
func (u *TwitterNoteUpsertBulk) UpdateMentionUsername() *TwitterNoteUpsertBulk {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.UpdateMentionUsername()
	})
}

// ClearMentionUsername clears the value of the "mention_username" field.
func (u *TwitterNoteUpsertBulk) ClearMentionUsername() *TwitterNoteUpsertBulk {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.ClearMentionUsername()
	})
}

// SetMentionName sets the "mention_name" field.
func (u *TwitterNoteUpsertBulk) SetMentionName(v []string) *TwitterNoteUpsertBulk {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.SetMentionName(v)
	})
}

// UpdateMentionName sets the "mention_name" field to the value that was provided on create.
func (u *TwitterNoteUpsertBulk) UpdateMentionName() *TwitterNoteUpsertBulk {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.UpdateMentionName()
	})
}

// ClearMentionName clears the value of the "mention_name" field.
func (u *TwitterNoteUpsertBulk) ClearMentionName() *TwitterNoteUpsertBulk {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.ClearMentionName()
	})
}

// SetRetweetedStatusID sets the "retweeted_status_id" field.
func (u *TwitterNoteUpsertBulk) SetRetweetedStatusID(v string) *TwitterNoteUpsertBulk {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.SetRetweetedStatusID(v)
	})
}

// UpdateRetweetedStatusID sets the "retweeted_status_id" field to the value that was provided on create.
func (u *TwitterNoteUpsertBulk) UpdateRetweetedStatusID() *TwitterNoteUpsertBulk {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.UpdateRetweetedStatusID()
	})
}

// ClearRetweetedStatusID clears the value of the "retweeted_status_id" field.
func (u *TwitterNoteUpsertBulk) ClearRetweetedStatusID() *TwitterNoteUpsertBulk {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.ClearRetweetedStatusID()
	})
}

// SetIsRetweet sets the "is_retweet" field.
func (u *TwitterNoteUpsertBulk) SetIsRetweet(v bool) *TwitterNoteUpsertBulk {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.SetIsRetweet(v)
	})
}

// UpdateIsRetweet sets the "is_retweet" field to the value that was provided on create.
func (u *TwitterNoteUpsertBulk) UpdateIsRetweet() *TwitterNoteUpsertBulk {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.UpdateIsRetweet()
	})
}

// ClearIsRetweet clears the value of the "is_retweet" field.
func (u *TwitterNoteUpsertBulk) ClearIsRetweet() *TwitterNoteUpsertBulk {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.ClearIsRetweet()
	})
}

// SetPostAt sets the "post_at" field.
func (u *TwitterNoteUpsertBulk) SetPostAt(v time.Time) *TwitterNoteUpsertBulk {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.SetPostAt(v)
	})
}

// UpdatePostAt sets the "post_at" field to the value that was provided on create.
func (u *TwitterNoteUpsertBulk) UpdatePostAt() *TwitterNoteUpsertBulk {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.UpdatePostAt()
	})
}

// ClearPostAt clears the value of the "post_at" field.
func (u *TwitterNoteUpsertBulk) ClearPostAt() *TwitterNoteUpsertBulk {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.ClearPostAt()
	})
}

// SetUrls sets the "urls" field.
func (u *TwitterNoteUpsertBulk) SetUrls(v []string) *TwitterNoteUpsertBulk {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.SetUrls(v)
	})
}

// UpdateUrls sets the "urls" field to the value that was provided on create.
func (u *TwitterNoteUpsertBulk) UpdateUrls() *TwitterNoteUpsertBulk {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.UpdateUrls()
	})
}

// ClearUrls clears the value of the "urls" field.
func (u *TwitterNoteUpsertBulk) ClearUrls() *TwitterNoteUpsertBulk {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.ClearUrls()
	})
}

// SetHTMLText sets the "html_text" field.
func (u *TwitterNoteUpsertBulk) SetHTMLText(v string) *TwitterNoteUpsertBulk {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.SetHTMLText(v)
	})
}

// UpdateHTMLText sets the "html_text" field to the value that was provided on create.
func (u *TwitterNoteUpsertBulk) UpdateHTMLText() *TwitterNoteUpsertBulk {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.UpdateHTMLText()
	})
}

// ClearHTMLText clears the value of the "html_text" field.
func (u *TwitterNoteUpsertBulk) ClearHTMLText() *TwitterNoteUpsertBulk {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.ClearHTMLText()
	})
}

// SetPermanentURL sets the "permanent_url" field.
func (u *TwitterNoteUpsertBulk) SetPermanentURL(v string) *TwitterNoteUpsertBulk {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.SetPermanentURL(v)
	})
}

// UpdatePermanentURL sets the "permanent_url" field to the value that was provided on create.
func (u *TwitterNoteUpsertBulk) UpdatePermanentURL() *TwitterNoteUpsertBulk {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.UpdatePermanentURL()
	})
}

// ClearPermanentURL clears the value of the "permanent_url" field.
func (u *TwitterNoteUpsertBulk) ClearPermanentURL() *TwitterNoteUpsertBulk {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.ClearPermanentURL()
	})
}

// SetIsReply sets the "is_reply" field.
func (u *TwitterNoteUpsertBulk) SetIsReply(v bool) *TwitterNoteUpsertBulk {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.SetIsReply(v)
	})
}

// UpdateIsReply sets the "is_reply" field to the value that was provided on create.
func (u *TwitterNoteUpsertBulk) UpdateIsReply() *TwitterNoteUpsertBulk {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.UpdateIsReply()
	})
}

// ClearIsReply clears the value of the "is_reply" field.
func (u *TwitterNoteUpsertBulk) ClearIsReply() *TwitterNoteUpsertBulk {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.ClearIsReply()
	})
}

// SetIsPin sets the "is_pin" field.
func (u *TwitterNoteUpsertBulk) SetIsPin(v bool) *TwitterNoteUpsertBulk {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.SetIsPin(v)
	})
}

// UpdateIsPin sets the "is_pin" field to the value that was provided on create.
func (u *TwitterNoteUpsertBulk) UpdateIsPin() *TwitterNoteUpsertBulk {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.UpdateIsPin()
	})
}

// ClearIsPin clears the value of the "is_pin" field.
func (u *TwitterNoteUpsertBulk) ClearIsPin() *TwitterNoteUpsertBulk {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.ClearIsPin()
	})
}

// SetSensitiveContent sets the "sensitive_content" field.
func (u *TwitterNoteUpsertBulk) SetSensitiveContent(v bool) *TwitterNoteUpsertBulk {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.SetSensitiveContent(v)
	})
}

// UpdateSensitiveContent sets the "sensitive_content" field to the value that was provided on create.
func (u *TwitterNoteUpsertBulk) UpdateSensitiveContent() *TwitterNoteUpsertBulk {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.UpdateSensitiveContent()
	})
}

// ClearSensitiveContent clears the value of the "sensitive_content" field.
func (u *TwitterNoteUpsertBulk) ClearSensitiveContent() *TwitterNoteUpsertBulk {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.ClearSensitiveContent()
	})
}

// SetReplyTo sets the "reply_to" field.
func (u *TwitterNoteUpsertBulk) SetReplyTo(v string) *TwitterNoteUpsertBulk {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.SetReplyTo(v)
	})
}

// UpdateReplyTo sets the "reply_to" field to the value that was provided on create.
func (u *TwitterNoteUpsertBulk) UpdateReplyTo() *TwitterNoteUpsertBulk {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.UpdateReplyTo()
	})
}

// ClearReplyTo clears the value of the "reply_to" field.
func (u *TwitterNoteUpsertBulk) ClearReplyTo() *TwitterNoteUpsertBulk {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.ClearReplyTo()
	})
}

// SetRawYaml sets the "raw_yaml" field.
func (u *TwitterNoteUpsertBulk) SetRawYaml(v string) *TwitterNoteUpsertBulk {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.SetRawYaml(v)
	})
}

// UpdateRawYaml sets the "raw_yaml" field to the value that was provided on create.
func (u *TwitterNoteUpsertBulk) UpdateRawYaml() *TwitterNoteUpsertBulk {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.UpdateRawYaml()
	})
}

// SetHashTags sets the "hash_tags" field.
func (u *TwitterNoteUpsertBulk) SetHashTags(v []string) *TwitterNoteUpsertBulk {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.SetHashTags(v)
	})
}

// UpdateHashTags sets the "hash_tags" field to the value that was provided on create.
func (u *TwitterNoteUpsertBulk) UpdateHashTags() *TwitterNoteUpsertBulk {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.UpdateHashTags()
	})
}

// SetEvent sets the "event" field.
func (u *TwitterNoteUpsertBulk) SetEvent(v string) *TwitterNoteUpsertBulk {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.SetEvent(v)
	})
}

// UpdateEvent sets the "event" field to the value that was provided on create.
func (u *TwitterNoteUpsertBulk) UpdateEvent() *TwitterNoteUpsertBulk {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.UpdateEvent()
	})
}

// ClearEvent clears the value of the "event" field.
func (u *TwitterNoteUpsertBulk) ClearEvent() *TwitterNoteUpsertBulk {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.ClearEvent()
	})
}

// SetEventID sets the "event_id" field.
func (u *TwitterNoteUpsertBulk) SetEventID(v string) *TwitterNoteUpsertBulk {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.SetEventID(v)
	})
}

// UpdateEventID sets the "event_id" field to the value that was provided on create.
func (u *TwitterNoteUpsertBulk) UpdateEventID() *TwitterNoteUpsertBulk {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.UpdateEventID()
	})
}

// ClearEventID clears the value of the "event_id" field.
func (u *TwitterNoteUpsertBulk) ClearEventID() *TwitterNoteUpsertBulk {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.ClearEventID()
	})
}

// SetPublishStatus sets the "publish_status" field.
func (u *TwitterNoteUpsertBulk) SetPublishStatus(v string) *TwitterNoteUpsertBulk {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.SetPublishStatus(v)
	})
}

// UpdatePublishStatus sets the "publish_status" field to the value that was provided on create.
func (u *TwitterNoteUpsertBulk) UpdatePublishStatus() *TwitterNoteUpsertBulk {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.UpdatePublishStatus()
	})
}

// ClearPublishStatus clears the value of the "publish_status" field.
func (u *TwitterNoteUpsertBulk) ClearPublishStatus() *TwitterNoteUpsertBulk {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.ClearPublishStatus()
	})
}

// SetPublishedAt sets the "published_at" field.
func (u *TwitterNoteUpsertBulk) SetPublishedAt(v time.Time) *TwitterNoteUpsertBulk {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.SetPublishedAt(v)
	})
}

// UpdatePublishedAt sets the "published_at" field to the value that was provided on create.
func (u *TwitterNoteUpsertBulk) UpdatePublishedAt() *TwitterNoteUpsertBulk {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.UpdatePublishedAt()
	})
}

// ClearPublishedAt clears the value of the "published_at" field.
func (u *TwitterNoteUpsertBulk) ClearPublishedAt() *TwitterNoteUpsertBulk {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.ClearPublishedAt()
	})
}

// SetFetchedAt sets the "fetched_at" field.
func (u *TwitterNoteUpsertBulk) SetFetchedAt(v time.Time) *TwitterNoteUpsertBulk {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.SetFetchedAt(v)
	})
}

// UpdateFetchedAt sets the "fetched_at" field to the value that was provided on create.
func (u *TwitterNoteUpsertBulk) UpdateFetchedAt() *TwitterNoteUpsertBulk {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.UpdateFetchedAt()
	})
}

// ClearFetchedAt clears the value of the "fetched_at" field.
func (u *TwitterNoteUpsertBulk) ClearFetchedAt() *TwitterNoteUpsertBulk {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.ClearFetchedAt()
	})
}

// SetLanguage sets the "language" field.
func (u *TwitterNoteUpsertBulk) SetLanguage(v string) *TwitterNoteUpsertBulk {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.SetLanguage(v)
	})
}

// UpdateLanguage sets the "language" field to the value that was provided on create.
func (u *TwitterNoteUpsertBulk) UpdateLanguage() *TwitterNoteUpsertBulk {
	return u.Update(func(s *TwitterNoteUpsert) {
		s.UpdateLanguage()
	})
}

// Exec executes the query.
func (u *TwitterNoteUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("core: OnConflict was set for builder %d. Set it on the TwitterNoteCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("core: missing options for TwitterNoteCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TwitterNoteUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
