// Code generated by ent, DO NOT EDIT.

package core

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"freefrom.space/nobot/core/events"
)

// Events is the model entity for the Events schema.
type Events struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// EventID holds the value of the "event_id" field.
	EventID []byte `json:"event_id,omitempty"`
	// Pubkey holds the value of the "pubkey" field.
	Pubkey []byte `json:"pubkey,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Kind holds the value of the "kind" field.
	Kind int64 `json:"kind,omitempty"`
	// Tags holds the value of the "tags" field.
	Tags [][]string `json:"tags,omitempty"`
	// Content holds the value of the "content" field.
	Content string `json:"content,omitempty"`
	// Sig holds the value of the "sig" field.
	Sig          []byte `json:"sig,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Events) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case events.FieldEventID, events.FieldPubkey, events.FieldTags, events.FieldSig:
			values[i] = new([]byte)
		case events.FieldID, events.FieldKind:
			values[i] = new(sql.NullInt64)
		case events.FieldContent:
			values[i] = new(sql.NullString)
		case events.FieldCreatedAt, events.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Events fields.
func (e *Events) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case events.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			e.ID = int64(value.Int64)
		case events.FieldEventID:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field event_id", values[i])
			} else if value != nil {
				e.EventID = *value
			}
		case events.FieldPubkey:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field pubkey", values[i])
			} else if value != nil {
				e.Pubkey = *value
			}
		case events.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				e.CreatedAt = value.Time
			}
		case events.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				e.DeletedAt = new(time.Time)
				*e.DeletedAt = value.Time
			}
		case events.FieldKind:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field kind", values[i])
			} else if value.Valid {
				e.Kind = value.Int64
			}
		case events.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &e.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case events.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				e.Content = value.String
			}
		case events.FieldSig:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field sig", values[i])
			} else if value != nil {
				e.Sig = *value
			}
		default:
			e.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Events.
// This includes values selected through modifiers, order, etc.
func (e *Events) Value(name string) (ent.Value, error) {
	return e.selectValues.Get(name)
}

// Update returns a builder for updating this Events.
// Note that you need to call Events.Unwrap() before calling this method if this Events
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Events) Update() *EventsUpdateOne {
	return NewEventsClient(e.config).UpdateOne(e)
}

// Unwrap unwraps the Events entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Events) Unwrap() *Events {
	_tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("core: Events is not a transactional entity")
	}
	e.config.driver = _tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Events) String() string {
	var builder strings.Builder
	builder.WriteString("Events(")
	builder.WriteString(fmt.Sprintf("id=%v, ", e.ID))
	builder.WriteString("event_id=")
	builder.WriteString(fmt.Sprintf("%v", e.EventID))
	builder.WriteString(", ")
	builder.WriteString("pubkey=")
	builder.WriteString(fmt.Sprintf("%v", e.Pubkey))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(e.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := e.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("kind=")
	builder.WriteString(fmt.Sprintf("%v", e.Kind))
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", e.Tags))
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(e.Content)
	builder.WriteString(", ")
	builder.WriteString("sig=")
	builder.WriteString(fmt.Sprintf("%v", e.Sig))
	builder.WriteByte(')')
	return builder.String()
}

// EventsSlice is a parsable slice of Events.
type EventsSlice []*Events
