// Code generated by ent, DO NOT EDIT.

package core

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"freefrom.space/nobot/core/internal"
	"freefrom.space/nobot/core/predicate"
	"freefrom.space/nobot/core/twitternote"
)

// TwitterNoteUpdate is the builder for updating TwitterNote entities.
type TwitterNoteUpdate struct {
	config
	hooks     []Hook
	mutation  *TwitterNoteMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the TwitterNoteUpdate builder.
func (tnu *TwitterNoteUpdate) Where(ps ...predicate.TwitterNote) *TwitterNoteUpdate {
	tnu.mutation.Where(ps...)
	return tnu
}

// SetUserID sets the "user_id" field.
func (tnu *TwitterNoteUpdate) SetUserID(s string) *TwitterNoteUpdate {
	tnu.mutation.SetUserID(s)
	return tnu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (tnu *TwitterNoteUpdate) SetNillableUserID(s *string) *TwitterNoteUpdate {
	if s != nil {
		tnu.SetUserID(*s)
	}
	return tnu
}

// SetUserName sets the "user_name" field.
func (tnu *TwitterNoteUpdate) SetUserName(s string) *TwitterNoteUpdate {
	tnu.mutation.SetUserName(s)
	return tnu
}

// SetNillableUserName sets the "user_name" field if the given value is not nil.
func (tnu *TwitterNoteUpdate) SetNillableUserName(s *string) *TwitterNoteUpdate {
	if s != nil {
		tnu.SetUserName(*s)
	}
	return tnu
}

// SetConversationID sets the "conversation_id" field.
func (tnu *TwitterNoteUpdate) SetConversationID(s string) *TwitterNoteUpdate {
	tnu.mutation.SetConversationID(s)
	return tnu
}

// SetNillableConversationID sets the "conversation_id" field if the given value is not nil.
func (tnu *TwitterNoteUpdate) SetNillableConversationID(s *string) *TwitterNoteUpdate {
	if s != nil {
		tnu.SetConversationID(*s)
	}
	return tnu
}

// SetText sets the "text" field.
func (tnu *TwitterNoteUpdate) SetText(s string) *TwitterNoteUpdate {
	tnu.mutation.SetText(s)
	return tnu
}

// SetNillableText sets the "text" field if the given value is not nil.
func (tnu *TwitterNoteUpdate) SetNillableText(s *string) *TwitterNoteUpdate {
	if s != nil {
		tnu.SetText(*s)
	}
	return tnu
}

// SetLikes sets the "likes" field.
func (tnu *TwitterNoteUpdate) SetLikes(i int) *TwitterNoteUpdate {
	tnu.mutation.ResetLikes()
	tnu.mutation.SetLikes(i)
	return tnu
}

// SetNillableLikes sets the "likes" field if the given value is not nil.
func (tnu *TwitterNoteUpdate) SetNillableLikes(i *int) *TwitterNoteUpdate {
	if i != nil {
		tnu.SetLikes(*i)
	}
	return tnu
}

// AddLikes adds i to the "likes" field.
func (tnu *TwitterNoteUpdate) AddLikes(i int) *TwitterNoteUpdate {
	tnu.mutation.AddLikes(i)
	return tnu
}

// SetReplies sets the "replies" field.
func (tnu *TwitterNoteUpdate) SetReplies(i int) *TwitterNoteUpdate {
	tnu.mutation.ResetReplies()
	tnu.mutation.SetReplies(i)
	return tnu
}

// SetNillableReplies sets the "replies" field if the given value is not nil.
func (tnu *TwitterNoteUpdate) SetNillableReplies(i *int) *TwitterNoteUpdate {
	if i != nil {
		tnu.SetReplies(*i)
	}
	return tnu
}

// AddReplies adds i to the "replies" field.
func (tnu *TwitterNoteUpdate) AddReplies(i int) *TwitterNoteUpdate {
	tnu.mutation.AddReplies(i)
	return tnu
}

// SetRetweets sets the "retweets" field.
func (tnu *TwitterNoteUpdate) SetRetweets(i int) *TwitterNoteUpdate {
	tnu.mutation.ResetRetweets()
	tnu.mutation.SetRetweets(i)
	return tnu
}

// SetNillableRetweets sets the "retweets" field if the given value is not nil.
func (tnu *TwitterNoteUpdate) SetNillableRetweets(i *int) *TwitterNoteUpdate {
	if i != nil {
		tnu.SetRetweets(*i)
	}
	return tnu
}

// AddRetweets adds i to the "retweets" field.
func (tnu *TwitterNoteUpdate) AddRetweets(i int) *TwitterNoteUpdate {
	tnu.mutation.AddRetweets(i)
	return tnu
}

// SetViews sets the "views" field.
func (tnu *TwitterNoteUpdate) SetViews(i int) *TwitterNoteUpdate {
	tnu.mutation.ResetViews()
	tnu.mutation.SetViews(i)
	return tnu
}

// SetNillableViews sets the "views" field if the given value is not nil.
func (tnu *TwitterNoteUpdate) SetNillableViews(i *int) *TwitterNoteUpdate {
	if i != nil {
		tnu.SetViews(*i)
	}
	return tnu
}

// AddViews adds i to the "views" field.
func (tnu *TwitterNoteUpdate) AddViews(i int) *TwitterNoteUpdate {
	tnu.mutation.AddViews(i)
	return tnu
}

// SetPhotoIds sets the "photo_ids" field.
func (tnu *TwitterNoteUpdate) SetPhotoIds(s []string) *TwitterNoteUpdate {
	tnu.mutation.SetPhotoIds(s)
	return tnu
}

// AppendPhotoIds appends s to the "photo_ids" field.
func (tnu *TwitterNoteUpdate) AppendPhotoIds(s []string) *TwitterNoteUpdate {
	tnu.mutation.AppendPhotoIds(s)
	return tnu
}

// ClearPhotoIds clears the value of the "photo_ids" field.
func (tnu *TwitterNoteUpdate) ClearPhotoIds() *TwitterNoteUpdate {
	tnu.mutation.ClearPhotoIds()
	return tnu
}

// SetPhotoUrls sets the "photo_urls" field.
func (tnu *TwitterNoteUpdate) SetPhotoUrls(s []string) *TwitterNoteUpdate {
	tnu.mutation.SetPhotoUrls(s)
	return tnu
}

// AppendPhotoUrls appends s to the "photo_urls" field.
func (tnu *TwitterNoteUpdate) AppendPhotoUrls(s []string) *TwitterNoteUpdate {
	tnu.mutation.AppendPhotoUrls(s)
	return tnu
}

// ClearPhotoUrls clears the value of the "photo_urls" field.
func (tnu *TwitterNoteUpdate) ClearPhotoUrls() *TwitterNoteUpdate {
	tnu.mutation.ClearPhotoUrls()
	return tnu
}

// SetVideoID sets the "video_id" field.
func (tnu *TwitterNoteUpdate) SetVideoID(s []string) *TwitterNoteUpdate {
	tnu.mutation.SetVideoID(s)
	return tnu
}

// AppendVideoID appends s to the "video_id" field.
func (tnu *TwitterNoteUpdate) AppendVideoID(s []string) *TwitterNoteUpdate {
	tnu.mutation.AppendVideoID(s)
	return tnu
}

// ClearVideoID clears the value of the "video_id" field.
func (tnu *TwitterNoteUpdate) ClearVideoID() *TwitterNoteUpdate {
	tnu.mutation.ClearVideoID()
	return tnu
}

// SetVideoPreview sets the "video_preview" field.
func (tnu *TwitterNoteUpdate) SetVideoPreview(s []string) *TwitterNoteUpdate {
	tnu.mutation.SetVideoPreview(s)
	return tnu
}

// AppendVideoPreview appends s to the "video_preview" field.
func (tnu *TwitterNoteUpdate) AppendVideoPreview(s []string) *TwitterNoteUpdate {
	tnu.mutation.AppendVideoPreview(s)
	return tnu
}

// ClearVideoPreview clears the value of the "video_preview" field.
func (tnu *TwitterNoteUpdate) ClearVideoPreview() *TwitterNoteUpdate {
	tnu.mutation.ClearVideoPreview()
	return tnu
}

// SetVideoUrls sets the "video_urls" field.
func (tnu *TwitterNoteUpdate) SetVideoUrls(s []string) *TwitterNoteUpdate {
	tnu.mutation.SetVideoUrls(s)
	return tnu
}

// AppendVideoUrls appends s to the "video_urls" field.
func (tnu *TwitterNoteUpdate) AppendVideoUrls(s []string) *TwitterNoteUpdate {
	tnu.mutation.AppendVideoUrls(s)
	return tnu
}

// ClearVideoUrls clears the value of the "video_urls" field.
func (tnu *TwitterNoteUpdate) ClearVideoUrls() *TwitterNoteUpdate {
	tnu.mutation.ClearVideoUrls()
	return tnu
}

// SetMentionID sets the "mention_id" field.
func (tnu *TwitterNoteUpdate) SetMentionID(s []string) *TwitterNoteUpdate {
	tnu.mutation.SetMentionID(s)
	return tnu
}

// AppendMentionID appends s to the "mention_id" field.
func (tnu *TwitterNoteUpdate) AppendMentionID(s []string) *TwitterNoteUpdate {
	tnu.mutation.AppendMentionID(s)
	return tnu
}

// ClearMentionID clears the value of the "mention_id" field.
func (tnu *TwitterNoteUpdate) ClearMentionID() *TwitterNoteUpdate {
	tnu.mutation.ClearMentionID()
	return tnu
}

// SetMentionUsername sets the "mention_username" field.
func (tnu *TwitterNoteUpdate) SetMentionUsername(s []string) *TwitterNoteUpdate {
	tnu.mutation.SetMentionUsername(s)
	return tnu
}

// AppendMentionUsername appends s to the "mention_username" field.
func (tnu *TwitterNoteUpdate) AppendMentionUsername(s []string) *TwitterNoteUpdate {
	tnu.mutation.AppendMentionUsername(s)
	return tnu
}

// ClearMentionUsername clears the value of the "mention_username" field.
func (tnu *TwitterNoteUpdate) ClearMentionUsername() *TwitterNoteUpdate {
	tnu.mutation.ClearMentionUsername()
	return tnu
}

// SetMentionName sets the "mention_name" field.
func (tnu *TwitterNoteUpdate) SetMentionName(s []string) *TwitterNoteUpdate {
	tnu.mutation.SetMentionName(s)
	return tnu
}

// AppendMentionName appends s to the "mention_name" field.
func (tnu *TwitterNoteUpdate) AppendMentionName(s []string) *TwitterNoteUpdate {
	tnu.mutation.AppendMentionName(s)
	return tnu
}

// ClearMentionName clears the value of the "mention_name" field.
func (tnu *TwitterNoteUpdate) ClearMentionName() *TwitterNoteUpdate {
	tnu.mutation.ClearMentionName()
	return tnu
}

// SetRetweetedStatusID sets the "retweeted_status_id" field.
func (tnu *TwitterNoteUpdate) SetRetweetedStatusID(s string) *TwitterNoteUpdate {
	tnu.mutation.SetRetweetedStatusID(s)
	return tnu
}

// SetNillableRetweetedStatusID sets the "retweeted_status_id" field if the given value is not nil.
func (tnu *TwitterNoteUpdate) SetNillableRetweetedStatusID(s *string) *TwitterNoteUpdate {
	if s != nil {
		tnu.SetRetweetedStatusID(*s)
	}
	return tnu
}

// ClearRetweetedStatusID clears the value of the "retweeted_status_id" field.
func (tnu *TwitterNoteUpdate) ClearRetweetedStatusID() *TwitterNoteUpdate {
	tnu.mutation.ClearRetweetedStatusID()
	return tnu
}

// SetIsRetweet sets the "is_retweet" field.
func (tnu *TwitterNoteUpdate) SetIsRetweet(b bool) *TwitterNoteUpdate {
	tnu.mutation.SetIsRetweet(b)
	return tnu
}

// SetNillableIsRetweet sets the "is_retweet" field if the given value is not nil.
func (tnu *TwitterNoteUpdate) SetNillableIsRetweet(b *bool) *TwitterNoteUpdate {
	if b != nil {
		tnu.SetIsRetweet(*b)
	}
	return tnu
}

// ClearIsRetweet clears the value of the "is_retweet" field.
func (tnu *TwitterNoteUpdate) ClearIsRetweet() *TwitterNoteUpdate {
	tnu.mutation.ClearIsRetweet()
	return tnu
}

// SetPostAt sets the "post_at" field.
func (tnu *TwitterNoteUpdate) SetPostAt(t time.Time) *TwitterNoteUpdate {
	tnu.mutation.SetPostAt(t)
	return tnu
}

// SetNillablePostAt sets the "post_at" field if the given value is not nil.
func (tnu *TwitterNoteUpdate) SetNillablePostAt(t *time.Time) *TwitterNoteUpdate {
	if t != nil {
		tnu.SetPostAt(*t)
	}
	return tnu
}

// ClearPostAt clears the value of the "post_at" field.
func (tnu *TwitterNoteUpdate) ClearPostAt() *TwitterNoteUpdate {
	tnu.mutation.ClearPostAt()
	return tnu
}

// SetUrls sets the "urls" field.
func (tnu *TwitterNoteUpdate) SetUrls(s []string) *TwitterNoteUpdate {
	tnu.mutation.SetUrls(s)
	return tnu
}

// AppendUrls appends s to the "urls" field.
func (tnu *TwitterNoteUpdate) AppendUrls(s []string) *TwitterNoteUpdate {
	tnu.mutation.AppendUrls(s)
	return tnu
}

// ClearUrls clears the value of the "urls" field.
func (tnu *TwitterNoteUpdate) ClearUrls() *TwitterNoteUpdate {
	tnu.mutation.ClearUrls()
	return tnu
}

// SetHTMLText sets the "html_text" field.
func (tnu *TwitterNoteUpdate) SetHTMLText(s string) *TwitterNoteUpdate {
	tnu.mutation.SetHTMLText(s)
	return tnu
}

// SetNillableHTMLText sets the "html_text" field if the given value is not nil.
func (tnu *TwitterNoteUpdate) SetNillableHTMLText(s *string) *TwitterNoteUpdate {
	if s != nil {
		tnu.SetHTMLText(*s)
	}
	return tnu
}

// ClearHTMLText clears the value of the "html_text" field.
func (tnu *TwitterNoteUpdate) ClearHTMLText() *TwitterNoteUpdate {
	tnu.mutation.ClearHTMLText()
	return tnu
}

// SetPermanentURL sets the "permanent_url" field.
func (tnu *TwitterNoteUpdate) SetPermanentURL(s string) *TwitterNoteUpdate {
	tnu.mutation.SetPermanentURL(s)
	return tnu
}

// SetNillablePermanentURL sets the "permanent_url" field if the given value is not nil.
func (tnu *TwitterNoteUpdate) SetNillablePermanentURL(s *string) *TwitterNoteUpdate {
	if s != nil {
		tnu.SetPermanentURL(*s)
	}
	return tnu
}

// ClearPermanentURL clears the value of the "permanent_url" field.
func (tnu *TwitterNoteUpdate) ClearPermanentURL() *TwitterNoteUpdate {
	tnu.mutation.ClearPermanentURL()
	return tnu
}

// SetIsReply sets the "is_reply" field.
func (tnu *TwitterNoteUpdate) SetIsReply(b bool) *TwitterNoteUpdate {
	tnu.mutation.SetIsReply(b)
	return tnu
}

// SetNillableIsReply sets the "is_reply" field if the given value is not nil.
func (tnu *TwitterNoteUpdate) SetNillableIsReply(b *bool) *TwitterNoteUpdate {
	if b != nil {
		tnu.SetIsReply(*b)
	}
	return tnu
}

// ClearIsReply clears the value of the "is_reply" field.
func (tnu *TwitterNoteUpdate) ClearIsReply() *TwitterNoteUpdate {
	tnu.mutation.ClearIsReply()
	return tnu
}

// SetIsPin sets the "is_pin" field.
func (tnu *TwitterNoteUpdate) SetIsPin(b bool) *TwitterNoteUpdate {
	tnu.mutation.SetIsPin(b)
	return tnu
}

// SetNillableIsPin sets the "is_pin" field if the given value is not nil.
func (tnu *TwitterNoteUpdate) SetNillableIsPin(b *bool) *TwitterNoteUpdate {
	if b != nil {
		tnu.SetIsPin(*b)
	}
	return tnu
}

// ClearIsPin clears the value of the "is_pin" field.
func (tnu *TwitterNoteUpdate) ClearIsPin() *TwitterNoteUpdate {
	tnu.mutation.ClearIsPin()
	return tnu
}

// SetSensitiveContent sets the "sensitive_content" field.
func (tnu *TwitterNoteUpdate) SetSensitiveContent(b bool) *TwitterNoteUpdate {
	tnu.mutation.SetSensitiveContent(b)
	return tnu
}

// SetNillableSensitiveContent sets the "sensitive_content" field if the given value is not nil.
func (tnu *TwitterNoteUpdate) SetNillableSensitiveContent(b *bool) *TwitterNoteUpdate {
	if b != nil {
		tnu.SetSensitiveContent(*b)
	}
	return tnu
}

// ClearSensitiveContent clears the value of the "sensitive_content" field.
func (tnu *TwitterNoteUpdate) ClearSensitiveContent() *TwitterNoteUpdate {
	tnu.mutation.ClearSensitiveContent()
	return tnu
}

// SetReplyTo sets the "reply_to" field.
func (tnu *TwitterNoteUpdate) SetReplyTo(s string) *TwitterNoteUpdate {
	tnu.mutation.SetReplyTo(s)
	return tnu
}

// SetNillableReplyTo sets the "reply_to" field if the given value is not nil.
func (tnu *TwitterNoteUpdate) SetNillableReplyTo(s *string) *TwitterNoteUpdate {
	if s != nil {
		tnu.SetReplyTo(*s)
	}
	return tnu
}

// ClearReplyTo clears the value of the "reply_to" field.
func (tnu *TwitterNoteUpdate) ClearReplyTo() *TwitterNoteUpdate {
	tnu.mutation.ClearReplyTo()
	return tnu
}

// SetRawYaml sets the "raw_yaml" field.
func (tnu *TwitterNoteUpdate) SetRawYaml(s string) *TwitterNoteUpdate {
	tnu.mutation.SetRawYaml(s)
	return tnu
}

// SetNillableRawYaml sets the "raw_yaml" field if the given value is not nil.
func (tnu *TwitterNoteUpdate) SetNillableRawYaml(s *string) *TwitterNoteUpdate {
	if s != nil {
		tnu.SetRawYaml(*s)
	}
	return tnu
}

// SetHashTags sets the "hash_tags" field.
func (tnu *TwitterNoteUpdate) SetHashTags(s []string) *TwitterNoteUpdate {
	tnu.mutation.SetHashTags(s)
	return tnu
}

// AppendHashTags appends s to the "hash_tags" field.
func (tnu *TwitterNoteUpdate) AppendHashTags(s []string) *TwitterNoteUpdate {
	tnu.mutation.AppendHashTags(s)
	return tnu
}

// SetEvent sets the "event" field.
func (tnu *TwitterNoteUpdate) SetEvent(s string) *TwitterNoteUpdate {
	tnu.mutation.SetEvent(s)
	return tnu
}

// SetNillableEvent sets the "event" field if the given value is not nil.
func (tnu *TwitterNoteUpdate) SetNillableEvent(s *string) *TwitterNoteUpdate {
	if s != nil {
		tnu.SetEvent(*s)
	}
	return tnu
}

// ClearEvent clears the value of the "event" field.
func (tnu *TwitterNoteUpdate) ClearEvent() *TwitterNoteUpdate {
	tnu.mutation.ClearEvent()
	return tnu
}

// SetEventID sets the "event_id" field.
func (tnu *TwitterNoteUpdate) SetEventID(s string) *TwitterNoteUpdate {
	tnu.mutation.SetEventID(s)
	return tnu
}

// SetNillableEventID sets the "event_id" field if the given value is not nil.
func (tnu *TwitterNoteUpdate) SetNillableEventID(s *string) *TwitterNoteUpdate {
	if s != nil {
		tnu.SetEventID(*s)
	}
	return tnu
}

// ClearEventID clears the value of the "event_id" field.
func (tnu *TwitterNoteUpdate) ClearEventID() *TwitterNoteUpdate {
	tnu.mutation.ClearEventID()
	return tnu
}

// SetPublishStatus sets the "publish_status" field.
func (tnu *TwitterNoteUpdate) SetPublishStatus(s string) *TwitterNoteUpdate {
	tnu.mutation.SetPublishStatus(s)
	return tnu
}

// SetNillablePublishStatus sets the "publish_status" field if the given value is not nil.
func (tnu *TwitterNoteUpdate) SetNillablePublishStatus(s *string) *TwitterNoteUpdate {
	if s != nil {
		tnu.SetPublishStatus(*s)
	}
	return tnu
}

// ClearPublishStatus clears the value of the "publish_status" field.
func (tnu *TwitterNoteUpdate) ClearPublishStatus() *TwitterNoteUpdate {
	tnu.mutation.ClearPublishStatus()
	return tnu
}

// SetPublishedAt sets the "published_at" field.
func (tnu *TwitterNoteUpdate) SetPublishedAt(t time.Time) *TwitterNoteUpdate {
	tnu.mutation.SetPublishedAt(t)
	return tnu
}

// SetNillablePublishedAt sets the "published_at" field if the given value is not nil.
func (tnu *TwitterNoteUpdate) SetNillablePublishedAt(t *time.Time) *TwitterNoteUpdate {
	if t != nil {
		tnu.SetPublishedAt(*t)
	}
	return tnu
}

// ClearPublishedAt clears the value of the "published_at" field.
func (tnu *TwitterNoteUpdate) ClearPublishedAt() *TwitterNoteUpdate {
	tnu.mutation.ClearPublishedAt()
	return tnu
}

// SetFetchedAt sets the "fetched_at" field.
func (tnu *TwitterNoteUpdate) SetFetchedAt(t time.Time) *TwitterNoteUpdate {
	tnu.mutation.SetFetchedAt(t)
	return tnu
}

// SetNillableFetchedAt sets the "fetched_at" field if the given value is not nil.
func (tnu *TwitterNoteUpdate) SetNillableFetchedAt(t *time.Time) *TwitterNoteUpdate {
	if t != nil {
		tnu.SetFetchedAt(*t)
	}
	return tnu
}

// ClearFetchedAt clears the value of the "fetched_at" field.
func (tnu *TwitterNoteUpdate) ClearFetchedAt() *TwitterNoteUpdate {
	tnu.mutation.ClearFetchedAt()
	return tnu
}

// SetLanguage sets the "language" field.
func (tnu *TwitterNoteUpdate) SetLanguage(s string) *TwitterNoteUpdate {
	tnu.mutation.SetLanguage(s)
	return tnu
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (tnu *TwitterNoteUpdate) SetNillableLanguage(s *string) *TwitterNoteUpdate {
	if s != nil {
		tnu.SetLanguage(*s)
	}
	return tnu
}

// Mutation returns the TwitterNoteMutation object of the builder.
func (tnu *TwitterNoteUpdate) Mutation() *TwitterNoteMutation {
	return tnu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tnu *TwitterNoteUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tnu.sqlSave, tnu.mutation, tnu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tnu *TwitterNoteUpdate) SaveX(ctx context.Context) int {
	affected, err := tnu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tnu *TwitterNoteUpdate) Exec(ctx context.Context) error {
	_, err := tnu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tnu *TwitterNoteUpdate) ExecX(ctx context.Context) {
	if err := tnu.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tnu *TwitterNoteUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TwitterNoteUpdate {
	tnu.modifiers = append(tnu.modifiers, modifiers...)
	return tnu
}

func (tnu *TwitterNoteUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(twitternote.Table, twitternote.Columns, sqlgraph.NewFieldSpec(twitternote.FieldID, field.TypeString))
	if ps := tnu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tnu.mutation.UserID(); ok {
		_spec.SetField(twitternote.FieldUserID, field.TypeString, value)
	}
	if value, ok := tnu.mutation.UserName(); ok {
		_spec.SetField(twitternote.FieldUserName, field.TypeString, value)
	}
	if value, ok := tnu.mutation.ConversationID(); ok {
		_spec.SetField(twitternote.FieldConversationID, field.TypeString, value)
	}
	if value, ok := tnu.mutation.Text(); ok {
		_spec.SetField(twitternote.FieldText, field.TypeString, value)
	}
	if value, ok := tnu.mutation.Likes(); ok {
		_spec.SetField(twitternote.FieldLikes, field.TypeInt, value)
	}
	if value, ok := tnu.mutation.AddedLikes(); ok {
		_spec.AddField(twitternote.FieldLikes, field.TypeInt, value)
	}
	if value, ok := tnu.mutation.Replies(); ok {
		_spec.SetField(twitternote.FieldReplies, field.TypeInt, value)
	}
	if value, ok := tnu.mutation.AddedReplies(); ok {
		_spec.AddField(twitternote.FieldReplies, field.TypeInt, value)
	}
	if value, ok := tnu.mutation.Retweets(); ok {
		_spec.SetField(twitternote.FieldRetweets, field.TypeInt, value)
	}
	if value, ok := tnu.mutation.AddedRetweets(); ok {
		_spec.AddField(twitternote.FieldRetweets, field.TypeInt, value)
	}
	if value, ok := tnu.mutation.Views(); ok {
		_spec.SetField(twitternote.FieldViews, field.TypeInt, value)
	}
	if value, ok := tnu.mutation.AddedViews(); ok {
		_spec.AddField(twitternote.FieldViews, field.TypeInt, value)
	}
	if value, ok := tnu.mutation.PhotoIds(); ok {
		_spec.SetField(twitternote.FieldPhotoIds, field.TypeJSON, value)
	}
	if value, ok := tnu.mutation.AppendedPhotoIds(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, twitternote.FieldPhotoIds, value)
		})
	}
	if tnu.mutation.PhotoIdsCleared() {
		_spec.ClearField(twitternote.FieldPhotoIds, field.TypeJSON)
	}
	if value, ok := tnu.mutation.PhotoUrls(); ok {
		_spec.SetField(twitternote.FieldPhotoUrls, field.TypeJSON, value)
	}
	if value, ok := tnu.mutation.AppendedPhotoUrls(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, twitternote.FieldPhotoUrls, value)
		})
	}
	if tnu.mutation.PhotoUrlsCleared() {
		_spec.ClearField(twitternote.FieldPhotoUrls, field.TypeJSON)
	}
	if value, ok := tnu.mutation.VideoID(); ok {
		_spec.SetField(twitternote.FieldVideoID, field.TypeJSON, value)
	}
	if value, ok := tnu.mutation.AppendedVideoID(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, twitternote.FieldVideoID, value)
		})
	}
	if tnu.mutation.VideoIDCleared() {
		_spec.ClearField(twitternote.FieldVideoID, field.TypeJSON)
	}
	if value, ok := tnu.mutation.VideoPreview(); ok {
		_spec.SetField(twitternote.FieldVideoPreview, field.TypeJSON, value)
	}
	if value, ok := tnu.mutation.AppendedVideoPreview(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, twitternote.FieldVideoPreview, value)
		})
	}
	if tnu.mutation.VideoPreviewCleared() {
		_spec.ClearField(twitternote.FieldVideoPreview, field.TypeJSON)
	}
	if value, ok := tnu.mutation.VideoUrls(); ok {
		_spec.SetField(twitternote.FieldVideoUrls, field.TypeJSON, value)
	}
	if value, ok := tnu.mutation.AppendedVideoUrls(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, twitternote.FieldVideoUrls, value)
		})
	}
	if tnu.mutation.VideoUrlsCleared() {
		_spec.ClearField(twitternote.FieldVideoUrls, field.TypeJSON)
	}
	if value, ok := tnu.mutation.MentionID(); ok {
		_spec.SetField(twitternote.FieldMentionID, field.TypeJSON, value)
	}
	if value, ok := tnu.mutation.AppendedMentionID(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, twitternote.FieldMentionID, value)
		})
	}
	if tnu.mutation.MentionIDCleared() {
		_spec.ClearField(twitternote.FieldMentionID, field.TypeJSON)
	}
	if value, ok := tnu.mutation.MentionUsername(); ok {
		_spec.SetField(twitternote.FieldMentionUsername, field.TypeJSON, value)
	}
	if value, ok := tnu.mutation.AppendedMentionUsername(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, twitternote.FieldMentionUsername, value)
		})
	}
	if tnu.mutation.MentionUsernameCleared() {
		_spec.ClearField(twitternote.FieldMentionUsername, field.TypeJSON)
	}
	if value, ok := tnu.mutation.MentionName(); ok {
		_spec.SetField(twitternote.FieldMentionName, field.TypeJSON, value)
	}
	if value, ok := tnu.mutation.AppendedMentionName(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, twitternote.FieldMentionName, value)
		})
	}
	if tnu.mutation.MentionNameCleared() {
		_spec.ClearField(twitternote.FieldMentionName, field.TypeJSON)
	}
	if value, ok := tnu.mutation.RetweetedStatusID(); ok {
		_spec.SetField(twitternote.FieldRetweetedStatusID, field.TypeString, value)
	}
	if tnu.mutation.RetweetedStatusIDCleared() {
		_spec.ClearField(twitternote.FieldRetweetedStatusID, field.TypeString)
	}
	if value, ok := tnu.mutation.IsRetweet(); ok {
		_spec.SetField(twitternote.FieldIsRetweet, field.TypeBool, value)
	}
	if tnu.mutation.IsRetweetCleared() {
		_spec.ClearField(twitternote.FieldIsRetweet, field.TypeBool)
	}
	if value, ok := tnu.mutation.PostAt(); ok {
		_spec.SetField(twitternote.FieldPostAt, field.TypeTime, value)
	}
	if tnu.mutation.PostAtCleared() {
		_spec.ClearField(twitternote.FieldPostAt, field.TypeTime)
	}
	if value, ok := tnu.mutation.Urls(); ok {
		_spec.SetField(twitternote.FieldUrls, field.TypeJSON, value)
	}
	if value, ok := tnu.mutation.AppendedUrls(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, twitternote.FieldUrls, value)
		})
	}
	if tnu.mutation.UrlsCleared() {
		_spec.ClearField(twitternote.FieldUrls, field.TypeJSON)
	}
	if value, ok := tnu.mutation.HTMLText(); ok {
		_spec.SetField(twitternote.FieldHTMLText, field.TypeString, value)
	}
	if tnu.mutation.HTMLTextCleared() {
		_spec.ClearField(twitternote.FieldHTMLText, field.TypeString)
	}
	if value, ok := tnu.mutation.PermanentURL(); ok {
		_spec.SetField(twitternote.FieldPermanentURL, field.TypeString, value)
	}
	if tnu.mutation.PermanentURLCleared() {
		_spec.ClearField(twitternote.FieldPermanentURL, field.TypeString)
	}
	if value, ok := tnu.mutation.IsReply(); ok {
		_spec.SetField(twitternote.FieldIsReply, field.TypeBool, value)
	}
	if tnu.mutation.IsReplyCleared() {
		_spec.ClearField(twitternote.FieldIsReply, field.TypeBool)
	}
	if value, ok := tnu.mutation.IsPin(); ok {
		_spec.SetField(twitternote.FieldIsPin, field.TypeBool, value)
	}
	if tnu.mutation.IsPinCleared() {
		_spec.ClearField(twitternote.FieldIsPin, field.TypeBool)
	}
	if value, ok := tnu.mutation.SensitiveContent(); ok {
		_spec.SetField(twitternote.FieldSensitiveContent, field.TypeBool, value)
	}
	if tnu.mutation.SensitiveContentCleared() {
		_spec.ClearField(twitternote.FieldSensitiveContent, field.TypeBool)
	}
	if value, ok := tnu.mutation.ReplyTo(); ok {
		_spec.SetField(twitternote.FieldReplyTo, field.TypeString, value)
	}
	if tnu.mutation.ReplyToCleared() {
		_spec.ClearField(twitternote.FieldReplyTo, field.TypeString)
	}
	if value, ok := tnu.mutation.RawYaml(); ok {
		_spec.SetField(twitternote.FieldRawYaml, field.TypeString, value)
	}
	if value, ok := tnu.mutation.HashTags(); ok {
		_spec.SetField(twitternote.FieldHashTags, field.TypeJSON, value)
	}
	if value, ok := tnu.mutation.AppendedHashTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, twitternote.FieldHashTags, value)
		})
	}
	if value, ok := tnu.mutation.Event(); ok {
		_spec.SetField(twitternote.FieldEvent, field.TypeString, value)
	}
	if tnu.mutation.EventCleared() {
		_spec.ClearField(twitternote.FieldEvent, field.TypeString)
	}
	if value, ok := tnu.mutation.EventID(); ok {
		_spec.SetField(twitternote.FieldEventID, field.TypeString, value)
	}
	if tnu.mutation.EventIDCleared() {
		_spec.ClearField(twitternote.FieldEventID, field.TypeString)
	}
	if value, ok := tnu.mutation.PublishStatus(); ok {
		_spec.SetField(twitternote.FieldPublishStatus, field.TypeString, value)
	}
	if tnu.mutation.PublishStatusCleared() {
		_spec.ClearField(twitternote.FieldPublishStatus, field.TypeString)
	}
	if value, ok := tnu.mutation.PublishedAt(); ok {
		_spec.SetField(twitternote.FieldPublishedAt, field.TypeTime, value)
	}
	if tnu.mutation.PublishedAtCleared() {
		_spec.ClearField(twitternote.FieldPublishedAt, field.TypeTime)
	}
	if value, ok := tnu.mutation.FetchedAt(); ok {
		_spec.SetField(twitternote.FieldFetchedAt, field.TypeTime, value)
	}
	if tnu.mutation.FetchedAtCleared() {
		_spec.ClearField(twitternote.FieldFetchedAt, field.TypeTime)
	}
	if value, ok := tnu.mutation.Language(); ok {
		_spec.SetField(twitternote.FieldLanguage, field.TypeString, value)
	}
	_spec.Node.Schema = tnu.schemaConfig.TwitterNote
	ctx = internal.NewSchemaConfigContext(ctx, tnu.schemaConfig)
	_spec.AddModifiers(tnu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, tnu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{twitternote.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tnu.mutation.done = true
	return n, nil
}

// TwitterNoteUpdateOne is the builder for updating a single TwitterNote entity.
type TwitterNoteUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *TwitterNoteMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUserID sets the "user_id" field.
func (tnuo *TwitterNoteUpdateOne) SetUserID(s string) *TwitterNoteUpdateOne {
	tnuo.mutation.SetUserID(s)
	return tnuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (tnuo *TwitterNoteUpdateOne) SetNillableUserID(s *string) *TwitterNoteUpdateOne {
	if s != nil {
		tnuo.SetUserID(*s)
	}
	return tnuo
}

// SetUserName sets the "user_name" field.
func (tnuo *TwitterNoteUpdateOne) SetUserName(s string) *TwitterNoteUpdateOne {
	tnuo.mutation.SetUserName(s)
	return tnuo
}

// SetNillableUserName sets the "user_name" field if the given value is not nil.
func (tnuo *TwitterNoteUpdateOne) SetNillableUserName(s *string) *TwitterNoteUpdateOne {
	if s != nil {
		tnuo.SetUserName(*s)
	}
	return tnuo
}

// SetConversationID sets the "conversation_id" field.
func (tnuo *TwitterNoteUpdateOne) SetConversationID(s string) *TwitterNoteUpdateOne {
	tnuo.mutation.SetConversationID(s)
	return tnuo
}

// SetNillableConversationID sets the "conversation_id" field if the given value is not nil.
func (tnuo *TwitterNoteUpdateOne) SetNillableConversationID(s *string) *TwitterNoteUpdateOne {
	if s != nil {
		tnuo.SetConversationID(*s)
	}
	return tnuo
}

// SetText sets the "text" field.
func (tnuo *TwitterNoteUpdateOne) SetText(s string) *TwitterNoteUpdateOne {
	tnuo.mutation.SetText(s)
	return tnuo
}

// SetNillableText sets the "text" field if the given value is not nil.
func (tnuo *TwitterNoteUpdateOne) SetNillableText(s *string) *TwitterNoteUpdateOne {
	if s != nil {
		tnuo.SetText(*s)
	}
	return tnuo
}

// SetLikes sets the "likes" field.
func (tnuo *TwitterNoteUpdateOne) SetLikes(i int) *TwitterNoteUpdateOne {
	tnuo.mutation.ResetLikes()
	tnuo.mutation.SetLikes(i)
	return tnuo
}

// SetNillableLikes sets the "likes" field if the given value is not nil.
func (tnuo *TwitterNoteUpdateOne) SetNillableLikes(i *int) *TwitterNoteUpdateOne {
	if i != nil {
		tnuo.SetLikes(*i)
	}
	return tnuo
}

// AddLikes adds i to the "likes" field.
func (tnuo *TwitterNoteUpdateOne) AddLikes(i int) *TwitterNoteUpdateOne {
	tnuo.mutation.AddLikes(i)
	return tnuo
}

// SetReplies sets the "replies" field.
func (tnuo *TwitterNoteUpdateOne) SetReplies(i int) *TwitterNoteUpdateOne {
	tnuo.mutation.ResetReplies()
	tnuo.mutation.SetReplies(i)
	return tnuo
}

// SetNillableReplies sets the "replies" field if the given value is not nil.
func (tnuo *TwitterNoteUpdateOne) SetNillableReplies(i *int) *TwitterNoteUpdateOne {
	if i != nil {
		tnuo.SetReplies(*i)
	}
	return tnuo
}

// AddReplies adds i to the "replies" field.
func (tnuo *TwitterNoteUpdateOne) AddReplies(i int) *TwitterNoteUpdateOne {
	tnuo.mutation.AddReplies(i)
	return tnuo
}

// SetRetweets sets the "retweets" field.
func (tnuo *TwitterNoteUpdateOne) SetRetweets(i int) *TwitterNoteUpdateOne {
	tnuo.mutation.ResetRetweets()
	tnuo.mutation.SetRetweets(i)
	return tnuo
}

// SetNillableRetweets sets the "retweets" field if the given value is not nil.
func (tnuo *TwitterNoteUpdateOne) SetNillableRetweets(i *int) *TwitterNoteUpdateOne {
	if i != nil {
		tnuo.SetRetweets(*i)
	}
	return tnuo
}

// AddRetweets adds i to the "retweets" field.
func (tnuo *TwitterNoteUpdateOne) AddRetweets(i int) *TwitterNoteUpdateOne {
	tnuo.mutation.AddRetweets(i)
	return tnuo
}

// SetViews sets the "views" field.
func (tnuo *TwitterNoteUpdateOne) SetViews(i int) *TwitterNoteUpdateOne {
	tnuo.mutation.ResetViews()
	tnuo.mutation.SetViews(i)
	return tnuo
}

// SetNillableViews sets the "views" field if the given value is not nil.
func (tnuo *TwitterNoteUpdateOne) SetNillableViews(i *int) *TwitterNoteUpdateOne {
	if i != nil {
		tnuo.SetViews(*i)
	}
	return tnuo
}

// AddViews adds i to the "views" field.
func (tnuo *TwitterNoteUpdateOne) AddViews(i int) *TwitterNoteUpdateOne {
	tnuo.mutation.AddViews(i)
	return tnuo
}

// SetPhotoIds sets the "photo_ids" field.
func (tnuo *TwitterNoteUpdateOne) SetPhotoIds(s []string) *TwitterNoteUpdateOne {
	tnuo.mutation.SetPhotoIds(s)
	return tnuo
}

// AppendPhotoIds appends s to the "photo_ids" field.
func (tnuo *TwitterNoteUpdateOne) AppendPhotoIds(s []string) *TwitterNoteUpdateOne {
	tnuo.mutation.AppendPhotoIds(s)
	return tnuo
}

// ClearPhotoIds clears the value of the "photo_ids" field.
func (tnuo *TwitterNoteUpdateOne) ClearPhotoIds() *TwitterNoteUpdateOne {
	tnuo.mutation.ClearPhotoIds()
	return tnuo
}

// SetPhotoUrls sets the "photo_urls" field.
func (tnuo *TwitterNoteUpdateOne) SetPhotoUrls(s []string) *TwitterNoteUpdateOne {
	tnuo.mutation.SetPhotoUrls(s)
	return tnuo
}

// AppendPhotoUrls appends s to the "photo_urls" field.
func (tnuo *TwitterNoteUpdateOne) AppendPhotoUrls(s []string) *TwitterNoteUpdateOne {
	tnuo.mutation.AppendPhotoUrls(s)
	return tnuo
}

// ClearPhotoUrls clears the value of the "photo_urls" field.
func (tnuo *TwitterNoteUpdateOne) ClearPhotoUrls() *TwitterNoteUpdateOne {
	tnuo.mutation.ClearPhotoUrls()
	return tnuo
}

// SetVideoID sets the "video_id" field.
func (tnuo *TwitterNoteUpdateOne) SetVideoID(s []string) *TwitterNoteUpdateOne {
	tnuo.mutation.SetVideoID(s)
	return tnuo
}

// AppendVideoID appends s to the "video_id" field.
func (tnuo *TwitterNoteUpdateOne) AppendVideoID(s []string) *TwitterNoteUpdateOne {
	tnuo.mutation.AppendVideoID(s)
	return tnuo
}

// ClearVideoID clears the value of the "video_id" field.
func (tnuo *TwitterNoteUpdateOne) ClearVideoID() *TwitterNoteUpdateOne {
	tnuo.mutation.ClearVideoID()
	return tnuo
}

// SetVideoPreview sets the "video_preview" field.
func (tnuo *TwitterNoteUpdateOne) SetVideoPreview(s []string) *TwitterNoteUpdateOne {
	tnuo.mutation.SetVideoPreview(s)
	return tnuo
}

// AppendVideoPreview appends s to the "video_preview" field.
func (tnuo *TwitterNoteUpdateOne) AppendVideoPreview(s []string) *TwitterNoteUpdateOne {
	tnuo.mutation.AppendVideoPreview(s)
	return tnuo
}

// ClearVideoPreview clears the value of the "video_preview" field.
func (tnuo *TwitterNoteUpdateOne) ClearVideoPreview() *TwitterNoteUpdateOne {
	tnuo.mutation.ClearVideoPreview()
	return tnuo
}

// SetVideoUrls sets the "video_urls" field.
func (tnuo *TwitterNoteUpdateOne) SetVideoUrls(s []string) *TwitterNoteUpdateOne {
	tnuo.mutation.SetVideoUrls(s)
	return tnuo
}

// AppendVideoUrls appends s to the "video_urls" field.
func (tnuo *TwitterNoteUpdateOne) AppendVideoUrls(s []string) *TwitterNoteUpdateOne {
	tnuo.mutation.AppendVideoUrls(s)
	return tnuo
}

// ClearVideoUrls clears the value of the "video_urls" field.
func (tnuo *TwitterNoteUpdateOne) ClearVideoUrls() *TwitterNoteUpdateOne {
	tnuo.mutation.ClearVideoUrls()
	return tnuo
}

// SetMentionID sets the "mention_id" field.
func (tnuo *TwitterNoteUpdateOne) SetMentionID(s []string) *TwitterNoteUpdateOne {
	tnuo.mutation.SetMentionID(s)
	return tnuo
}

// AppendMentionID appends s to the "mention_id" field.
func (tnuo *TwitterNoteUpdateOne) AppendMentionID(s []string) *TwitterNoteUpdateOne {
	tnuo.mutation.AppendMentionID(s)
	return tnuo
}

// ClearMentionID clears the value of the "mention_id" field.
func (tnuo *TwitterNoteUpdateOne) ClearMentionID() *TwitterNoteUpdateOne {
	tnuo.mutation.ClearMentionID()
	return tnuo
}

// SetMentionUsername sets the "mention_username" field.
func (tnuo *TwitterNoteUpdateOne) SetMentionUsername(s []string) *TwitterNoteUpdateOne {
	tnuo.mutation.SetMentionUsername(s)
	return tnuo
}

// AppendMentionUsername appends s to the "mention_username" field.
func (tnuo *TwitterNoteUpdateOne) AppendMentionUsername(s []string) *TwitterNoteUpdateOne {
	tnuo.mutation.AppendMentionUsername(s)
	return tnuo
}

// ClearMentionUsername clears the value of the "mention_username" field.
func (tnuo *TwitterNoteUpdateOne) ClearMentionUsername() *TwitterNoteUpdateOne {
	tnuo.mutation.ClearMentionUsername()
	return tnuo
}

// SetMentionName sets the "mention_name" field.
func (tnuo *TwitterNoteUpdateOne) SetMentionName(s []string) *TwitterNoteUpdateOne {
	tnuo.mutation.SetMentionName(s)
	return tnuo
}

// AppendMentionName appends s to the "mention_name" field.
func (tnuo *TwitterNoteUpdateOne) AppendMentionName(s []string) *TwitterNoteUpdateOne {
	tnuo.mutation.AppendMentionName(s)
	return tnuo
}

// ClearMentionName clears the value of the "mention_name" field.
func (tnuo *TwitterNoteUpdateOne) ClearMentionName() *TwitterNoteUpdateOne {
	tnuo.mutation.ClearMentionName()
	return tnuo
}

// SetRetweetedStatusID sets the "retweeted_status_id" field.
func (tnuo *TwitterNoteUpdateOne) SetRetweetedStatusID(s string) *TwitterNoteUpdateOne {
	tnuo.mutation.SetRetweetedStatusID(s)
	return tnuo
}

// SetNillableRetweetedStatusID sets the "retweeted_status_id" field if the given value is not nil.
func (tnuo *TwitterNoteUpdateOne) SetNillableRetweetedStatusID(s *string) *TwitterNoteUpdateOne {
	if s != nil {
		tnuo.SetRetweetedStatusID(*s)
	}
	return tnuo
}

// ClearRetweetedStatusID clears the value of the "retweeted_status_id" field.
func (tnuo *TwitterNoteUpdateOne) ClearRetweetedStatusID() *TwitterNoteUpdateOne {
	tnuo.mutation.ClearRetweetedStatusID()
	return tnuo
}

// SetIsRetweet sets the "is_retweet" field.
func (tnuo *TwitterNoteUpdateOne) SetIsRetweet(b bool) *TwitterNoteUpdateOne {
	tnuo.mutation.SetIsRetweet(b)
	return tnuo
}

// SetNillableIsRetweet sets the "is_retweet" field if the given value is not nil.
func (tnuo *TwitterNoteUpdateOne) SetNillableIsRetweet(b *bool) *TwitterNoteUpdateOne {
	if b != nil {
		tnuo.SetIsRetweet(*b)
	}
	return tnuo
}

// ClearIsRetweet clears the value of the "is_retweet" field.
func (tnuo *TwitterNoteUpdateOne) ClearIsRetweet() *TwitterNoteUpdateOne {
	tnuo.mutation.ClearIsRetweet()
	return tnuo
}

// SetPostAt sets the "post_at" field.
func (tnuo *TwitterNoteUpdateOne) SetPostAt(t time.Time) *TwitterNoteUpdateOne {
	tnuo.mutation.SetPostAt(t)
	return tnuo
}

// SetNillablePostAt sets the "post_at" field if the given value is not nil.
func (tnuo *TwitterNoteUpdateOne) SetNillablePostAt(t *time.Time) *TwitterNoteUpdateOne {
	if t != nil {
		tnuo.SetPostAt(*t)
	}
	return tnuo
}

// ClearPostAt clears the value of the "post_at" field.
func (tnuo *TwitterNoteUpdateOne) ClearPostAt() *TwitterNoteUpdateOne {
	tnuo.mutation.ClearPostAt()
	return tnuo
}

// SetUrls sets the "urls" field.
func (tnuo *TwitterNoteUpdateOne) SetUrls(s []string) *TwitterNoteUpdateOne {
	tnuo.mutation.SetUrls(s)
	return tnuo
}

// AppendUrls appends s to the "urls" field.
func (tnuo *TwitterNoteUpdateOne) AppendUrls(s []string) *TwitterNoteUpdateOne {
	tnuo.mutation.AppendUrls(s)
	return tnuo
}

// ClearUrls clears the value of the "urls" field.
func (tnuo *TwitterNoteUpdateOne) ClearUrls() *TwitterNoteUpdateOne {
	tnuo.mutation.ClearUrls()
	return tnuo
}

// SetHTMLText sets the "html_text" field.
func (tnuo *TwitterNoteUpdateOne) SetHTMLText(s string) *TwitterNoteUpdateOne {
	tnuo.mutation.SetHTMLText(s)
	return tnuo
}

// SetNillableHTMLText sets the "html_text" field if the given value is not nil.
func (tnuo *TwitterNoteUpdateOne) SetNillableHTMLText(s *string) *TwitterNoteUpdateOne {
	if s != nil {
		tnuo.SetHTMLText(*s)
	}
	return tnuo
}

// ClearHTMLText clears the value of the "html_text" field.
func (tnuo *TwitterNoteUpdateOne) ClearHTMLText() *TwitterNoteUpdateOne {
	tnuo.mutation.ClearHTMLText()
	return tnuo
}

// SetPermanentURL sets the "permanent_url" field.
func (tnuo *TwitterNoteUpdateOne) SetPermanentURL(s string) *TwitterNoteUpdateOne {
	tnuo.mutation.SetPermanentURL(s)
	return tnuo
}

// SetNillablePermanentURL sets the "permanent_url" field if the given value is not nil.
func (tnuo *TwitterNoteUpdateOne) SetNillablePermanentURL(s *string) *TwitterNoteUpdateOne {
	if s != nil {
		tnuo.SetPermanentURL(*s)
	}
	return tnuo
}

// ClearPermanentURL clears the value of the "permanent_url" field.
func (tnuo *TwitterNoteUpdateOne) ClearPermanentURL() *TwitterNoteUpdateOne {
	tnuo.mutation.ClearPermanentURL()
	return tnuo
}

// SetIsReply sets the "is_reply" field.
func (tnuo *TwitterNoteUpdateOne) SetIsReply(b bool) *TwitterNoteUpdateOne {
	tnuo.mutation.SetIsReply(b)
	return tnuo
}

// SetNillableIsReply sets the "is_reply" field if the given value is not nil.
func (tnuo *TwitterNoteUpdateOne) SetNillableIsReply(b *bool) *TwitterNoteUpdateOne {
	if b != nil {
		tnuo.SetIsReply(*b)
	}
	return tnuo
}

// ClearIsReply clears the value of the "is_reply" field.
func (tnuo *TwitterNoteUpdateOne) ClearIsReply() *TwitterNoteUpdateOne {
	tnuo.mutation.ClearIsReply()
	return tnuo
}

// SetIsPin sets the "is_pin" field.
func (tnuo *TwitterNoteUpdateOne) SetIsPin(b bool) *TwitterNoteUpdateOne {
	tnuo.mutation.SetIsPin(b)
	return tnuo
}

// SetNillableIsPin sets the "is_pin" field if the given value is not nil.
func (tnuo *TwitterNoteUpdateOne) SetNillableIsPin(b *bool) *TwitterNoteUpdateOne {
	if b != nil {
		tnuo.SetIsPin(*b)
	}
	return tnuo
}

// ClearIsPin clears the value of the "is_pin" field.
func (tnuo *TwitterNoteUpdateOne) ClearIsPin() *TwitterNoteUpdateOne {
	tnuo.mutation.ClearIsPin()
	return tnuo
}

// SetSensitiveContent sets the "sensitive_content" field.
func (tnuo *TwitterNoteUpdateOne) SetSensitiveContent(b bool) *TwitterNoteUpdateOne {
	tnuo.mutation.SetSensitiveContent(b)
	return tnuo
}

// SetNillableSensitiveContent sets the "sensitive_content" field if the given value is not nil.
func (tnuo *TwitterNoteUpdateOne) SetNillableSensitiveContent(b *bool) *TwitterNoteUpdateOne {
	if b != nil {
		tnuo.SetSensitiveContent(*b)
	}
	return tnuo
}

// ClearSensitiveContent clears the value of the "sensitive_content" field.
func (tnuo *TwitterNoteUpdateOne) ClearSensitiveContent() *TwitterNoteUpdateOne {
	tnuo.mutation.ClearSensitiveContent()
	return tnuo
}

// SetReplyTo sets the "reply_to" field.
func (tnuo *TwitterNoteUpdateOne) SetReplyTo(s string) *TwitterNoteUpdateOne {
	tnuo.mutation.SetReplyTo(s)
	return tnuo
}

// SetNillableReplyTo sets the "reply_to" field if the given value is not nil.
func (tnuo *TwitterNoteUpdateOne) SetNillableReplyTo(s *string) *TwitterNoteUpdateOne {
	if s != nil {
		tnuo.SetReplyTo(*s)
	}
	return tnuo
}

// ClearReplyTo clears the value of the "reply_to" field.
func (tnuo *TwitterNoteUpdateOne) ClearReplyTo() *TwitterNoteUpdateOne {
	tnuo.mutation.ClearReplyTo()
	return tnuo
}

// SetRawYaml sets the "raw_yaml" field.
func (tnuo *TwitterNoteUpdateOne) SetRawYaml(s string) *TwitterNoteUpdateOne {
	tnuo.mutation.SetRawYaml(s)
	return tnuo
}

// SetNillableRawYaml sets the "raw_yaml" field if the given value is not nil.
func (tnuo *TwitterNoteUpdateOne) SetNillableRawYaml(s *string) *TwitterNoteUpdateOne {
	if s != nil {
		tnuo.SetRawYaml(*s)
	}
	return tnuo
}

// SetHashTags sets the "hash_tags" field.
func (tnuo *TwitterNoteUpdateOne) SetHashTags(s []string) *TwitterNoteUpdateOne {
	tnuo.mutation.SetHashTags(s)
	return tnuo
}

// AppendHashTags appends s to the "hash_tags" field.
func (tnuo *TwitterNoteUpdateOne) AppendHashTags(s []string) *TwitterNoteUpdateOne {
	tnuo.mutation.AppendHashTags(s)
	return tnuo
}

// SetEvent sets the "event" field.
func (tnuo *TwitterNoteUpdateOne) SetEvent(s string) *TwitterNoteUpdateOne {
	tnuo.mutation.SetEvent(s)
	return tnuo
}

// SetNillableEvent sets the "event" field if the given value is not nil.
func (tnuo *TwitterNoteUpdateOne) SetNillableEvent(s *string) *TwitterNoteUpdateOne {
	if s != nil {
		tnuo.SetEvent(*s)
	}
	return tnuo
}

// ClearEvent clears the value of the "event" field.
func (tnuo *TwitterNoteUpdateOne) ClearEvent() *TwitterNoteUpdateOne {
	tnuo.mutation.ClearEvent()
	return tnuo
}

// SetEventID sets the "event_id" field.
func (tnuo *TwitterNoteUpdateOne) SetEventID(s string) *TwitterNoteUpdateOne {
	tnuo.mutation.SetEventID(s)
	return tnuo
}

// SetNillableEventID sets the "event_id" field if the given value is not nil.
func (tnuo *TwitterNoteUpdateOne) SetNillableEventID(s *string) *TwitterNoteUpdateOne {
	if s != nil {
		tnuo.SetEventID(*s)
	}
	return tnuo
}

// ClearEventID clears the value of the "event_id" field.
func (tnuo *TwitterNoteUpdateOne) ClearEventID() *TwitterNoteUpdateOne {
	tnuo.mutation.ClearEventID()
	return tnuo
}

// SetPublishStatus sets the "publish_status" field.
func (tnuo *TwitterNoteUpdateOne) SetPublishStatus(s string) *TwitterNoteUpdateOne {
	tnuo.mutation.SetPublishStatus(s)
	return tnuo
}

// SetNillablePublishStatus sets the "publish_status" field if the given value is not nil.
func (tnuo *TwitterNoteUpdateOne) SetNillablePublishStatus(s *string) *TwitterNoteUpdateOne {
	if s != nil {
		tnuo.SetPublishStatus(*s)
	}
	return tnuo
}

// ClearPublishStatus clears the value of the "publish_status" field.
func (tnuo *TwitterNoteUpdateOne) ClearPublishStatus() *TwitterNoteUpdateOne {
	tnuo.mutation.ClearPublishStatus()
	return tnuo
}

// SetPublishedAt sets the "published_at" field.
func (tnuo *TwitterNoteUpdateOne) SetPublishedAt(t time.Time) *TwitterNoteUpdateOne {
	tnuo.mutation.SetPublishedAt(t)
	return tnuo
}

// SetNillablePublishedAt sets the "published_at" field if the given value is not nil.
func (tnuo *TwitterNoteUpdateOne) SetNillablePublishedAt(t *time.Time) *TwitterNoteUpdateOne {
	if t != nil {
		tnuo.SetPublishedAt(*t)
	}
	return tnuo
}

// ClearPublishedAt clears the value of the "published_at" field.
func (tnuo *TwitterNoteUpdateOne) ClearPublishedAt() *TwitterNoteUpdateOne {
	tnuo.mutation.ClearPublishedAt()
	return tnuo
}

// SetFetchedAt sets the "fetched_at" field.
func (tnuo *TwitterNoteUpdateOne) SetFetchedAt(t time.Time) *TwitterNoteUpdateOne {
	tnuo.mutation.SetFetchedAt(t)
	return tnuo
}

// SetNillableFetchedAt sets the "fetched_at" field if the given value is not nil.
func (tnuo *TwitterNoteUpdateOne) SetNillableFetchedAt(t *time.Time) *TwitterNoteUpdateOne {
	if t != nil {
		tnuo.SetFetchedAt(*t)
	}
	return tnuo
}

// ClearFetchedAt clears the value of the "fetched_at" field.
func (tnuo *TwitterNoteUpdateOne) ClearFetchedAt() *TwitterNoteUpdateOne {
	tnuo.mutation.ClearFetchedAt()
	return tnuo
}

// SetLanguage sets the "language" field.
func (tnuo *TwitterNoteUpdateOne) SetLanguage(s string) *TwitterNoteUpdateOne {
	tnuo.mutation.SetLanguage(s)
	return tnuo
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (tnuo *TwitterNoteUpdateOne) SetNillableLanguage(s *string) *TwitterNoteUpdateOne {
	if s != nil {
		tnuo.SetLanguage(*s)
	}
	return tnuo
}

// Mutation returns the TwitterNoteMutation object of the builder.
func (tnuo *TwitterNoteUpdateOne) Mutation() *TwitterNoteMutation {
	return tnuo.mutation
}

// Where appends a list predicates to the TwitterNoteUpdate builder.
func (tnuo *TwitterNoteUpdateOne) Where(ps ...predicate.TwitterNote) *TwitterNoteUpdateOne {
	tnuo.mutation.Where(ps...)
	return tnuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tnuo *TwitterNoteUpdateOne) Select(field string, fields ...string) *TwitterNoteUpdateOne {
	tnuo.fields = append([]string{field}, fields...)
	return tnuo
}

// Save executes the query and returns the updated TwitterNote entity.
func (tnuo *TwitterNoteUpdateOne) Save(ctx context.Context) (*TwitterNote, error) {
	return withHooks(ctx, tnuo.sqlSave, tnuo.mutation, tnuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tnuo *TwitterNoteUpdateOne) SaveX(ctx context.Context) *TwitterNote {
	node, err := tnuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tnuo *TwitterNoteUpdateOne) Exec(ctx context.Context) error {
	_, err := tnuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tnuo *TwitterNoteUpdateOne) ExecX(ctx context.Context) {
	if err := tnuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tnuo *TwitterNoteUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TwitterNoteUpdateOne {
	tnuo.modifiers = append(tnuo.modifiers, modifiers...)
	return tnuo
}

func (tnuo *TwitterNoteUpdateOne) sqlSave(ctx context.Context) (_node *TwitterNote, err error) {
	_spec := sqlgraph.NewUpdateSpec(twitternote.Table, twitternote.Columns, sqlgraph.NewFieldSpec(twitternote.FieldID, field.TypeString))
	id, ok := tnuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`core: missing "TwitterNote.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tnuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, twitternote.FieldID)
		for _, f := range fields {
			if !twitternote.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("core: invalid field %q for query", f)}
			}
			if f != twitternote.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tnuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tnuo.mutation.UserID(); ok {
		_spec.SetField(twitternote.FieldUserID, field.TypeString, value)
	}
	if value, ok := tnuo.mutation.UserName(); ok {
		_spec.SetField(twitternote.FieldUserName, field.TypeString, value)
	}
	if value, ok := tnuo.mutation.ConversationID(); ok {
		_spec.SetField(twitternote.FieldConversationID, field.TypeString, value)
	}
	if value, ok := tnuo.mutation.Text(); ok {
		_spec.SetField(twitternote.FieldText, field.TypeString, value)
	}
	if value, ok := tnuo.mutation.Likes(); ok {
		_spec.SetField(twitternote.FieldLikes, field.TypeInt, value)
	}
	if value, ok := tnuo.mutation.AddedLikes(); ok {
		_spec.AddField(twitternote.FieldLikes, field.TypeInt, value)
	}
	if value, ok := tnuo.mutation.Replies(); ok {
		_spec.SetField(twitternote.FieldReplies, field.TypeInt, value)
	}
	if value, ok := tnuo.mutation.AddedReplies(); ok {
		_spec.AddField(twitternote.FieldReplies, field.TypeInt, value)
	}
	if value, ok := tnuo.mutation.Retweets(); ok {
		_spec.SetField(twitternote.FieldRetweets, field.TypeInt, value)
	}
	if value, ok := tnuo.mutation.AddedRetweets(); ok {
		_spec.AddField(twitternote.FieldRetweets, field.TypeInt, value)
	}
	if value, ok := tnuo.mutation.Views(); ok {
		_spec.SetField(twitternote.FieldViews, field.TypeInt, value)
	}
	if value, ok := tnuo.mutation.AddedViews(); ok {
		_spec.AddField(twitternote.FieldViews, field.TypeInt, value)
	}
	if value, ok := tnuo.mutation.PhotoIds(); ok {
		_spec.SetField(twitternote.FieldPhotoIds, field.TypeJSON, value)
	}
	if value, ok := tnuo.mutation.AppendedPhotoIds(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, twitternote.FieldPhotoIds, value)
		})
	}
	if tnuo.mutation.PhotoIdsCleared() {
		_spec.ClearField(twitternote.FieldPhotoIds, field.TypeJSON)
	}
	if value, ok := tnuo.mutation.PhotoUrls(); ok {
		_spec.SetField(twitternote.FieldPhotoUrls, field.TypeJSON, value)
	}
	if value, ok := tnuo.mutation.AppendedPhotoUrls(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, twitternote.FieldPhotoUrls, value)
		})
	}
	if tnuo.mutation.PhotoUrlsCleared() {
		_spec.ClearField(twitternote.FieldPhotoUrls, field.TypeJSON)
	}
	if value, ok := tnuo.mutation.VideoID(); ok {
		_spec.SetField(twitternote.FieldVideoID, field.TypeJSON, value)
	}
	if value, ok := tnuo.mutation.AppendedVideoID(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, twitternote.FieldVideoID, value)
		})
	}
	if tnuo.mutation.VideoIDCleared() {
		_spec.ClearField(twitternote.FieldVideoID, field.TypeJSON)
	}
	if value, ok := tnuo.mutation.VideoPreview(); ok {
		_spec.SetField(twitternote.FieldVideoPreview, field.TypeJSON, value)
	}
	if value, ok := tnuo.mutation.AppendedVideoPreview(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, twitternote.FieldVideoPreview, value)
		})
	}
	if tnuo.mutation.VideoPreviewCleared() {
		_spec.ClearField(twitternote.FieldVideoPreview, field.TypeJSON)
	}
	if value, ok := tnuo.mutation.VideoUrls(); ok {
		_spec.SetField(twitternote.FieldVideoUrls, field.TypeJSON, value)
	}
	if value, ok := tnuo.mutation.AppendedVideoUrls(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, twitternote.FieldVideoUrls, value)
		})
	}
	if tnuo.mutation.VideoUrlsCleared() {
		_spec.ClearField(twitternote.FieldVideoUrls, field.TypeJSON)
	}
	if value, ok := tnuo.mutation.MentionID(); ok {
		_spec.SetField(twitternote.FieldMentionID, field.TypeJSON, value)
	}
	if value, ok := tnuo.mutation.AppendedMentionID(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, twitternote.FieldMentionID, value)
		})
	}
	if tnuo.mutation.MentionIDCleared() {
		_spec.ClearField(twitternote.FieldMentionID, field.TypeJSON)
	}
	if value, ok := tnuo.mutation.MentionUsername(); ok {
		_spec.SetField(twitternote.FieldMentionUsername, field.TypeJSON, value)
	}
	if value, ok := tnuo.mutation.AppendedMentionUsername(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, twitternote.FieldMentionUsername, value)
		})
	}
	if tnuo.mutation.MentionUsernameCleared() {
		_spec.ClearField(twitternote.FieldMentionUsername, field.TypeJSON)
	}
	if value, ok := tnuo.mutation.MentionName(); ok {
		_spec.SetField(twitternote.FieldMentionName, field.TypeJSON, value)
	}
	if value, ok := tnuo.mutation.AppendedMentionName(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, twitternote.FieldMentionName, value)
		})
	}
	if tnuo.mutation.MentionNameCleared() {
		_spec.ClearField(twitternote.FieldMentionName, field.TypeJSON)
	}
	if value, ok := tnuo.mutation.RetweetedStatusID(); ok {
		_spec.SetField(twitternote.FieldRetweetedStatusID, field.TypeString, value)
	}
	if tnuo.mutation.RetweetedStatusIDCleared() {
		_spec.ClearField(twitternote.FieldRetweetedStatusID, field.TypeString)
	}
	if value, ok := tnuo.mutation.IsRetweet(); ok {
		_spec.SetField(twitternote.FieldIsRetweet, field.TypeBool, value)
	}
	if tnuo.mutation.IsRetweetCleared() {
		_spec.ClearField(twitternote.FieldIsRetweet, field.TypeBool)
	}
	if value, ok := tnuo.mutation.PostAt(); ok {
		_spec.SetField(twitternote.FieldPostAt, field.TypeTime, value)
	}
	if tnuo.mutation.PostAtCleared() {
		_spec.ClearField(twitternote.FieldPostAt, field.TypeTime)
	}
	if value, ok := tnuo.mutation.Urls(); ok {
		_spec.SetField(twitternote.FieldUrls, field.TypeJSON, value)
	}
	if value, ok := tnuo.mutation.AppendedUrls(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, twitternote.FieldUrls, value)
		})
	}
	if tnuo.mutation.UrlsCleared() {
		_spec.ClearField(twitternote.FieldUrls, field.TypeJSON)
	}
	if value, ok := tnuo.mutation.HTMLText(); ok {
		_spec.SetField(twitternote.FieldHTMLText, field.TypeString, value)
	}
	if tnuo.mutation.HTMLTextCleared() {
		_spec.ClearField(twitternote.FieldHTMLText, field.TypeString)
	}
	if value, ok := tnuo.mutation.PermanentURL(); ok {
		_spec.SetField(twitternote.FieldPermanentURL, field.TypeString, value)
	}
	if tnuo.mutation.PermanentURLCleared() {
		_spec.ClearField(twitternote.FieldPermanentURL, field.TypeString)
	}
	if value, ok := tnuo.mutation.IsReply(); ok {
		_spec.SetField(twitternote.FieldIsReply, field.TypeBool, value)
	}
	if tnuo.mutation.IsReplyCleared() {
		_spec.ClearField(twitternote.FieldIsReply, field.TypeBool)
	}
	if value, ok := tnuo.mutation.IsPin(); ok {
		_spec.SetField(twitternote.FieldIsPin, field.TypeBool, value)
	}
	if tnuo.mutation.IsPinCleared() {
		_spec.ClearField(twitternote.FieldIsPin, field.TypeBool)
	}
	if value, ok := tnuo.mutation.SensitiveContent(); ok {
		_spec.SetField(twitternote.FieldSensitiveContent, field.TypeBool, value)
	}
	if tnuo.mutation.SensitiveContentCleared() {
		_spec.ClearField(twitternote.FieldSensitiveContent, field.TypeBool)
	}
	if value, ok := tnuo.mutation.ReplyTo(); ok {
		_spec.SetField(twitternote.FieldReplyTo, field.TypeString, value)
	}
	if tnuo.mutation.ReplyToCleared() {
		_spec.ClearField(twitternote.FieldReplyTo, field.TypeString)
	}
	if value, ok := tnuo.mutation.RawYaml(); ok {
		_spec.SetField(twitternote.FieldRawYaml, field.TypeString, value)
	}
	if value, ok := tnuo.mutation.HashTags(); ok {
		_spec.SetField(twitternote.FieldHashTags, field.TypeJSON, value)
	}
	if value, ok := tnuo.mutation.AppendedHashTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, twitternote.FieldHashTags, value)
		})
	}
	if value, ok := tnuo.mutation.Event(); ok {
		_spec.SetField(twitternote.FieldEvent, field.TypeString, value)
	}
	if tnuo.mutation.EventCleared() {
		_spec.ClearField(twitternote.FieldEvent, field.TypeString)
	}
	if value, ok := tnuo.mutation.EventID(); ok {
		_spec.SetField(twitternote.FieldEventID, field.TypeString, value)
	}
	if tnuo.mutation.EventIDCleared() {
		_spec.ClearField(twitternote.FieldEventID, field.TypeString)
	}
	if value, ok := tnuo.mutation.PublishStatus(); ok {
		_spec.SetField(twitternote.FieldPublishStatus, field.TypeString, value)
	}
	if tnuo.mutation.PublishStatusCleared() {
		_spec.ClearField(twitternote.FieldPublishStatus, field.TypeString)
	}
	if value, ok := tnuo.mutation.PublishedAt(); ok {
		_spec.SetField(twitternote.FieldPublishedAt, field.TypeTime, value)
	}
	if tnuo.mutation.PublishedAtCleared() {
		_spec.ClearField(twitternote.FieldPublishedAt, field.TypeTime)
	}
	if value, ok := tnuo.mutation.FetchedAt(); ok {
		_spec.SetField(twitternote.FieldFetchedAt, field.TypeTime, value)
	}
	if tnuo.mutation.FetchedAtCleared() {
		_spec.ClearField(twitternote.FieldFetchedAt, field.TypeTime)
	}
	if value, ok := tnuo.mutation.Language(); ok {
		_spec.SetField(twitternote.FieldLanguage, field.TypeString, value)
	}
	_spec.Node.Schema = tnuo.schemaConfig.TwitterNote
	ctx = internal.NewSchemaConfigContext(ctx, tnuo.schemaConfig)
	_spec.AddModifiers(tnuo.modifiers...)
	_node = &TwitterNote{config: tnuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tnuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{twitternote.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tnuo.mutation.done = true
	return _node, nil
}
