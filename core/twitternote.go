// Code generated by ent, DO NOT EDIT.

package core

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"freefrom.space/nobot/core/twitternote"
)

// TwitterNote is the model entity for the TwitterNote schema.
type TwitterNote struct {
	config `json:"-"`
	// ID of the ent.
	// note unique id
	ID string `json:"id,omitempty"`
	// author id, (先不使用外键约束)
	UserID string `json:"user_id,omitempty"`
	// user name
	UserName string `json:"user_name,omitempty"`
	// conversation id
	ConversationID string `json:"conversation_id,omitempty"`
	// 原文形式的推文
	Text string `json:"text,omitempty"`
	// like count
	Likes int `json:"likes,omitempty"`
	// replies count
	Replies int `json:"replies,omitempty"`
	// retweets count
	Retweets int `json:"retweets,omitempty"`
	// view count
	Views int `json:"views,omitempty"`
	// photo ids
	PhotoIds []string `json:"photo_ids,omitempty"`
	// photo urls
	PhotoUrls []string `json:"photo_urls,omitempty"`
	// video urls
	VideoID []string `json:"video_id,omitempty"`
	// video preview
	VideoPreview []string `json:"video_preview,omitempty"`
	// video urls
	VideoUrls []string `json:"video_urls,omitempty"`
	// mention id
	MentionID []string `json:"mention_id,omitempty"`
	// mention username
	MentionUsername []string `json:"mention_username,omitempty"`
	// mention name
	MentionName []string `json:"mention_name,omitempty"`
	// retweeted target
	RetweetedStatusID string `json:"retweeted_status_id,omitempty"`
	// IsRetweet holds the value of the "is_retweet" field.
	IsRetweet bool `json:"is_retweet,omitempty"`
	// post time
	PostAt time.Time `json:"post_at,omitempty"`
	// Urls holds the value of the "urls" field.
	Urls []string `json:"urls,omitempty"`
	// content in html format
	HTMLText string `json:"html_text,omitempty"`
	// PermanentURL holds the value of the "permanent_url" field.
	PermanentURL string `json:"permanent_url,omitempty"`
	// IsReply holds the value of the "is_reply" field.
	IsReply bool `json:"is_reply,omitempty"`
	// IsPin holds the value of the "is_pin" field.
	IsPin bool `json:"is_pin,omitempty"`
	// SensitiveContent holds the value of the "sensitive_content" field.
	SensitiveContent bool `json:"sensitive_content,omitempty"`
	// ReplyTo holds the value of the "reply_to" field.
	ReplyTo string `json:"reply_to,omitempty"`
	// raw twitter data in yaml format
	RawYaml string `json:"raw_yaml,omitempty"`
	// twitter tags
	HashTags []string `json:"hash_tags,omitempty"`
	// nostr event
	Event string `json:"event,omitempty"`
	// event id
	EventID string `json:"event_id,omitempty"`
	// 发布结果: relay: status map
	PublishStatus string `json:"publish_status,omitempty"`
	// 成功发布时间
	PublishedAt time.Time `json:"published_at,omitempty"`
	// note 初次获取时间,重复获取时此字段不更新
	FetchedAt time.Time `json:"fetched_at,omitempty"`
	// note language
	Language     string `json:"language,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TwitterNote) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case twitternote.FieldPhotoIds, twitternote.FieldPhotoUrls, twitternote.FieldVideoID, twitternote.FieldVideoPreview, twitternote.FieldVideoUrls, twitternote.FieldMentionID, twitternote.FieldMentionUsername, twitternote.FieldMentionName, twitternote.FieldUrls, twitternote.FieldHashTags:
			values[i] = new([]byte)
		case twitternote.FieldIsRetweet, twitternote.FieldIsReply, twitternote.FieldIsPin, twitternote.FieldSensitiveContent:
			values[i] = new(sql.NullBool)
		case twitternote.FieldLikes, twitternote.FieldReplies, twitternote.FieldRetweets, twitternote.FieldViews:
			values[i] = new(sql.NullInt64)
		case twitternote.FieldID, twitternote.FieldUserID, twitternote.FieldUserName, twitternote.FieldConversationID, twitternote.FieldText, twitternote.FieldRetweetedStatusID, twitternote.FieldHTMLText, twitternote.FieldPermanentURL, twitternote.FieldReplyTo, twitternote.FieldRawYaml, twitternote.FieldEvent, twitternote.FieldEventID, twitternote.FieldPublishStatus, twitternote.FieldLanguage:
			values[i] = new(sql.NullString)
		case twitternote.FieldPostAt, twitternote.FieldPublishedAt, twitternote.FieldFetchedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TwitterNote fields.
func (tn *TwitterNote) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case twitternote.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				tn.ID = value.String
			}
		case twitternote.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				tn.UserID = value.String
			}
		case twitternote.FieldUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_name", values[i])
			} else if value.Valid {
				tn.UserName = value.String
			}
		case twitternote.FieldConversationID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field conversation_id", values[i])
			} else if value.Valid {
				tn.ConversationID = value.String
			}
		case twitternote.FieldText:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field text", values[i])
			} else if value.Valid {
				tn.Text = value.String
			}
		case twitternote.FieldLikes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field likes", values[i])
			} else if value.Valid {
				tn.Likes = int(value.Int64)
			}
		case twitternote.FieldReplies:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field replies", values[i])
			} else if value.Valid {
				tn.Replies = int(value.Int64)
			}
		case twitternote.FieldRetweets:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field retweets", values[i])
			} else if value.Valid {
				tn.Retweets = int(value.Int64)
			}
		case twitternote.FieldViews:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field views", values[i])
			} else if value.Valid {
				tn.Views = int(value.Int64)
			}
		case twitternote.FieldPhotoIds:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field photo_ids", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &tn.PhotoIds); err != nil {
					return fmt.Errorf("unmarshal field photo_ids: %w", err)
				}
			}
		case twitternote.FieldPhotoUrls:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field photo_urls", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &tn.PhotoUrls); err != nil {
					return fmt.Errorf("unmarshal field photo_urls: %w", err)
				}
			}
		case twitternote.FieldVideoID:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field video_id", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &tn.VideoID); err != nil {
					return fmt.Errorf("unmarshal field video_id: %w", err)
				}
			}
		case twitternote.FieldVideoPreview:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field video_preview", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &tn.VideoPreview); err != nil {
					return fmt.Errorf("unmarshal field video_preview: %w", err)
				}
			}
		case twitternote.FieldVideoUrls:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field video_urls", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &tn.VideoUrls); err != nil {
					return fmt.Errorf("unmarshal field video_urls: %w", err)
				}
			}
		case twitternote.FieldMentionID:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field mention_id", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &tn.MentionID); err != nil {
					return fmt.Errorf("unmarshal field mention_id: %w", err)
				}
			}
		case twitternote.FieldMentionUsername:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field mention_username", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &tn.MentionUsername); err != nil {
					return fmt.Errorf("unmarshal field mention_username: %w", err)
				}
			}
		case twitternote.FieldMentionName:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field mention_name", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &tn.MentionName); err != nil {
					return fmt.Errorf("unmarshal field mention_name: %w", err)
				}
			}
		case twitternote.FieldRetweetedStatusID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field retweeted_status_id", values[i])
			} else if value.Valid {
				tn.RetweetedStatusID = value.String
			}
		case twitternote.FieldIsRetweet:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_retweet", values[i])
			} else if value.Valid {
				tn.IsRetweet = value.Bool
			}
		case twitternote.FieldPostAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field post_at", values[i])
			} else if value.Valid {
				tn.PostAt = value.Time
			}
		case twitternote.FieldUrls:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field urls", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &tn.Urls); err != nil {
					return fmt.Errorf("unmarshal field urls: %w", err)
				}
			}
		case twitternote.FieldHTMLText:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field html_text", values[i])
			} else if value.Valid {
				tn.HTMLText = value.String
			}
		case twitternote.FieldPermanentURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field permanent_url", values[i])
			} else if value.Valid {
				tn.PermanentURL = value.String
			}
		case twitternote.FieldIsReply:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_reply", values[i])
			} else if value.Valid {
				tn.IsReply = value.Bool
			}
		case twitternote.FieldIsPin:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_pin", values[i])
			} else if value.Valid {
				tn.IsPin = value.Bool
			}
		case twitternote.FieldSensitiveContent:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field sensitive_content", values[i])
			} else if value.Valid {
				tn.SensitiveContent = value.Bool
			}
		case twitternote.FieldReplyTo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reply_to", values[i])
			} else if value.Valid {
				tn.ReplyTo = value.String
			}
		case twitternote.FieldRawYaml:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field raw_yaml", values[i])
			} else if value.Valid {
				tn.RawYaml = value.String
			}
		case twitternote.FieldHashTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field hash_tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &tn.HashTags); err != nil {
					return fmt.Errorf("unmarshal field hash_tags: %w", err)
				}
			}
		case twitternote.FieldEvent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field event", values[i])
			} else if value.Valid {
				tn.Event = value.String
			}
		case twitternote.FieldEventID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field event_id", values[i])
			} else if value.Valid {
				tn.EventID = value.String
			}
		case twitternote.FieldPublishStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field publish_status", values[i])
			} else if value.Valid {
				tn.PublishStatus = value.String
			}
		case twitternote.FieldPublishedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field published_at", values[i])
			} else if value.Valid {
				tn.PublishedAt = value.Time
			}
		case twitternote.FieldFetchedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field fetched_at", values[i])
			} else if value.Valid {
				tn.FetchedAt = value.Time
			}
		case twitternote.FieldLanguage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field language", values[i])
			} else if value.Valid {
				tn.Language = value.String
			}
		default:
			tn.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TwitterNote.
// This includes values selected through modifiers, order, etc.
func (tn *TwitterNote) Value(name string) (ent.Value, error) {
	return tn.selectValues.Get(name)
}

// Update returns a builder for updating this TwitterNote.
// Note that you need to call TwitterNote.Unwrap() before calling this method if this TwitterNote
// was returned from a transaction, and the transaction was committed or rolled back.
func (tn *TwitterNote) Update() *TwitterNoteUpdateOne {
	return NewTwitterNoteClient(tn.config).UpdateOne(tn)
}

// Unwrap unwraps the TwitterNote entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tn *TwitterNote) Unwrap() *TwitterNote {
	_tx, ok := tn.config.driver.(*txDriver)
	if !ok {
		panic("core: TwitterNote is not a transactional entity")
	}
	tn.config.driver = _tx.drv
	return tn
}

// String implements the fmt.Stringer.
func (tn *TwitterNote) String() string {
	var builder strings.Builder
	builder.WriteString("TwitterNote(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tn.ID))
	builder.WriteString("user_id=")
	builder.WriteString(tn.UserID)
	builder.WriteString(", ")
	builder.WriteString("user_name=")
	builder.WriteString(tn.UserName)
	builder.WriteString(", ")
	builder.WriteString("conversation_id=")
	builder.WriteString(tn.ConversationID)
	builder.WriteString(", ")
	builder.WriteString("text=")
	builder.WriteString(tn.Text)
	builder.WriteString(", ")
	builder.WriteString("likes=")
	builder.WriteString(fmt.Sprintf("%v", tn.Likes))
	builder.WriteString(", ")
	builder.WriteString("replies=")
	builder.WriteString(fmt.Sprintf("%v", tn.Replies))
	builder.WriteString(", ")
	builder.WriteString("retweets=")
	builder.WriteString(fmt.Sprintf("%v", tn.Retweets))
	builder.WriteString(", ")
	builder.WriteString("views=")
	builder.WriteString(fmt.Sprintf("%v", tn.Views))
	builder.WriteString(", ")
	builder.WriteString("photo_ids=")
	builder.WriteString(fmt.Sprintf("%v", tn.PhotoIds))
	builder.WriteString(", ")
	builder.WriteString("photo_urls=")
	builder.WriteString(fmt.Sprintf("%v", tn.PhotoUrls))
	builder.WriteString(", ")
	builder.WriteString("video_id=")
	builder.WriteString(fmt.Sprintf("%v", tn.VideoID))
	builder.WriteString(", ")
	builder.WriteString("video_preview=")
	builder.WriteString(fmt.Sprintf("%v", tn.VideoPreview))
	builder.WriteString(", ")
	builder.WriteString("video_urls=")
	builder.WriteString(fmt.Sprintf("%v", tn.VideoUrls))
	builder.WriteString(", ")
	builder.WriteString("mention_id=")
	builder.WriteString(fmt.Sprintf("%v", tn.MentionID))
	builder.WriteString(", ")
	builder.WriteString("mention_username=")
	builder.WriteString(fmt.Sprintf("%v", tn.MentionUsername))
	builder.WriteString(", ")
	builder.WriteString("mention_name=")
	builder.WriteString(fmt.Sprintf("%v", tn.MentionName))
	builder.WriteString(", ")
	builder.WriteString("retweeted_status_id=")
	builder.WriteString(tn.RetweetedStatusID)
	builder.WriteString(", ")
	builder.WriteString("is_retweet=")
	builder.WriteString(fmt.Sprintf("%v", tn.IsRetweet))
	builder.WriteString(", ")
	builder.WriteString("post_at=")
	builder.WriteString(tn.PostAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("urls=")
	builder.WriteString(fmt.Sprintf("%v", tn.Urls))
	builder.WriteString(", ")
	builder.WriteString("html_text=")
	builder.WriteString(tn.HTMLText)
	builder.WriteString(", ")
	builder.WriteString("permanent_url=")
	builder.WriteString(tn.PermanentURL)
	builder.WriteString(", ")
	builder.WriteString("is_reply=")
	builder.WriteString(fmt.Sprintf("%v", tn.IsReply))
	builder.WriteString(", ")
	builder.WriteString("is_pin=")
	builder.WriteString(fmt.Sprintf("%v", tn.IsPin))
	builder.WriteString(", ")
	builder.WriteString("sensitive_content=")
	builder.WriteString(fmt.Sprintf("%v", tn.SensitiveContent))
	builder.WriteString(", ")
	builder.WriteString("reply_to=")
	builder.WriteString(tn.ReplyTo)
	builder.WriteString(", ")
	builder.WriteString("raw_yaml=")
	builder.WriteString(tn.RawYaml)
	builder.WriteString(", ")
	builder.WriteString("hash_tags=")
	builder.WriteString(fmt.Sprintf("%v", tn.HashTags))
	builder.WriteString(", ")
	builder.WriteString("event=")
	builder.WriteString(tn.Event)
	builder.WriteString(", ")
	builder.WriteString("event_id=")
	builder.WriteString(tn.EventID)
	builder.WriteString(", ")
	builder.WriteString("publish_status=")
	builder.WriteString(tn.PublishStatus)
	builder.WriteString(", ")
	builder.WriteString("published_at=")
	builder.WriteString(tn.PublishedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("fetched_at=")
	builder.WriteString(tn.FetchedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("language=")
	builder.WriteString(tn.Language)
	builder.WriteByte(')')
	return builder.String()
}

// TwitterNotes is a parsable slice of TwitterNote.
type TwitterNotes []*TwitterNote
