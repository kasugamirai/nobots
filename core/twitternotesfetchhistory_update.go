// Code generated by ent, DO NOT EDIT.

package core

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"freefrom.space/nobot/core/internal"
	"freefrom.space/nobot/core/predicate"
	"freefrom.space/nobot/core/twitternotesfetchhistory"
)

// TwitterNotesFetchHistoryUpdate is the builder for updating TwitterNotesFetchHistory entities.
type TwitterNotesFetchHistoryUpdate struct {
	config
	hooks     []Hook
	mutation  *TwitterNotesFetchHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the TwitterNotesFetchHistoryUpdate builder.
func (tnfhu *TwitterNotesFetchHistoryUpdate) Where(ps ...predicate.TwitterNotesFetchHistory) *TwitterNotesFetchHistoryUpdate {
	tnfhu.mutation.Where(ps...)
	return tnfhu
}

// SetUserID sets the "user_id" field.
func (tnfhu *TwitterNotesFetchHistoryUpdate) SetUserID(s string) *TwitterNotesFetchHistoryUpdate {
	tnfhu.mutation.SetUserID(s)
	return tnfhu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (tnfhu *TwitterNotesFetchHistoryUpdate) SetNillableUserID(s *string) *TwitterNotesFetchHistoryUpdate {
	if s != nil {
		tnfhu.SetUserID(*s)
	}
	return tnfhu
}

// SetUsername sets the "username" field.
func (tnfhu *TwitterNotesFetchHistoryUpdate) SetUsername(s string) *TwitterNotesFetchHistoryUpdate {
	tnfhu.mutation.SetUsername(s)
	return tnfhu
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (tnfhu *TwitterNotesFetchHistoryUpdate) SetNillableUsername(s *string) *TwitterNotesFetchHistoryUpdate {
	if s != nil {
		tnfhu.SetUsername(*s)
	}
	return tnfhu
}

// ClearUsername clears the value of the "username" field.
func (tnfhu *TwitterNotesFetchHistoryUpdate) ClearUsername() *TwitterNotesFetchHistoryUpdate {
	tnfhu.mutation.ClearUsername()
	return tnfhu
}

// SetName sets the "name" field.
func (tnfhu *TwitterNotesFetchHistoryUpdate) SetName(s string) *TwitterNotesFetchHistoryUpdate {
	tnfhu.mutation.SetName(s)
	return tnfhu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tnfhu *TwitterNotesFetchHistoryUpdate) SetNillableName(s *string) *TwitterNotesFetchHistoryUpdate {
	if s != nil {
		tnfhu.SetName(*s)
	}
	return tnfhu
}

// ClearName clears the value of the "name" field.
func (tnfhu *TwitterNotesFetchHistoryUpdate) ClearName() *TwitterNotesFetchHistoryUpdate {
	tnfhu.mutation.ClearName()
	return tnfhu
}

// SetFetchedAt sets the "fetched_at" field.
func (tnfhu *TwitterNotesFetchHistoryUpdate) SetFetchedAt(t time.Time) *TwitterNotesFetchHistoryUpdate {
	tnfhu.mutation.SetFetchedAt(t)
	return tnfhu
}

// SetNillableFetchedAt sets the "fetched_at" field if the given value is not nil.
func (tnfhu *TwitterNotesFetchHistoryUpdate) SetNillableFetchedAt(t *time.Time) *TwitterNotesFetchHistoryUpdate {
	if t != nil {
		tnfhu.SetFetchedAt(*t)
	}
	return tnfhu
}

// SetFetchCount sets the "fetch_count" field.
func (tnfhu *TwitterNotesFetchHistoryUpdate) SetFetchCount(i int) *TwitterNotesFetchHistoryUpdate {
	tnfhu.mutation.ResetFetchCount()
	tnfhu.mutation.SetFetchCount(i)
	return tnfhu
}

// SetNillableFetchCount sets the "fetch_count" field if the given value is not nil.
func (tnfhu *TwitterNotesFetchHistoryUpdate) SetNillableFetchCount(i *int) *TwitterNotesFetchHistoryUpdate {
	if i != nil {
		tnfhu.SetFetchCount(*i)
	}
	return tnfhu
}

// AddFetchCount adds i to the "fetch_count" field.
func (tnfhu *TwitterNotesFetchHistoryUpdate) AddFetchCount(i int) *TwitterNotesFetchHistoryUpdate {
	tnfhu.mutation.AddFetchCount(i)
	return tnfhu
}

// SetNewCount sets the "new_count" field.
func (tnfhu *TwitterNotesFetchHistoryUpdate) SetNewCount(i int) *TwitterNotesFetchHistoryUpdate {
	tnfhu.mutation.ResetNewCount()
	tnfhu.mutation.SetNewCount(i)
	return tnfhu
}

// SetNillableNewCount sets the "new_count" field if the given value is not nil.
func (tnfhu *TwitterNotesFetchHistoryUpdate) SetNillableNewCount(i *int) *TwitterNotesFetchHistoryUpdate {
	if i != nil {
		tnfhu.SetNewCount(*i)
	}
	return tnfhu
}

// AddNewCount adds i to the "new_count" field.
func (tnfhu *TwitterNotesFetchHistoryUpdate) AddNewCount(i int) *TwitterNotesFetchHistoryUpdate {
	tnfhu.mutation.AddNewCount(i)
	return tnfhu
}

// Mutation returns the TwitterNotesFetchHistoryMutation object of the builder.
func (tnfhu *TwitterNotesFetchHistoryUpdate) Mutation() *TwitterNotesFetchHistoryMutation {
	return tnfhu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tnfhu *TwitterNotesFetchHistoryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tnfhu.sqlSave, tnfhu.mutation, tnfhu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tnfhu *TwitterNotesFetchHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := tnfhu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tnfhu *TwitterNotesFetchHistoryUpdate) Exec(ctx context.Context) error {
	_, err := tnfhu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tnfhu *TwitterNotesFetchHistoryUpdate) ExecX(ctx context.Context) {
	if err := tnfhu.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tnfhu *TwitterNotesFetchHistoryUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TwitterNotesFetchHistoryUpdate {
	tnfhu.modifiers = append(tnfhu.modifiers, modifiers...)
	return tnfhu
}

func (tnfhu *TwitterNotesFetchHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(twitternotesfetchhistory.Table, twitternotesfetchhistory.Columns, sqlgraph.NewFieldSpec(twitternotesfetchhistory.FieldID, field.TypeInt64))
	if ps := tnfhu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tnfhu.mutation.UserID(); ok {
		_spec.SetField(twitternotesfetchhistory.FieldUserID, field.TypeString, value)
	}
	if value, ok := tnfhu.mutation.Username(); ok {
		_spec.SetField(twitternotesfetchhistory.FieldUsername, field.TypeString, value)
	}
	if tnfhu.mutation.UsernameCleared() {
		_spec.ClearField(twitternotesfetchhistory.FieldUsername, field.TypeString)
	}
	if value, ok := tnfhu.mutation.Name(); ok {
		_spec.SetField(twitternotesfetchhistory.FieldName, field.TypeString, value)
	}
	if tnfhu.mutation.NameCleared() {
		_spec.ClearField(twitternotesfetchhistory.FieldName, field.TypeString)
	}
	if value, ok := tnfhu.mutation.FetchedAt(); ok {
		_spec.SetField(twitternotesfetchhistory.FieldFetchedAt, field.TypeTime, value)
	}
	if value, ok := tnfhu.mutation.FetchCount(); ok {
		_spec.SetField(twitternotesfetchhistory.FieldFetchCount, field.TypeInt, value)
	}
	if value, ok := tnfhu.mutation.AddedFetchCount(); ok {
		_spec.AddField(twitternotesfetchhistory.FieldFetchCount, field.TypeInt, value)
	}
	if value, ok := tnfhu.mutation.NewCount(); ok {
		_spec.SetField(twitternotesfetchhistory.FieldNewCount, field.TypeInt, value)
	}
	if value, ok := tnfhu.mutation.AddedNewCount(); ok {
		_spec.AddField(twitternotesfetchhistory.FieldNewCount, field.TypeInt, value)
	}
	_spec.Node.Schema = tnfhu.schemaConfig.TwitterNotesFetchHistory
	ctx = internal.NewSchemaConfigContext(ctx, tnfhu.schemaConfig)
	_spec.AddModifiers(tnfhu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, tnfhu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{twitternotesfetchhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tnfhu.mutation.done = true
	return n, nil
}

// TwitterNotesFetchHistoryUpdateOne is the builder for updating a single TwitterNotesFetchHistory entity.
type TwitterNotesFetchHistoryUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *TwitterNotesFetchHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUserID sets the "user_id" field.
func (tnfhuo *TwitterNotesFetchHistoryUpdateOne) SetUserID(s string) *TwitterNotesFetchHistoryUpdateOne {
	tnfhuo.mutation.SetUserID(s)
	return tnfhuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (tnfhuo *TwitterNotesFetchHistoryUpdateOne) SetNillableUserID(s *string) *TwitterNotesFetchHistoryUpdateOne {
	if s != nil {
		tnfhuo.SetUserID(*s)
	}
	return tnfhuo
}

// SetUsername sets the "username" field.
func (tnfhuo *TwitterNotesFetchHistoryUpdateOne) SetUsername(s string) *TwitterNotesFetchHistoryUpdateOne {
	tnfhuo.mutation.SetUsername(s)
	return tnfhuo
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (tnfhuo *TwitterNotesFetchHistoryUpdateOne) SetNillableUsername(s *string) *TwitterNotesFetchHistoryUpdateOne {
	if s != nil {
		tnfhuo.SetUsername(*s)
	}
	return tnfhuo
}

// ClearUsername clears the value of the "username" field.
func (tnfhuo *TwitterNotesFetchHistoryUpdateOne) ClearUsername() *TwitterNotesFetchHistoryUpdateOne {
	tnfhuo.mutation.ClearUsername()
	return tnfhuo
}

// SetName sets the "name" field.
func (tnfhuo *TwitterNotesFetchHistoryUpdateOne) SetName(s string) *TwitterNotesFetchHistoryUpdateOne {
	tnfhuo.mutation.SetName(s)
	return tnfhuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tnfhuo *TwitterNotesFetchHistoryUpdateOne) SetNillableName(s *string) *TwitterNotesFetchHistoryUpdateOne {
	if s != nil {
		tnfhuo.SetName(*s)
	}
	return tnfhuo
}

// ClearName clears the value of the "name" field.
func (tnfhuo *TwitterNotesFetchHistoryUpdateOne) ClearName() *TwitterNotesFetchHistoryUpdateOne {
	tnfhuo.mutation.ClearName()
	return tnfhuo
}

// SetFetchedAt sets the "fetched_at" field.
func (tnfhuo *TwitterNotesFetchHistoryUpdateOne) SetFetchedAt(t time.Time) *TwitterNotesFetchHistoryUpdateOne {
	tnfhuo.mutation.SetFetchedAt(t)
	return tnfhuo
}

// SetNillableFetchedAt sets the "fetched_at" field if the given value is not nil.
func (tnfhuo *TwitterNotesFetchHistoryUpdateOne) SetNillableFetchedAt(t *time.Time) *TwitterNotesFetchHistoryUpdateOne {
	if t != nil {
		tnfhuo.SetFetchedAt(*t)
	}
	return tnfhuo
}

// SetFetchCount sets the "fetch_count" field.
func (tnfhuo *TwitterNotesFetchHistoryUpdateOne) SetFetchCount(i int) *TwitterNotesFetchHistoryUpdateOne {
	tnfhuo.mutation.ResetFetchCount()
	tnfhuo.mutation.SetFetchCount(i)
	return tnfhuo
}

// SetNillableFetchCount sets the "fetch_count" field if the given value is not nil.
func (tnfhuo *TwitterNotesFetchHistoryUpdateOne) SetNillableFetchCount(i *int) *TwitterNotesFetchHistoryUpdateOne {
	if i != nil {
		tnfhuo.SetFetchCount(*i)
	}
	return tnfhuo
}

// AddFetchCount adds i to the "fetch_count" field.
func (tnfhuo *TwitterNotesFetchHistoryUpdateOne) AddFetchCount(i int) *TwitterNotesFetchHistoryUpdateOne {
	tnfhuo.mutation.AddFetchCount(i)
	return tnfhuo
}

// SetNewCount sets the "new_count" field.
func (tnfhuo *TwitterNotesFetchHistoryUpdateOne) SetNewCount(i int) *TwitterNotesFetchHistoryUpdateOne {
	tnfhuo.mutation.ResetNewCount()
	tnfhuo.mutation.SetNewCount(i)
	return tnfhuo
}

// SetNillableNewCount sets the "new_count" field if the given value is not nil.
func (tnfhuo *TwitterNotesFetchHistoryUpdateOne) SetNillableNewCount(i *int) *TwitterNotesFetchHistoryUpdateOne {
	if i != nil {
		tnfhuo.SetNewCount(*i)
	}
	return tnfhuo
}

// AddNewCount adds i to the "new_count" field.
func (tnfhuo *TwitterNotesFetchHistoryUpdateOne) AddNewCount(i int) *TwitterNotesFetchHistoryUpdateOne {
	tnfhuo.mutation.AddNewCount(i)
	return tnfhuo
}

// Mutation returns the TwitterNotesFetchHistoryMutation object of the builder.
func (tnfhuo *TwitterNotesFetchHistoryUpdateOne) Mutation() *TwitterNotesFetchHistoryMutation {
	return tnfhuo.mutation
}

// Where appends a list predicates to the TwitterNotesFetchHistoryUpdate builder.
func (tnfhuo *TwitterNotesFetchHistoryUpdateOne) Where(ps ...predicate.TwitterNotesFetchHistory) *TwitterNotesFetchHistoryUpdateOne {
	tnfhuo.mutation.Where(ps...)
	return tnfhuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tnfhuo *TwitterNotesFetchHistoryUpdateOne) Select(field string, fields ...string) *TwitterNotesFetchHistoryUpdateOne {
	tnfhuo.fields = append([]string{field}, fields...)
	return tnfhuo
}

// Save executes the query and returns the updated TwitterNotesFetchHistory entity.
func (tnfhuo *TwitterNotesFetchHistoryUpdateOne) Save(ctx context.Context) (*TwitterNotesFetchHistory, error) {
	return withHooks(ctx, tnfhuo.sqlSave, tnfhuo.mutation, tnfhuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tnfhuo *TwitterNotesFetchHistoryUpdateOne) SaveX(ctx context.Context) *TwitterNotesFetchHistory {
	node, err := tnfhuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tnfhuo *TwitterNotesFetchHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := tnfhuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tnfhuo *TwitterNotesFetchHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := tnfhuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tnfhuo *TwitterNotesFetchHistoryUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TwitterNotesFetchHistoryUpdateOne {
	tnfhuo.modifiers = append(tnfhuo.modifiers, modifiers...)
	return tnfhuo
}

func (tnfhuo *TwitterNotesFetchHistoryUpdateOne) sqlSave(ctx context.Context) (_node *TwitterNotesFetchHistory, err error) {
	_spec := sqlgraph.NewUpdateSpec(twitternotesfetchhistory.Table, twitternotesfetchhistory.Columns, sqlgraph.NewFieldSpec(twitternotesfetchhistory.FieldID, field.TypeInt64))
	id, ok := tnfhuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`core: missing "TwitterNotesFetchHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tnfhuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, twitternotesfetchhistory.FieldID)
		for _, f := range fields {
			if !twitternotesfetchhistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("core: invalid field %q for query", f)}
			}
			if f != twitternotesfetchhistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tnfhuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tnfhuo.mutation.UserID(); ok {
		_spec.SetField(twitternotesfetchhistory.FieldUserID, field.TypeString, value)
	}
	if value, ok := tnfhuo.mutation.Username(); ok {
		_spec.SetField(twitternotesfetchhistory.FieldUsername, field.TypeString, value)
	}
	if tnfhuo.mutation.UsernameCleared() {
		_spec.ClearField(twitternotesfetchhistory.FieldUsername, field.TypeString)
	}
	if value, ok := tnfhuo.mutation.Name(); ok {
		_spec.SetField(twitternotesfetchhistory.FieldName, field.TypeString, value)
	}
	if tnfhuo.mutation.NameCleared() {
		_spec.ClearField(twitternotesfetchhistory.FieldName, field.TypeString)
	}
	if value, ok := tnfhuo.mutation.FetchedAt(); ok {
		_spec.SetField(twitternotesfetchhistory.FieldFetchedAt, field.TypeTime, value)
	}
	if value, ok := tnfhuo.mutation.FetchCount(); ok {
		_spec.SetField(twitternotesfetchhistory.FieldFetchCount, field.TypeInt, value)
	}
	if value, ok := tnfhuo.mutation.AddedFetchCount(); ok {
		_spec.AddField(twitternotesfetchhistory.FieldFetchCount, field.TypeInt, value)
	}
	if value, ok := tnfhuo.mutation.NewCount(); ok {
		_spec.SetField(twitternotesfetchhistory.FieldNewCount, field.TypeInt, value)
	}
	if value, ok := tnfhuo.mutation.AddedNewCount(); ok {
		_spec.AddField(twitternotesfetchhistory.FieldNewCount, field.TypeInt, value)
	}
	_spec.Node.Schema = tnfhuo.schemaConfig.TwitterNotesFetchHistory
	ctx = internal.NewSchemaConfigContext(ctx, tnfhuo.schemaConfig)
	_spec.AddModifiers(tnfhuo.modifiers...)
	_node = &TwitterNotesFetchHistory{config: tnfhuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tnfhuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{twitternotesfetchhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tnfhuo.mutation.done = true
	return _node, nil
}
