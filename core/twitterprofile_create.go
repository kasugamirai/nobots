// Code generated by ent, DO NOT EDIT.

package core

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"freefrom.space/nobot/core/twitterprofile"
)

// TwitterProfileCreate is the builder for creating a TwitterProfile entity.
type TwitterProfileCreate struct {
	config
	mutation *TwitterProfileMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetUserID sets the "user_id" field.
func (tpc *TwitterProfileCreate) SetUserID(s string) *TwitterProfileCreate {
	tpc.mutation.SetUserID(s)
	return tpc
}

// SetUserName sets the "user_name" field.
func (tpc *TwitterProfileCreate) SetUserName(s string) *TwitterProfileCreate {
	tpc.mutation.SetUserName(s)
	return tpc
}

// SetName sets the "name" field.
func (tpc *TwitterProfileCreate) SetName(s string) *TwitterProfileCreate {
	tpc.mutation.SetName(s)
	return tpc
}

// SetRawYaml sets the "raw_yaml" field.
func (tpc *TwitterProfileCreate) SetRawYaml(s string) *TwitterProfileCreate {
	tpc.mutation.SetRawYaml(s)
	return tpc
}

// SetActive sets the "active" field.
func (tpc *TwitterProfileCreate) SetActive(b bool) *TwitterProfileCreate {
	tpc.mutation.SetActive(b)
	return tpc
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (tpc *TwitterProfileCreate) SetNillableActive(b *bool) *TwitterProfileCreate {
	if b != nil {
		tpc.SetActive(*b)
	}
	return tpc
}

// SetJoinedTime sets the "joined_time" field.
func (tpc *TwitterProfileCreate) SetJoinedTime(t time.Time) *TwitterProfileCreate {
	tpc.mutation.SetJoinedTime(t)
	return tpc
}

// SetNillableJoinedTime sets the "joined_time" field if the given value is not nil.
func (tpc *TwitterProfileCreate) SetNillableJoinedTime(t *time.Time) *TwitterProfileCreate {
	if t != nil {
		tpc.SetJoinedTime(*t)
	}
	return tpc
}

// SetLikesCount sets the "likes_count" field.
func (tpc *TwitterProfileCreate) SetLikesCount(i int) *TwitterProfileCreate {
	tpc.mutation.SetLikesCount(i)
	return tpc
}

// SetNillableLikesCount sets the "likes_count" field if the given value is not nil.
func (tpc *TwitterProfileCreate) SetNillableLikesCount(i *int) *TwitterProfileCreate {
	if i != nil {
		tpc.SetLikesCount(*i)
	}
	return tpc
}

// SetListedCount sets the "listed_count" field.
func (tpc *TwitterProfileCreate) SetListedCount(i int) *TwitterProfileCreate {
	tpc.mutation.SetListedCount(i)
	return tpc
}

// SetNillableListedCount sets the "listed_count" field if the given value is not nil.
func (tpc *TwitterProfileCreate) SetNillableListedCount(i *int) *TwitterProfileCreate {
	if i != nil {
		tpc.SetListedCount(*i)
	}
	return tpc
}

// SetFollowersCount sets the "followers_count" field.
func (tpc *TwitterProfileCreate) SetFollowersCount(i int) *TwitterProfileCreate {
	tpc.mutation.SetFollowersCount(i)
	return tpc
}

// SetNillableFollowersCount sets the "followers_count" field if the given value is not nil.
func (tpc *TwitterProfileCreate) SetNillableFollowersCount(i *int) *TwitterProfileCreate {
	if i != nil {
		tpc.SetFollowersCount(*i)
	}
	return tpc
}

// SetFollowingCount sets the "following_count" field.
func (tpc *TwitterProfileCreate) SetFollowingCount(i int) *TwitterProfileCreate {
	tpc.mutation.SetFollowingCount(i)
	return tpc
}

// SetNillableFollowingCount sets the "following_count" field if the given value is not nil.
func (tpc *TwitterProfileCreate) SetNillableFollowingCount(i *int) *TwitterProfileCreate {
	if i != nil {
		tpc.SetFollowingCount(*i)
	}
	return tpc
}

// SetFriendsCount sets the "friends_count" field.
func (tpc *TwitterProfileCreate) SetFriendsCount(i int) *TwitterProfileCreate {
	tpc.mutation.SetFriendsCount(i)
	return tpc
}

// SetNillableFriendsCount sets the "friends_count" field if the given value is not nil.
func (tpc *TwitterProfileCreate) SetNillableFriendsCount(i *int) *TwitterProfileCreate {
	if i != nil {
		tpc.SetFriendsCount(*i)
	}
	return tpc
}

// SetTwitterCount sets the "twitter_count" field.
func (tpc *TwitterProfileCreate) SetTwitterCount(i int) *TwitterProfileCreate {
	tpc.mutation.SetTwitterCount(i)
	return tpc
}

// SetNillableTwitterCount sets the "twitter_count" field if the given value is not nil.
func (tpc *TwitterProfileCreate) SetNillableTwitterCount(i *int) *TwitterProfileCreate {
	if i != nil {
		tpc.SetTwitterCount(*i)
	}
	return tpc
}

// SetPinnedNoteID sets the "pinned_note_id" field.
func (tpc *TwitterProfileCreate) SetPinnedNoteID(s string) *TwitterProfileCreate {
	tpc.mutation.SetPinnedNoteID(s)
	return tpc
}

// SetNillablePinnedNoteID sets the "pinned_note_id" field if the given value is not nil.
func (tpc *TwitterProfileCreate) SetNillablePinnedNoteID(s *string) *TwitterProfileCreate {
	if s != nil {
		tpc.SetPinnedNoteID(*s)
	}
	return tpc
}

// SetAvatar sets the "avatar" field.
func (tpc *TwitterProfileCreate) SetAvatar(s string) *TwitterProfileCreate {
	tpc.mutation.SetAvatar(s)
	return tpc
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (tpc *TwitterProfileCreate) SetNillableAvatar(s *string) *TwitterProfileCreate {
	if s != nil {
		tpc.SetAvatar(*s)
	}
	return tpc
}

// SetBanner sets the "banner" field.
func (tpc *TwitterProfileCreate) SetBanner(s string) *TwitterProfileCreate {
	tpc.mutation.SetBanner(s)
	return tpc
}

// SetNillableBanner sets the "banner" field if the given value is not nil.
func (tpc *TwitterProfileCreate) SetNillableBanner(s *string) *TwitterProfileCreate {
	if s != nil {
		tpc.SetBanner(*s)
	}
	return tpc
}

// SetBiography sets the "biography" field.
func (tpc *TwitterProfileCreate) SetBiography(s string) *TwitterProfileCreate {
	tpc.mutation.SetBiography(s)
	return tpc
}

// SetNillableBiography sets the "biography" field if the given value is not nil.
func (tpc *TwitterProfileCreate) SetNillableBiography(s *string) *TwitterProfileCreate {
	if s != nil {
		tpc.SetBiography(*s)
	}
	return tpc
}

// SetBirthday sets the "birthday" field.
func (tpc *TwitterProfileCreate) SetBirthday(s string) *TwitterProfileCreate {
	tpc.mutation.SetBirthday(s)
	return tpc
}

// SetNillableBirthday sets the "birthday" field if the given value is not nil.
func (tpc *TwitterProfileCreate) SetNillableBirthday(s *string) *TwitterProfileCreate {
	if s != nil {
		tpc.SetBirthday(*s)
	}
	return tpc
}

// SetLocation sets the "location" field.
func (tpc *TwitterProfileCreate) SetLocation(s string) *TwitterProfileCreate {
	tpc.mutation.SetLocation(s)
	return tpc
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (tpc *TwitterProfileCreate) SetNillableLocation(s *string) *TwitterProfileCreate {
	if s != nil {
		tpc.SetLocation(*s)
	}
	return tpc
}

// SetURL sets the "url" field.
func (tpc *TwitterProfileCreate) SetURL(s string) *TwitterProfileCreate {
	tpc.mutation.SetURL(s)
	return tpc
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (tpc *TwitterProfileCreate) SetNillableURL(s *string) *TwitterProfileCreate {
	if s != nil {
		tpc.SetURL(*s)
	}
	return tpc
}

// SetWebsite sets the "website" field.
func (tpc *TwitterProfileCreate) SetWebsite(s string) *TwitterProfileCreate {
	tpc.mutation.SetWebsite(s)
	return tpc
}

// SetNillableWebsite sets the "website" field if the given value is not nil.
func (tpc *TwitterProfileCreate) SetNillableWebsite(s *string) *TwitterProfileCreate {
	if s != nil {
		tpc.SetWebsite(*s)
	}
	return tpc
}

// SetNsecKey sets the "nsec_key" field.
func (tpc *TwitterProfileCreate) SetNsecKey(s string) *TwitterProfileCreate {
	tpc.mutation.SetNsecKey(s)
	return tpc
}

// SetNillableNsecKey sets the "nsec_key" field if the given value is not nil.
func (tpc *TwitterProfileCreate) SetNillableNsecKey(s *string) *TwitterProfileCreate {
	if s != nil {
		tpc.SetNsecKey(*s)
	}
	return tpc
}

// SetNpubKey sets the "npub_key" field.
func (tpc *TwitterProfileCreate) SetNpubKey(s string) *TwitterProfileCreate {
	tpc.mutation.SetNpubKey(s)
	return tpc
}

// SetNillableNpubKey sets the "npub_key" field if the given value is not nil.
func (tpc *TwitterProfileCreate) SetNillableNpubKey(s *string) *TwitterProfileCreate {
	if s != nil {
		tpc.SetNpubKey(*s)
	}
	return tpc
}

// SetPrivateKeyHex sets the "private_key_hex" field.
func (tpc *TwitterProfileCreate) SetPrivateKeyHex(s string) *TwitterProfileCreate {
	tpc.mutation.SetPrivateKeyHex(s)
	return tpc
}

// SetNillablePrivateKeyHex sets the "private_key_hex" field if the given value is not nil.
func (tpc *TwitterProfileCreate) SetNillablePrivateKeyHex(s *string) *TwitterProfileCreate {
	if s != nil {
		tpc.SetPrivateKeyHex(*s)
	}
	return tpc
}

// SetPublicKeyHex sets the "public_key_hex" field.
func (tpc *TwitterProfileCreate) SetPublicKeyHex(s string) *TwitterProfileCreate {
	tpc.mutation.SetPublicKeyHex(s)
	return tpc
}

// SetNillablePublicKeyHex sets the "public_key_hex" field if the given value is not nil.
func (tpc *TwitterProfileCreate) SetNillablePublicKeyHex(s *string) *TwitterProfileCreate {
	if s != nil {
		tpc.SetPublicKeyHex(*s)
	}
	return tpc
}

// SetPublishNostr sets the "publish_nostr" field.
func (tpc *TwitterProfileCreate) SetPublishNostr(b bool) *TwitterProfileCreate {
	tpc.mutation.SetPublishNostr(b)
	return tpc
}

// SetNillablePublishNostr sets the "publish_nostr" field if the given value is not nil.
func (tpc *TwitterProfileCreate) SetNillablePublishNostr(b *bool) *TwitterProfileCreate {
	if b != nil {
		tpc.SetPublishNostr(*b)
	}
	return tpc
}

// Mutation returns the TwitterProfileMutation object of the builder.
func (tpc *TwitterProfileCreate) Mutation() *TwitterProfileMutation {
	return tpc.mutation
}

// Save creates the TwitterProfile in the database.
func (tpc *TwitterProfileCreate) Save(ctx context.Context) (*TwitterProfile, error) {
	tpc.defaults()
	return withHooks(ctx, tpc.sqlSave, tpc.mutation, tpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tpc *TwitterProfileCreate) SaveX(ctx context.Context) *TwitterProfile {
	v, err := tpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tpc *TwitterProfileCreate) Exec(ctx context.Context) error {
	_, err := tpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tpc *TwitterProfileCreate) ExecX(ctx context.Context) {
	if err := tpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tpc *TwitterProfileCreate) defaults() {
	if _, ok := tpc.mutation.PublishNostr(); !ok {
		v := twitterprofile.DefaultPublishNostr
		tpc.mutation.SetPublishNostr(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tpc *TwitterProfileCreate) check() error {
	if _, ok := tpc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`core: missing required field "TwitterProfile.user_id"`)}
	}
	if _, ok := tpc.mutation.UserName(); !ok {
		return &ValidationError{Name: "user_name", err: errors.New(`core: missing required field "TwitterProfile.user_name"`)}
	}
	if _, ok := tpc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`core: missing required field "TwitterProfile.name"`)}
	}
	if _, ok := tpc.mutation.RawYaml(); !ok {
		return &ValidationError{Name: "raw_yaml", err: errors.New(`core: missing required field "TwitterProfile.raw_yaml"`)}
	}
	return nil
}

func (tpc *TwitterProfileCreate) sqlSave(ctx context.Context) (*TwitterProfile, error) {
	if err := tpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	tpc.mutation.id = &_node.ID
	tpc.mutation.done = true
	return _node, nil
}

func (tpc *TwitterProfileCreate) createSpec() (*TwitterProfile, *sqlgraph.CreateSpec) {
	var (
		_node = &TwitterProfile{config: tpc.config}
		_spec = sqlgraph.NewCreateSpec(twitterprofile.Table, sqlgraph.NewFieldSpec(twitterprofile.FieldID, field.TypeInt))
	)
	_spec.Schema = tpc.schemaConfig.TwitterProfile
	_spec.OnConflict = tpc.conflict
	if value, ok := tpc.mutation.UserID(); ok {
		_spec.SetField(twitterprofile.FieldUserID, field.TypeString, value)
		_node.UserID = value
	}
	if value, ok := tpc.mutation.UserName(); ok {
		_spec.SetField(twitterprofile.FieldUserName, field.TypeString, value)
		_node.UserName = value
	}
	if value, ok := tpc.mutation.Name(); ok {
		_spec.SetField(twitterprofile.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := tpc.mutation.RawYaml(); ok {
		_spec.SetField(twitterprofile.FieldRawYaml, field.TypeString, value)
		_node.RawYaml = value
	}
	if value, ok := tpc.mutation.Active(); ok {
		_spec.SetField(twitterprofile.FieldActive, field.TypeBool, value)
		_node.Active = value
	}
	if value, ok := tpc.mutation.JoinedTime(); ok {
		_spec.SetField(twitterprofile.FieldJoinedTime, field.TypeTime, value)
		_node.JoinedTime = value
	}
	if value, ok := tpc.mutation.LikesCount(); ok {
		_spec.SetField(twitterprofile.FieldLikesCount, field.TypeInt, value)
		_node.LikesCount = value
	}
	if value, ok := tpc.mutation.ListedCount(); ok {
		_spec.SetField(twitterprofile.FieldListedCount, field.TypeInt, value)
		_node.ListedCount = value
	}
	if value, ok := tpc.mutation.FollowersCount(); ok {
		_spec.SetField(twitterprofile.FieldFollowersCount, field.TypeInt, value)
		_node.FollowersCount = value
	}
	if value, ok := tpc.mutation.FollowingCount(); ok {
		_spec.SetField(twitterprofile.FieldFollowingCount, field.TypeInt, value)
		_node.FollowingCount = value
	}
	if value, ok := tpc.mutation.FriendsCount(); ok {
		_spec.SetField(twitterprofile.FieldFriendsCount, field.TypeInt, value)
		_node.FriendsCount = value
	}
	if value, ok := tpc.mutation.TwitterCount(); ok {
		_spec.SetField(twitterprofile.FieldTwitterCount, field.TypeInt, value)
		_node.TwitterCount = value
	}
	if value, ok := tpc.mutation.PinnedNoteID(); ok {
		_spec.SetField(twitterprofile.FieldPinnedNoteID, field.TypeString, value)
		_node.PinnedNoteID = value
	}
	if value, ok := tpc.mutation.Avatar(); ok {
		_spec.SetField(twitterprofile.FieldAvatar, field.TypeString, value)
		_node.Avatar = value
	}
	if value, ok := tpc.mutation.Banner(); ok {
		_spec.SetField(twitterprofile.FieldBanner, field.TypeString, value)
		_node.Banner = value
	}
	if value, ok := tpc.mutation.Biography(); ok {
		_spec.SetField(twitterprofile.FieldBiography, field.TypeString, value)
		_node.Biography = value
	}
	if value, ok := tpc.mutation.Birthday(); ok {
		_spec.SetField(twitterprofile.FieldBirthday, field.TypeString, value)
		_node.Birthday = value
	}
	if value, ok := tpc.mutation.Location(); ok {
		_spec.SetField(twitterprofile.FieldLocation, field.TypeString, value)
		_node.Location = value
	}
	if value, ok := tpc.mutation.URL(); ok {
		_spec.SetField(twitterprofile.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if value, ok := tpc.mutation.Website(); ok {
		_spec.SetField(twitterprofile.FieldWebsite, field.TypeString, value)
		_node.Website = value
	}
	if value, ok := tpc.mutation.NsecKey(); ok {
		_spec.SetField(twitterprofile.FieldNsecKey, field.TypeString, value)
		_node.NsecKey = value
	}
	if value, ok := tpc.mutation.NpubKey(); ok {
		_spec.SetField(twitterprofile.FieldNpubKey, field.TypeString, value)
		_node.NpubKey = value
	}
	if value, ok := tpc.mutation.PrivateKeyHex(); ok {
		_spec.SetField(twitterprofile.FieldPrivateKeyHex, field.TypeString, value)
		_node.PrivateKeyHex = value
	}
	if value, ok := tpc.mutation.PublicKeyHex(); ok {
		_spec.SetField(twitterprofile.FieldPublicKeyHex, field.TypeString, value)
		_node.PublicKeyHex = value
	}
	if value, ok := tpc.mutation.PublishNostr(); ok {
		_spec.SetField(twitterprofile.FieldPublishNostr, field.TypeBool, value)
		_node.PublishNostr = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TwitterProfile.Create().
//		SetUserID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TwitterProfileUpsert) {
//			SetUserID(v+v).
//		}).
//		Exec(ctx)
func (tpc *TwitterProfileCreate) OnConflict(opts ...sql.ConflictOption) *TwitterProfileUpsertOne {
	tpc.conflict = opts
	return &TwitterProfileUpsertOne{
		create: tpc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TwitterProfile.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tpc *TwitterProfileCreate) OnConflictColumns(columns ...string) *TwitterProfileUpsertOne {
	tpc.conflict = append(tpc.conflict, sql.ConflictColumns(columns...))
	return &TwitterProfileUpsertOne{
		create: tpc,
	}
}

type (
	// TwitterProfileUpsertOne is the builder for "upsert"-ing
	//  one TwitterProfile node.
	TwitterProfileUpsertOne struct {
		create *TwitterProfileCreate
	}

	// TwitterProfileUpsert is the "OnConflict" setter.
	TwitterProfileUpsert struct {
		*sql.UpdateSet
	}
)

// SetUserID sets the "user_id" field.
func (u *TwitterProfileUpsert) SetUserID(v string) *TwitterProfileUpsert {
	u.Set(twitterprofile.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *TwitterProfileUpsert) UpdateUserID() *TwitterProfileUpsert {
	u.SetExcluded(twitterprofile.FieldUserID)
	return u
}

// SetUserName sets the "user_name" field.
func (u *TwitterProfileUpsert) SetUserName(v string) *TwitterProfileUpsert {
	u.Set(twitterprofile.FieldUserName, v)
	return u
}

// UpdateUserName sets the "user_name" field to the value that was provided on create.
func (u *TwitterProfileUpsert) UpdateUserName() *TwitterProfileUpsert {
	u.SetExcluded(twitterprofile.FieldUserName)
	return u
}

// SetName sets the "name" field.
func (u *TwitterProfileUpsert) SetName(v string) *TwitterProfileUpsert {
	u.Set(twitterprofile.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TwitterProfileUpsert) UpdateName() *TwitterProfileUpsert {
	u.SetExcluded(twitterprofile.FieldName)
	return u
}

// SetRawYaml sets the "raw_yaml" field.
func (u *TwitterProfileUpsert) SetRawYaml(v string) *TwitterProfileUpsert {
	u.Set(twitterprofile.FieldRawYaml, v)
	return u
}

// UpdateRawYaml sets the "raw_yaml" field to the value that was provided on create.
func (u *TwitterProfileUpsert) UpdateRawYaml() *TwitterProfileUpsert {
	u.SetExcluded(twitterprofile.FieldRawYaml)
	return u
}

// SetActive sets the "active" field.
func (u *TwitterProfileUpsert) SetActive(v bool) *TwitterProfileUpsert {
	u.Set(twitterprofile.FieldActive, v)
	return u
}

// UpdateActive sets the "active" field to the value that was provided on create.
func (u *TwitterProfileUpsert) UpdateActive() *TwitterProfileUpsert {
	u.SetExcluded(twitterprofile.FieldActive)
	return u
}

// ClearActive clears the value of the "active" field.
func (u *TwitterProfileUpsert) ClearActive() *TwitterProfileUpsert {
	u.SetNull(twitterprofile.FieldActive)
	return u
}

// SetJoinedTime sets the "joined_time" field.
func (u *TwitterProfileUpsert) SetJoinedTime(v time.Time) *TwitterProfileUpsert {
	u.Set(twitterprofile.FieldJoinedTime, v)
	return u
}

// UpdateJoinedTime sets the "joined_time" field to the value that was provided on create.
func (u *TwitterProfileUpsert) UpdateJoinedTime() *TwitterProfileUpsert {
	u.SetExcluded(twitterprofile.FieldJoinedTime)
	return u
}

// ClearJoinedTime clears the value of the "joined_time" field.
func (u *TwitterProfileUpsert) ClearJoinedTime() *TwitterProfileUpsert {
	u.SetNull(twitterprofile.FieldJoinedTime)
	return u
}

// SetLikesCount sets the "likes_count" field.
func (u *TwitterProfileUpsert) SetLikesCount(v int) *TwitterProfileUpsert {
	u.Set(twitterprofile.FieldLikesCount, v)
	return u
}

// UpdateLikesCount sets the "likes_count" field to the value that was provided on create.
func (u *TwitterProfileUpsert) UpdateLikesCount() *TwitterProfileUpsert {
	u.SetExcluded(twitterprofile.FieldLikesCount)
	return u
}

// AddLikesCount adds v to the "likes_count" field.
func (u *TwitterProfileUpsert) AddLikesCount(v int) *TwitterProfileUpsert {
	u.Add(twitterprofile.FieldLikesCount, v)
	return u
}

// ClearLikesCount clears the value of the "likes_count" field.
func (u *TwitterProfileUpsert) ClearLikesCount() *TwitterProfileUpsert {
	u.SetNull(twitterprofile.FieldLikesCount)
	return u
}

// SetListedCount sets the "listed_count" field.
func (u *TwitterProfileUpsert) SetListedCount(v int) *TwitterProfileUpsert {
	u.Set(twitterprofile.FieldListedCount, v)
	return u
}

// UpdateListedCount sets the "listed_count" field to the value that was provided on create.
func (u *TwitterProfileUpsert) UpdateListedCount() *TwitterProfileUpsert {
	u.SetExcluded(twitterprofile.FieldListedCount)
	return u
}

// AddListedCount adds v to the "listed_count" field.
func (u *TwitterProfileUpsert) AddListedCount(v int) *TwitterProfileUpsert {
	u.Add(twitterprofile.FieldListedCount, v)
	return u
}

// ClearListedCount clears the value of the "listed_count" field.
func (u *TwitterProfileUpsert) ClearListedCount() *TwitterProfileUpsert {
	u.SetNull(twitterprofile.FieldListedCount)
	return u
}

// SetFollowersCount sets the "followers_count" field.
func (u *TwitterProfileUpsert) SetFollowersCount(v int) *TwitterProfileUpsert {
	u.Set(twitterprofile.FieldFollowersCount, v)
	return u
}

// UpdateFollowersCount sets the "followers_count" field to the value that was provided on create.
func (u *TwitterProfileUpsert) UpdateFollowersCount() *TwitterProfileUpsert {
	u.SetExcluded(twitterprofile.FieldFollowersCount)
	return u
}

// AddFollowersCount adds v to the "followers_count" field.
func (u *TwitterProfileUpsert) AddFollowersCount(v int) *TwitterProfileUpsert {
	u.Add(twitterprofile.FieldFollowersCount, v)
	return u
}

// ClearFollowersCount clears the value of the "followers_count" field.
func (u *TwitterProfileUpsert) ClearFollowersCount() *TwitterProfileUpsert {
	u.SetNull(twitterprofile.FieldFollowersCount)
	return u
}

// SetFollowingCount sets the "following_count" field.
func (u *TwitterProfileUpsert) SetFollowingCount(v int) *TwitterProfileUpsert {
	u.Set(twitterprofile.FieldFollowingCount, v)
	return u
}

// UpdateFollowingCount sets the "following_count" field to the value that was provided on create.
func (u *TwitterProfileUpsert) UpdateFollowingCount() *TwitterProfileUpsert {
	u.SetExcluded(twitterprofile.FieldFollowingCount)
	return u
}

// AddFollowingCount adds v to the "following_count" field.
func (u *TwitterProfileUpsert) AddFollowingCount(v int) *TwitterProfileUpsert {
	u.Add(twitterprofile.FieldFollowingCount, v)
	return u
}

// ClearFollowingCount clears the value of the "following_count" field.
func (u *TwitterProfileUpsert) ClearFollowingCount() *TwitterProfileUpsert {
	u.SetNull(twitterprofile.FieldFollowingCount)
	return u
}

// SetFriendsCount sets the "friends_count" field.
func (u *TwitterProfileUpsert) SetFriendsCount(v int) *TwitterProfileUpsert {
	u.Set(twitterprofile.FieldFriendsCount, v)
	return u
}

// UpdateFriendsCount sets the "friends_count" field to the value that was provided on create.
func (u *TwitterProfileUpsert) UpdateFriendsCount() *TwitterProfileUpsert {
	u.SetExcluded(twitterprofile.FieldFriendsCount)
	return u
}

// AddFriendsCount adds v to the "friends_count" field.
func (u *TwitterProfileUpsert) AddFriendsCount(v int) *TwitterProfileUpsert {
	u.Add(twitterprofile.FieldFriendsCount, v)
	return u
}

// ClearFriendsCount clears the value of the "friends_count" field.
func (u *TwitterProfileUpsert) ClearFriendsCount() *TwitterProfileUpsert {
	u.SetNull(twitterprofile.FieldFriendsCount)
	return u
}

// SetTwitterCount sets the "twitter_count" field.
func (u *TwitterProfileUpsert) SetTwitterCount(v int) *TwitterProfileUpsert {
	u.Set(twitterprofile.FieldTwitterCount, v)
	return u
}

// UpdateTwitterCount sets the "twitter_count" field to the value that was provided on create.
func (u *TwitterProfileUpsert) UpdateTwitterCount() *TwitterProfileUpsert {
	u.SetExcluded(twitterprofile.FieldTwitterCount)
	return u
}

// AddTwitterCount adds v to the "twitter_count" field.
func (u *TwitterProfileUpsert) AddTwitterCount(v int) *TwitterProfileUpsert {
	u.Add(twitterprofile.FieldTwitterCount, v)
	return u
}

// ClearTwitterCount clears the value of the "twitter_count" field.
func (u *TwitterProfileUpsert) ClearTwitterCount() *TwitterProfileUpsert {
	u.SetNull(twitterprofile.FieldTwitterCount)
	return u
}

// SetPinnedNoteID sets the "pinned_note_id" field.
func (u *TwitterProfileUpsert) SetPinnedNoteID(v string) *TwitterProfileUpsert {
	u.Set(twitterprofile.FieldPinnedNoteID, v)
	return u
}

// UpdatePinnedNoteID sets the "pinned_note_id" field to the value that was provided on create.
func (u *TwitterProfileUpsert) UpdatePinnedNoteID() *TwitterProfileUpsert {
	u.SetExcluded(twitterprofile.FieldPinnedNoteID)
	return u
}

// ClearPinnedNoteID clears the value of the "pinned_note_id" field.
func (u *TwitterProfileUpsert) ClearPinnedNoteID() *TwitterProfileUpsert {
	u.SetNull(twitterprofile.FieldPinnedNoteID)
	return u
}

// SetAvatar sets the "avatar" field.
func (u *TwitterProfileUpsert) SetAvatar(v string) *TwitterProfileUpsert {
	u.Set(twitterprofile.FieldAvatar, v)
	return u
}

// UpdateAvatar sets the "avatar" field to the value that was provided on create.
func (u *TwitterProfileUpsert) UpdateAvatar() *TwitterProfileUpsert {
	u.SetExcluded(twitterprofile.FieldAvatar)
	return u
}

// ClearAvatar clears the value of the "avatar" field.
func (u *TwitterProfileUpsert) ClearAvatar() *TwitterProfileUpsert {
	u.SetNull(twitterprofile.FieldAvatar)
	return u
}

// SetBanner sets the "banner" field.
func (u *TwitterProfileUpsert) SetBanner(v string) *TwitterProfileUpsert {
	u.Set(twitterprofile.FieldBanner, v)
	return u
}

// UpdateBanner sets the "banner" field to the value that was provided on create.
func (u *TwitterProfileUpsert) UpdateBanner() *TwitterProfileUpsert {
	u.SetExcluded(twitterprofile.FieldBanner)
	return u
}

// ClearBanner clears the value of the "banner" field.
func (u *TwitterProfileUpsert) ClearBanner() *TwitterProfileUpsert {
	u.SetNull(twitterprofile.FieldBanner)
	return u
}

// SetBiography sets the "biography" field.
func (u *TwitterProfileUpsert) SetBiography(v string) *TwitterProfileUpsert {
	u.Set(twitterprofile.FieldBiography, v)
	return u
}

// UpdateBiography sets the "biography" field to the value that was provided on create.
func (u *TwitterProfileUpsert) UpdateBiography() *TwitterProfileUpsert {
	u.SetExcluded(twitterprofile.FieldBiography)
	return u
}

// ClearBiography clears the value of the "biography" field.
func (u *TwitterProfileUpsert) ClearBiography() *TwitterProfileUpsert {
	u.SetNull(twitterprofile.FieldBiography)
	return u
}

// SetBirthday sets the "birthday" field.
func (u *TwitterProfileUpsert) SetBirthday(v string) *TwitterProfileUpsert {
	u.Set(twitterprofile.FieldBirthday, v)
	return u
}

// UpdateBirthday sets the "birthday" field to the value that was provided on create.
func (u *TwitterProfileUpsert) UpdateBirthday() *TwitterProfileUpsert {
	u.SetExcluded(twitterprofile.FieldBirthday)
	return u
}

// ClearBirthday clears the value of the "birthday" field.
func (u *TwitterProfileUpsert) ClearBirthday() *TwitterProfileUpsert {
	u.SetNull(twitterprofile.FieldBirthday)
	return u
}

// SetLocation sets the "location" field.
func (u *TwitterProfileUpsert) SetLocation(v string) *TwitterProfileUpsert {
	u.Set(twitterprofile.FieldLocation, v)
	return u
}

// UpdateLocation sets the "location" field to the value that was provided on create.
func (u *TwitterProfileUpsert) UpdateLocation() *TwitterProfileUpsert {
	u.SetExcluded(twitterprofile.FieldLocation)
	return u
}

// ClearLocation clears the value of the "location" field.
func (u *TwitterProfileUpsert) ClearLocation() *TwitterProfileUpsert {
	u.SetNull(twitterprofile.FieldLocation)
	return u
}

// SetURL sets the "url" field.
func (u *TwitterProfileUpsert) SetURL(v string) *TwitterProfileUpsert {
	u.Set(twitterprofile.FieldURL, v)
	return u
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *TwitterProfileUpsert) UpdateURL() *TwitterProfileUpsert {
	u.SetExcluded(twitterprofile.FieldURL)
	return u
}

// ClearURL clears the value of the "url" field.
func (u *TwitterProfileUpsert) ClearURL() *TwitterProfileUpsert {
	u.SetNull(twitterprofile.FieldURL)
	return u
}

// SetWebsite sets the "website" field.
func (u *TwitterProfileUpsert) SetWebsite(v string) *TwitterProfileUpsert {
	u.Set(twitterprofile.FieldWebsite, v)
	return u
}

// UpdateWebsite sets the "website" field to the value that was provided on create.
func (u *TwitterProfileUpsert) UpdateWebsite() *TwitterProfileUpsert {
	u.SetExcluded(twitterprofile.FieldWebsite)
	return u
}

// ClearWebsite clears the value of the "website" field.
func (u *TwitterProfileUpsert) ClearWebsite() *TwitterProfileUpsert {
	u.SetNull(twitterprofile.FieldWebsite)
	return u
}

// SetNsecKey sets the "nsec_key" field.
func (u *TwitterProfileUpsert) SetNsecKey(v string) *TwitterProfileUpsert {
	u.Set(twitterprofile.FieldNsecKey, v)
	return u
}

// UpdateNsecKey sets the "nsec_key" field to the value that was provided on create.
func (u *TwitterProfileUpsert) UpdateNsecKey() *TwitterProfileUpsert {
	u.SetExcluded(twitterprofile.FieldNsecKey)
	return u
}

// ClearNsecKey clears the value of the "nsec_key" field.
func (u *TwitterProfileUpsert) ClearNsecKey() *TwitterProfileUpsert {
	u.SetNull(twitterprofile.FieldNsecKey)
	return u
}

// SetNpubKey sets the "npub_key" field.
func (u *TwitterProfileUpsert) SetNpubKey(v string) *TwitterProfileUpsert {
	u.Set(twitterprofile.FieldNpubKey, v)
	return u
}

// UpdateNpubKey sets the "npub_key" field to the value that was provided on create.
func (u *TwitterProfileUpsert) UpdateNpubKey() *TwitterProfileUpsert {
	u.SetExcluded(twitterprofile.FieldNpubKey)
	return u
}

// ClearNpubKey clears the value of the "npub_key" field.
func (u *TwitterProfileUpsert) ClearNpubKey() *TwitterProfileUpsert {
	u.SetNull(twitterprofile.FieldNpubKey)
	return u
}

// SetPrivateKeyHex sets the "private_key_hex" field.
func (u *TwitterProfileUpsert) SetPrivateKeyHex(v string) *TwitterProfileUpsert {
	u.Set(twitterprofile.FieldPrivateKeyHex, v)
	return u
}

// UpdatePrivateKeyHex sets the "private_key_hex" field to the value that was provided on create.
func (u *TwitterProfileUpsert) UpdatePrivateKeyHex() *TwitterProfileUpsert {
	u.SetExcluded(twitterprofile.FieldPrivateKeyHex)
	return u
}

// ClearPrivateKeyHex clears the value of the "private_key_hex" field.
func (u *TwitterProfileUpsert) ClearPrivateKeyHex() *TwitterProfileUpsert {
	u.SetNull(twitterprofile.FieldPrivateKeyHex)
	return u
}

// SetPublicKeyHex sets the "public_key_hex" field.
func (u *TwitterProfileUpsert) SetPublicKeyHex(v string) *TwitterProfileUpsert {
	u.Set(twitterprofile.FieldPublicKeyHex, v)
	return u
}

// UpdatePublicKeyHex sets the "public_key_hex" field to the value that was provided on create.
func (u *TwitterProfileUpsert) UpdatePublicKeyHex() *TwitterProfileUpsert {
	u.SetExcluded(twitterprofile.FieldPublicKeyHex)
	return u
}

// ClearPublicKeyHex clears the value of the "public_key_hex" field.
func (u *TwitterProfileUpsert) ClearPublicKeyHex() *TwitterProfileUpsert {
	u.SetNull(twitterprofile.FieldPublicKeyHex)
	return u
}

// SetPublishNostr sets the "publish_nostr" field.
func (u *TwitterProfileUpsert) SetPublishNostr(v bool) *TwitterProfileUpsert {
	u.Set(twitterprofile.FieldPublishNostr, v)
	return u
}

// UpdatePublishNostr sets the "publish_nostr" field to the value that was provided on create.
func (u *TwitterProfileUpsert) UpdatePublishNostr() *TwitterProfileUpsert {
	u.SetExcluded(twitterprofile.FieldPublishNostr)
	return u
}

// ClearPublishNostr clears the value of the "publish_nostr" field.
func (u *TwitterProfileUpsert) ClearPublishNostr() *TwitterProfileUpsert {
	u.SetNull(twitterprofile.FieldPublishNostr)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.TwitterProfile.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TwitterProfileUpsertOne) UpdateNewValues() *TwitterProfileUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TwitterProfile.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TwitterProfileUpsertOne) Ignore() *TwitterProfileUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TwitterProfileUpsertOne) DoNothing() *TwitterProfileUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TwitterProfileCreate.OnConflict
// documentation for more info.
func (u *TwitterProfileUpsertOne) Update(set func(*TwitterProfileUpsert)) *TwitterProfileUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TwitterProfileUpsert{UpdateSet: update})
	}))
	return u
}

// SetUserID sets the "user_id" field.
func (u *TwitterProfileUpsertOne) SetUserID(v string) *TwitterProfileUpsertOne {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *TwitterProfileUpsertOne) UpdateUserID() *TwitterProfileUpsertOne {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.UpdateUserID()
	})
}

// SetUserName sets the "user_name" field.
func (u *TwitterProfileUpsertOne) SetUserName(v string) *TwitterProfileUpsertOne {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.SetUserName(v)
	})
}

// UpdateUserName sets the "user_name" field to the value that was provided on create.
func (u *TwitterProfileUpsertOne) UpdateUserName() *TwitterProfileUpsertOne {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.UpdateUserName()
	})
}

// SetName sets the "name" field.
func (u *TwitterProfileUpsertOne) SetName(v string) *TwitterProfileUpsertOne {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TwitterProfileUpsertOne) UpdateName() *TwitterProfileUpsertOne {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.UpdateName()
	})
}

// SetRawYaml sets the "raw_yaml" field.
func (u *TwitterProfileUpsertOne) SetRawYaml(v string) *TwitterProfileUpsertOne {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.SetRawYaml(v)
	})
}

// UpdateRawYaml sets the "raw_yaml" field to the value that was provided on create.
func (u *TwitterProfileUpsertOne) UpdateRawYaml() *TwitterProfileUpsertOne {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.UpdateRawYaml()
	})
}

// SetActive sets the "active" field.
func (u *TwitterProfileUpsertOne) SetActive(v bool) *TwitterProfileUpsertOne {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.SetActive(v)
	})
}

// UpdateActive sets the "active" field to the value that was provided on create.
func (u *TwitterProfileUpsertOne) UpdateActive() *TwitterProfileUpsertOne {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.UpdateActive()
	})
}

// ClearActive clears the value of the "active" field.
func (u *TwitterProfileUpsertOne) ClearActive() *TwitterProfileUpsertOne {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.ClearActive()
	})
}

// SetJoinedTime sets the "joined_time" field.
func (u *TwitterProfileUpsertOne) SetJoinedTime(v time.Time) *TwitterProfileUpsertOne {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.SetJoinedTime(v)
	})
}

// UpdateJoinedTime sets the "joined_time" field to the value that was provided on create.
func (u *TwitterProfileUpsertOne) UpdateJoinedTime() *TwitterProfileUpsertOne {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.UpdateJoinedTime()
	})
}

// ClearJoinedTime clears the value of the "joined_time" field.
func (u *TwitterProfileUpsertOne) ClearJoinedTime() *TwitterProfileUpsertOne {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.ClearJoinedTime()
	})
}

// SetLikesCount sets the "likes_count" field.
func (u *TwitterProfileUpsertOne) SetLikesCount(v int) *TwitterProfileUpsertOne {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.SetLikesCount(v)
	})
}

// AddLikesCount adds v to the "likes_count" field.
func (u *TwitterProfileUpsertOne) AddLikesCount(v int) *TwitterProfileUpsertOne {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.AddLikesCount(v)
	})
}

// UpdateLikesCount sets the "likes_count" field to the value that was provided on create.
func (u *TwitterProfileUpsertOne) UpdateLikesCount() *TwitterProfileUpsertOne {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.UpdateLikesCount()
	})
}

// ClearLikesCount clears the value of the "likes_count" field.
func (u *TwitterProfileUpsertOne) ClearLikesCount() *TwitterProfileUpsertOne {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.ClearLikesCount()
	})
}

// SetListedCount sets the "listed_count" field.
func (u *TwitterProfileUpsertOne) SetListedCount(v int) *TwitterProfileUpsertOne {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.SetListedCount(v)
	})
}

// AddListedCount adds v to the "listed_count" field.
func (u *TwitterProfileUpsertOne) AddListedCount(v int) *TwitterProfileUpsertOne {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.AddListedCount(v)
	})
}

// UpdateListedCount sets the "listed_count" field to the value that was provided on create.
func (u *TwitterProfileUpsertOne) UpdateListedCount() *TwitterProfileUpsertOne {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.UpdateListedCount()
	})
}

// ClearListedCount clears the value of the "listed_count" field.
func (u *TwitterProfileUpsertOne) ClearListedCount() *TwitterProfileUpsertOne {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.ClearListedCount()
	})
}

// SetFollowersCount sets the "followers_count" field.
func (u *TwitterProfileUpsertOne) SetFollowersCount(v int) *TwitterProfileUpsertOne {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.SetFollowersCount(v)
	})
}

// AddFollowersCount adds v to the "followers_count" field.
func (u *TwitterProfileUpsertOne) AddFollowersCount(v int) *TwitterProfileUpsertOne {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.AddFollowersCount(v)
	})
}

// UpdateFollowersCount sets the "followers_count" field to the value that was provided on create.
func (u *TwitterProfileUpsertOne) UpdateFollowersCount() *TwitterProfileUpsertOne {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.UpdateFollowersCount()
	})
}

// ClearFollowersCount clears the value of the "followers_count" field.
func (u *TwitterProfileUpsertOne) ClearFollowersCount() *TwitterProfileUpsertOne {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.ClearFollowersCount()
	})
}

// SetFollowingCount sets the "following_count" field.
func (u *TwitterProfileUpsertOne) SetFollowingCount(v int) *TwitterProfileUpsertOne {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.SetFollowingCount(v)
	})
}

// AddFollowingCount adds v to the "following_count" field.
func (u *TwitterProfileUpsertOne) AddFollowingCount(v int) *TwitterProfileUpsertOne {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.AddFollowingCount(v)
	})
}

// UpdateFollowingCount sets the "following_count" field to the value that was provided on create.
func (u *TwitterProfileUpsertOne) UpdateFollowingCount() *TwitterProfileUpsertOne {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.UpdateFollowingCount()
	})
}

// ClearFollowingCount clears the value of the "following_count" field.
func (u *TwitterProfileUpsertOne) ClearFollowingCount() *TwitterProfileUpsertOne {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.ClearFollowingCount()
	})
}

// SetFriendsCount sets the "friends_count" field.
func (u *TwitterProfileUpsertOne) SetFriendsCount(v int) *TwitterProfileUpsertOne {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.SetFriendsCount(v)
	})
}

// AddFriendsCount adds v to the "friends_count" field.
func (u *TwitterProfileUpsertOne) AddFriendsCount(v int) *TwitterProfileUpsertOne {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.AddFriendsCount(v)
	})
}

// UpdateFriendsCount sets the "friends_count" field to the value that was provided on create.
func (u *TwitterProfileUpsertOne) UpdateFriendsCount() *TwitterProfileUpsertOne {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.UpdateFriendsCount()
	})
}

// ClearFriendsCount clears the value of the "friends_count" field.
func (u *TwitterProfileUpsertOne) ClearFriendsCount() *TwitterProfileUpsertOne {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.ClearFriendsCount()
	})
}

// SetTwitterCount sets the "twitter_count" field.
func (u *TwitterProfileUpsertOne) SetTwitterCount(v int) *TwitterProfileUpsertOne {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.SetTwitterCount(v)
	})
}

// AddTwitterCount adds v to the "twitter_count" field.
func (u *TwitterProfileUpsertOne) AddTwitterCount(v int) *TwitterProfileUpsertOne {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.AddTwitterCount(v)
	})
}

// UpdateTwitterCount sets the "twitter_count" field to the value that was provided on create.
func (u *TwitterProfileUpsertOne) UpdateTwitterCount() *TwitterProfileUpsertOne {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.UpdateTwitterCount()
	})
}

// ClearTwitterCount clears the value of the "twitter_count" field.
func (u *TwitterProfileUpsertOne) ClearTwitterCount() *TwitterProfileUpsertOne {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.ClearTwitterCount()
	})
}

// SetPinnedNoteID sets the "pinned_note_id" field.
func (u *TwitterProfileUpsertOne) SetPinnedNoteID(v string) *TwitterProfileUpsertOne {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.SetPinnedNoteID(v)
	})
}

// UpdatePinnedNoteID sets the "pinned_note_id" field to the value that was provided on create.
func (u *TwitterProfileUpsertOne) UpdatePinnedNoteID() *TwitterProfileUpsertOne {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.UpdatePinnedNoteID()
	})
}

// ClearPinnedNoteID clears the value of the "pinned_note_id" field.
func (u *TwitterProfileUpsertOne) ClearPinnedNoteID() *TwitterProfileUpsertOne {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.ClearPinnedNoteID()
	})
}

// SetAvatar sets the "avatar" field.
func (u *TwitterProfileUpsertOne) SetAvatar(v string) *TwitterProfileUpsertOne {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.SetAvatar(v)
	})
}

// UpdateAvatar sets the "avatar" field to the value that was provided on create.
func (u *TwitterProfileUpsertOne) UpdateAvatar() *TwitterProfileUpsertOne {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.UpdateAvatar()
	})
}

// ClearAvatar clears the value of the "avatar" field.
func (u *TwitterProfileUpsertOne) ClearAvatar() *TwitterProfileUpsertOne {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.ClearAvatar()
	})
}

// SetBanner sets the "banner" field.
func (u *TwitterProfileUpsertOne) SetBanner(v string) *TwitterProfileUpsertOne {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.SetBanner(v)
	})
}

// UpdateBanner sets the "banner" field to the value that was provided on create.
func (u *TwitterProfileUpsertOne) UpdateBanner() *TwitterProfileUpsertOne {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.UpdateBanner()
	})
}

// ClearBanner clears the value of the "banner" field.
func (u *TwitterProfileUpsertOne) ClearBanner() *TwitterProfileUpsertOne {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.ClearBanner()
	})
}

// SetBiography sets the "biography" field.
func (u *TwitterProfileUpsertOne) SetBiography(v string) *TwitterProfileUpsertOne {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.SetBiography(v)
	})
}

// UpdateBiography sets the "biography" field to the value that was provided on create.
func (u *TwitterProfileUpsertOne) UpdateBiography() *TwitterProfileUpsertOne {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.UpdateBiography()
	})
}

// ClearBiography clears the value of the "biography" field.
func (u *TwitterProfileUpsertOne) ClearBiography() *TwitterProfileUpsertOne {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.ClearBiography()
	})
}

// SetBirthday sets the "birthday" field.
func (u *TwitterProfileUpsertOne) SetBirthday(v string) *TwitterProfileUpsertOne {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.SetBirthday(v)
	})
}

// UpdateBirthday sets the "birthday" field to the value that was provided on create.
func (u *TwitterProfileUpsertOne) UpdateBirthday() *TwitterProfileUpsertOne {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.UpdateBirthday()
	})
}

// ClearBirthday clears the value of the "birthday" field.
func (u *TwitterProfileUpsertOne) ClearBirthday() *TwitterProfileUpsertOne {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.ClearBirthday()
	})
}

// SetLocation sets the "location" field.
func (u *TwitterProfileUpsertOne) SetLocation(v string) *TwitterProfileUpsertOne {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.SetLocation(v)
	})
}

// UpdateLocation sets the "location" field to the value that was provided on create.
func (u *TwitterProfileUpsertOne) UpdateLocation() *TwitterProfileUpsertOne {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.UpdateLocation()
	})
}

// ClearLocation clears the value of the "location" field.
func (u *TwitterProfileUpsertOne) ClearLocation() *TwitterProfileUpsertOne {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.ClearLocation()
	})
}

// SetURL sets the "url" field.
func (u *TwitterProfileUpsertOne) SetURL(v string) *TwitterProfileUpsertOne {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.SetURL(v)
	})
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *TwitterProfileUpsertOne) UpdateURL() *TwitterProfileUpsertOne {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.UpdateURL()
	})
}

// ClearURL clears the value of the "url" field.
func (u *TwitterProfileUpsertOne) ClearURL() *TwitterProfileUpsertOne {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.ClearURL()
	})
}

// SetWebsite sets the "website" field.
func (u *TwitterProfileUpsertOne) SetWebsite(v string) *TwitterProfileUpsertOne {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.SetWebsite(v)
	})
}

// UpdateWebsite sets the "website" field to the value that was provided on create.
func (u *TwitterProfileUpsertOne) UpdateWebsite() *TwitterProfileUpsertOne {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.UpdateWebsite()
	})
}

// ClearWebsite clears the value of the "website" field.
func (u *TwitterProfileUpsertOne) ClearWebsite() *TwitterProfileUpsertOne {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.ClearWebsite()
	})
}

// SetNsecKey sets the "nsec_key" field.
func (u *TwitterProfileUpsertOne) SetNsecKey(v string) *TwitterProfileUpsertOne {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.SetNsecKey(v)
	})
}

// UpdateNsecKey sets the "nsec_key" field to the value that was provided on create.
func (u *TwitterProfileUpsertOne) UpdateNsecKey() *TwitterProfileUpsertOne {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.UpdateNsecKey()
	})
}

// ClearNsecKey clears the value of the "nsec_key" field.
func (u *TwitterProfileUpsertOne) ClearNsecKey() *TwitterProfileUpsertOne {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.ClearNsecKey()
	})
}

// SetNpubKey sets the "npub_key" field.
func (u *TwitterProfileUpsertOne) SetNpubKey(v string) *TwitterProfileUpsertOne {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.SetNpubKey(v)
	})
}

// UpdateNpubKey sets the "npub_key" field to the value that was provided on create.
func (u *TwitterProfileUpsertOne) UpdateNpubKey() *TwitterProfileUpsertOne {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.UpdateNpubKey()
	})
}

// ClearNpubKey clears the value of the "npub_key" field.
func (u *TwitterProfileUpsertOne) ClearNpubKey() *TwitterProfileUpsertOne {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.ClearNpubKey()
	})
}

// SetPrivateKeyHex sets the "private_key_hex" field.
func (u *TwitterProfileUpsertOne) SetPrivateKeyHex(v string) *TwitterProfileUpsertOne {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.SetPrivateKeyHex(v)
	})
}

// UpdatePrivateKeyHex sets the "private_key_hex" field to the value that was provided on create.
func (u *TwitterProfileUpsertOne) UpdatePrivateKeyHex() *TwitterProfileUpsertOne {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.UpdatePrivateKeyHex()
	})
}

// ClearPrivateKeyHex clears the value of the "private_key_hex" field.
func (u *TwitterProfileUpsertOne) ClearPrivateKeyHex() *TwitterProfileUpsertOne {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.ClearPrivateKeyHex()
	})
}

// SetPublicKeyHex sets the "public_key_hex" field.
func (u *TwitterProfileUpsertOne) SetPublicKeyHex(v string) *TwitterProfileUpsertOne {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.SetPublicKeyHex(v)
	})
}

// UpdatePublicKeyHex sets the "public_key_hex" field to the value that was provided on create.
func (u *TwitterProfileUpsertOne) UpdatePublicKeyHex() *TwitterProfileUpsertOne {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.UpdatePublicKeyHex()
	})
}

// ClearPublicKeyHex clears the value of the "public_key_hex" field.
func (u *TwitterProfileUpsertOne) ClearPublicKeyHex() *TwitterProfileUpsertOne {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.ClearPublicKeyHex()
	})
}

// SetPublishNostr sets the "publish_nostr" field.
func (u *TwitterProfileUpsertOne) SetPublishNostr(v bool) *TwitterProfileUpsertOne {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.SetPublishNostr(v)
	})
}

// UpdatePublishNostr sets the "publish_nostr" field to the value that was provided on create.
func (u *TwitterProfileUpsertOne) UpdatePublishNostr() *TwitterProfileUpsertOne {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.UpdatePublishNostr()
	})
}

// ClearPublishNostr clears the value of the "publish_nostr" field.
func (u *TwitterProfileUpsertOne) ClearPublishNostr() *TwitterProfileUpsertOne {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.ClearPublishNostr()
	})
}

// Exec executes the query.
func (u *TwitterProfileUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("core: missing options for TwitterProfileCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TwitterProfileUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TwitterProfileUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TwitterProfileUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TwitterProfileCreateBulk is the builder for creating many TwitterProfile entities in bulk.
type TwitterProfileCreateBulk struct {
	config
	err      error
	builders []*TwitterProfileCreate
	conflict []sql.ConflictOption
}

// Save creates the TwitterProfile entities in the database.
func (tpcb *TwitterProfileCreateBulk) Save(ctx context.Context) ([]*TwitterProfile, error) {
	if tpcb.err != nil {
		return nil, tpcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tpcb.builders))
	nodes := make([]*TwitterProfile, len(tpcb.builders))
	mutators := make([]Mutator, len(tpcb.builders))
	for i := range tpcb.builders {
		func(i int, root context.Context) {
			builder := tpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TwitterProfileMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tpcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tpcb *TwitterProfileCreateBulk) SaveX(ctx context.Context) []*TwitterProfile {
	v, err := tpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tpcb *TwitterProfileCreateBulk) Exec(ctx context.Context) error {
	_, err := tpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tpcb *TwitterProfileCreateBulk) ExecX(ctx context.Context) {
	if err := tpcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TwitterProfile.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TwitterProfileUpsert) {
//			SetUserID(v+v).
//		}).
//		Exec(ctx)
func (tpcb *TwitterProfileCreateBulk) OnConflict(opts ...sql.ConflictOption) *TwitterProfileUpsertBulk {
	tpcb.conflict = opts
	return &TwitterProfileUpsertBulk{
		create: tpcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TwitterProfile.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tpcb *TwitterProfileCreateBulk) OnConflictColumns(columns ...string) *TwitterProfileUpsertBulk {
	tpcb.conflict = append(tpcb.conflict, sql.ConflictColumns(columns...))
	return &TwitterProfileUpsertBulk{
		create: tpcb,
	}
}

// TwitterProfileUpsertBulk is the builder for "upsert"-ing
// a bulk of TwitterProfile nodes.
type TwitterProfileUpsertBulk struct {
	create *TwitterProfileCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TwitterProfile.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TwitterProfileUpsertBulk) UpdateNewValues() *TwitterProfileUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TwitterProfile.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TwitterProfileUpsertBulk) Ignore() *TwitterProfileUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TwitterProfileUpsertBulk) DoNothing() *TwitterProfileUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TwitterProfileCreateBulk.OnConflict
// documentation for more info.
func (u *TwitterProfileUpsertBulk) Update(set func(*TwitterProfileUpsert)) *TwitterProfileUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TwitterProfileUpsert{UpdateSet: update})
	}))
	return u
}

// SetUserID sets the "user_id" field.
func (u *TwitterProfileUpsertBulk) SetUserID(v string) *TwitterProfileUpsertBulk {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *TwitterProfileUpsertBulk) UpdateUserID() *TwitterProfileUpsertBulk {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.UpdateUserID()
	})
}

// SetUserName sets the "user_name" field.
func (u *TwitterProfileUpsertBulk) SetUserName(v string) *TwitterProfileUpsertBulk {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.SetUserName(v)
	})
}

// UpdateUserName sets the "user_name" field to the value that was provided on create.
func (u *TwitterProfileUpsertBulk) UpdateUserName() *TwitterProfileUpsertBulk {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.UpdateUserName()
	})
}

// SetName sets the "name" field.
func (u *TwitterProfileUpsertBulk) SetName(v string) *TwitterProfileUpsertBulk {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TwitterProfileUpsertBulk) UpdateName() *TwitterProfileUpsertBulk {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.UpdateName()
	})
}

// SetRawYaml sets the "raw_yaml" field.
func (u *TwitterProfileUpsertBulk) SetRawYaml(v string) *TwitterProfileUpsertBulk {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.SetRawYaml(v)
	})
}

// UpdateRawYaml sets the "raw_yaml" field to the value that was provided on create.
func (u *TwitterProfileUpsertBulk) UpdateRawYaml() *TwitterProfileUpsertBulk {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.UpdateRawYaml()
	})
}

// SetActive sets the "active" field.
func (u *TwitterProfileUpsertBulk) SetActive(v bool) *TwitterProfileUpsertBulk {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.SetActive(v)
	})
}

// UpdateActive sets the "active" field to the value that was provided on create.
func (u *TwitterProfileUpsertBulk) UpdateActive() *TwitterProfileUpsertBulk {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.UpdateActive()
	})
}

// ClearActive clears the value of the "active" field.
func (u *TwitterProfileUpsertBulk) ClearActive() *TwitterProfileUpsertBulk {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.ClearActive()
	})
}

// SetJoinedTime sets the "joined_time" field.
func (u *TwitterProfileUpsertBulk) SetJoinedTime(v time.Time) *TwitterProfileUpsertBulk {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.SetJoinedTime(v)
	})
}

// UpdateJoinedTime sets the "joined_time" field to the value that was provided on create.
func (u *TwitterProfileUpsertBulk) UpdateJoinedTime() *TwitterProfileUpsertBulk {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.UpdateJoinedTime()
	})
}

// ClearJoinedTime clears the value of the "joined_time" field.
func (u *TwitterProfileUpsertBulk) ClearJoinedTime() *TwitterProfileUpsertBulk {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.ClearJoinedTime()
	})
}

// SetLikesCount sets the "likes_count" field.
func (u *TwitterProfileUpsertBulk) SetLikesCount(v int) *TwitterProfileUpsertBulk {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.SetLikesCount(v)
	})
}

// AddLikesCount adds v to the "likes_count" field.
func (u *TwitterProfileUpsertBulk) AddLikesCount(v int) *TwitterProfileUpsertBulk {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.AddLikesCount(v)
	})
}

// UpdateLikesCount sets the "likes_count" field to the value that was provided on create.
func (u *TwitterProfileUpsertBulk) UpdateLikesCount() *TwitterProfileUpsertBulk {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.UpdateLikesCount()
	})
}

// ClearLikesCount clears the value of the "likes_count" field.
func (u *TwitterProfileUpsertBulk) ClearLikesCount() *TwitterProfileUpsertBulk {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.ClearLikesCount()
	})
}

// SetListedCount sets the "listed_count" field.
func (u *TwitterProfileUpsertBulk) SetListedCount(v int) *TwitterProfileUpsertBulk {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.SetListedCount(v)
	})
}

// AddListedCount adds v to the "listed_count" field.
func (u *TwitterProfileUpsertBulk) AddListedCount(v int) *TwitterProfileUpsertBulk {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.AddListedCount(v)
	})
}

// UpdateListedCount sets the "listed_count" field to the value that was provided on create.
func (u *TwitterProfileUpsertBulk) UpdateListedCount() *TwitterProfileUpsertBulk {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.UpdateListedCount()
	})
}

// ClearListedCount clears the value of the "listed_count" field.
func (u *TwitterProfileUpsertBulk) ClearListedCount() *TwitterProfileUpsertBulk {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.ClearListedCount()
	})
}

// SetFollowersCount sets the "followers_count" field.
func (u *TwitterProfileUpsertBulk) SetFollowersCount(v int) *TwitterProfileUpsertBulk {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.SetFollowersCount(v)
	})
}

// AddFollowersCount adds v to the "followers_count" field.
func (u *TwitterProfileUpsertBulk) AddFollowersCount(v int) *TwitterProfileUpsertBulk {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.AddFollowersCount(v)
	})
}

// UpdateFollowersCount sets the "followers_count" field to the value that was provided on create.
func (u *TwitterProfileUpsertBulk) UpdateFollowersCount() *TwitterProfileUpsertBulk {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.UpdateFollowersCount()
	})
}

// ClearFollowersCount clears the value of the "followers_count" field.
func (u *TwitterProfileUpsertBulk) ClearFollowersCount() *TwitterProfileUpsertBulk {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.ClearFollowersCount()
	})
}

// SetFollowingCount sets the "following_count" field.
func (u *TwitterProfileUpsertBulk) SetFollowingCount(v int) *TwitterProfileUpsertBulk {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.SetFollowingCount(v)
	})
}

// AddFollowingCount adds v to the "following_count" field.
func (u *TwitterProfileUpsertBulk) AddFollowingCount(v int) *TwitterProfileUpsertBulk {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.AddFollowingCount(v)
	})
}

// UpdateFollowingCount sets the "following_count" field to the value that was provided on create.
func (u *TwitterProfileUpsertBulk) UpdateFollowingCount() *TwitterProfileUpsertBulk {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.UpdateFollowingCount()
	})
}

// ClearFollowingCount clears the value of the "following_count" field.
func (u *TwitterProfileUpsertBulk) ClearFollowingCount() *TwitterProfileUpsertBulk {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.ClearFollowingCount()
	})
}

// SetFriendsCount sets the "friends_count" field.
func (u *TwitterProfileUpsertBulk) SetFriendsCount(v int) *TwitterProfileUpsertBulk {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.SetFriendsCount(v)
	})
}

// AddFriendsCount adds v to the "friends_count" field.
func (u *TwitterProfileUpsertBulk) AddFriendsCount(v int) *TwitterProfileUpsertBulk {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.AddFriendsCount(v)
	})
}

// UpdateFriendsCount sets the "friends_count" field to the value that was provided on create.
func (u *TwitterProfileUpsertBulk) UpdateFriendsCount() *TwitterProfileUpsertBulk {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.UpdateFriendsCount()
	})
}

// ClearFriendsCount clears the value of the "friends_count" field.
func (u *TwitterProfileUpsertBulk) ClearFriendsCount() *TwitterProfileUpsertBulk {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.ClearFriendsCount()
	})
}

// SetTwitterCount sets the "twitter_count" field.
func (u *TwitterProfileUpsertBulk) SetTwitterCount(v int) *TwitterProfileUpsertBulk {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.SetTwitterCount(v)
	})
}

// AddTwitterCount adds v to the "twitter_count" field.
func (u *TwitterProfileUpsertBulk) AddTwitterCount(v int) *TwitterProfileUpsertBulk {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.AddTwitterCount(v)
	})
}

// UpdateTwitterCount sets the "twitter_count" field to the value that was provided on create.
func (u *TwitterProfileUpsertBulk) UpdateTwitterCount() *TwitterProfileUpsertBulk {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.UpdateTwitterCount()
	})
}

// ClearTwitterCount clears the value of the "twitter_count" field.
func (u *TwitterProfileUpsertBulk) ClearTwitterCount() *TwitterProfileUpsertBulk {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.ClearTwitterCount()
	})
}

// SetPinnedNoteID sets the "pinned_note_id" field.
func (u *TwitterProfileUpsertBulk) SetPinnedNoteID(v string) *TwitterProfileUpsertBulk {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.SetPinnedNoteID(v)
	})
}

// UpdatePinnedNoteID sets the "pinned_note_id" field to the value that was provided on create.
func (u *TwitterProfileUpsertBulk) UpdatePinnedNoteID() *TwitterProfileUpsertBulk {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.UpdatePinnedNoteID()
	})
}

// ClearPinnedNoteID clears the value of the "pinned_note_id" field.
func (u *TwitterProfileUpsertBulk) ClearPinnedNoteID() *TwitterProfileUpsertBulk {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.ClearPinnedNoteID()
	})
}

// SetAvatar sets the "avatar" field.
func (u *TwitterProfileUpsertBulk) SetAvatar(v string) *TwitterProfileUpsertBulk {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.SetAvatar(v)
	})
}

// UpdateAvatar sets the "avatar" field to the value that was provided on create.
func (u *TwitterProfileUpsertBulk) UpdateAvatar() *TwitterProfileUpsertBulk {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.UpdateAvatar()
	})
}

// ClearAvatar clears the value of the "avatar" field.
func (u *TwitterProfileUpsertBulk) ClearAvatar() *TwitterProfileUpsertBulk {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.ClearAvatar()
	})
}

// SetBanner sets the "banner" field.
func (u *TwitterProfileUpsertBulk) SetBanner(v string) *TwitterProfileUpsertBulk {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.SetBanner(v)
	})
}

// UpdateBanner sets the "banner" field to the value that was provided on create.
func (u *TwitterProfileUpsertBulk) UpdateBanner() *TwitterProfileUpsertBulk {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.UpdateBanner()
	})
}

// ClearBanner clears the value of the "banner" field.
func (u *TwitterProfileUpsertBulk) ClearBanner() *TwitterProfileUpsertBulk {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.ClearBanner()
	})
}

// SetBiography sets the "biography" field.
func (u *TwitterProfileUpsertBulk) SetBiography(v string) *TwitterProfileUpsertBulk {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.SetBiography(v)
	})
}

// UpdateBiography sets the "biography" field to the value that was provided on create.
func (u *TwitterProfileUpsertBulk) UpdateBiography() *TwitterProfileUpsertBulk {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.UpdateBiography()
	})
}

// ClearBiography clears the value of the "biography" field.
func (u *TwitterProfileUpsertBulk) ClearBiography() *TwitterProfileUpsertBulk {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.ClearBiography()
	})
}

// SetBirthday sets the "birthday" field.
func (u *TwitterProfileUpsertBulk) SetBirthday(v string) *TwitterProfileUpsertBulk {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.SetBirthday(v)
	})
}

// UpdateBirthday sets the "birthday" field to the value that was provided on create.
func (u *TwitterProfileUpsertBulk) UpdateBirthday() *TwitterProfileUpsertBulk {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.UpdateBirthday()
	})
}

// ClearBirthday clears the value of the "birthday" field.
func (u *TwitterProfileUpsertBulk) ClearBirthday() *TwitterProfileUpsertBulk {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.ClearBirthday()
	})
}

// SetLocation sets the "location" field.
func (u *TwitterProfileUpsertBulk) SetLocation(v string) *TwitterProfileUpsertBulk {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.SetLocation(v)
	})
}

// UpdateLocation sets the "location" field to the value that was provided on create.
func (u *TwitterProfileUpsertBulk) UpdateLocation() *TwitterProfileUpsertBulk {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.UpdateLocation()
	})
}

// ClearLocation clears the value of the "location" field.
func (u *TwitterProfileUpsertBulk) ClearLocation() *TwitterProfileUpsertBulk {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.ClearLocation()
	})
}

// SetURL sets the "url" field.
func (u *TwitterProfileUpsertBulk) SetURL(v string) *TwitterProfileUpsertBulk {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.SetURL(v)
	})
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *TwitterProfileUpsertBulk) UpdateURL() *TwitterProfileUpsertBulk {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.UpdateURL()
	})
}

// ClearURL clears the value of the "url" field.
func (u *TwitterProfileUpsertBulk) ClearURL() *TwitterProfileUpsertBulk {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.ClearURL()
	})
}

// SetWebsite sets the "website" field.
func (u *TwitterProfileUpsertBulk) SetWebsite(v string) *TwitterProfileUpsertBulk {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.SetWebsite(v)
	})
}

// UpdateWebsite sets the "website" field to the value that was provided on create.
func (u *TwitterProfileUpsertBulk) UpdateWebsite() *TwitterProfileUpsertBulk {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.UpdateWebsite()
	})
}

// ClearWebsite clears the value of the "website" field.
func (u *TwitterProfileUpsertBulk) ClearWebsite() *TwitterProfileUpsertBulk {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.ClearWebsite()
	})
}

// SetNsecKey sets the "nsec_key" field.
func (u *TwitterProfileUpsertBulk) SetNsecKey(v string) *TwitterProfileUpsertBulk {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.SetNsecKey(v)
	})
}

// UpdateNsecKey sets the "nsec_key" field to the value that was provided on create.
func (u *TwitterProfileUpsertBulk) UpdateNsecKey() *TwitterProfileUpsertBulk {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.UpdateNsecKey()
	})
}

// ClearNsecKey clears the value of the "nsec_key" field.
func (u *TwitterProfileUpsertBulk) ClearNsecKey() *TwitterProfileUpsertBulk {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.ClearNsecKey()
	})
}

// SetNpubKey sets the "npub_key" field.
func (u *TwitterProfileUpsertBulk) SetNpubKey(v string) *TwitterProfileUpsertBulk {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.SetNpubKey(v)
	})
}

// UpdateNpubKey sets the "npub_key" field to the value that was provided on create.
func (u *TwitterProfileUpsertBulk) UpdateNpubKey() *TwitterProfileUpsertBulk {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.UpdateNpubKey()
	})
}

// ClearNpubKey clears the value of the "npub_key" field.
func (u *TwitterProfileUpsertBulk) ClearNpubKey() *TwitterProfileUpsertBulk {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.ClearNpubKey()
	})
}

// SetPrivateKeyHex sets the "private_key_hex" field.
func (u *TwitterProfileUpsertBulk) SetPrivateKeyHex(v string) *TwitterProfileUpsertBulk {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.SetPrivateKeyHex(v)
	})
}

// UpdatePrivateKeyHex sets the "private_key_hex" field to the value that was provided on create.
func (u *TwitterProfileUpsertBulk) UpdatePrivateKeyHex() *TwitterProfileUpsertBulk {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.UpdatePrivateKeyHex()
	})
}

// ClearPrivateKeyHex clears the value of the "private_key_hex" field.
func (u *TwitterProfileUpsertBulk) ClearPrivateKeyHex() *TwitterProfileUpsertBulk {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.ClearPrivateKeyHex()
	})
}

// SetPublicKeyHex sets the "public_key_hex" field.
func (u *TwitterProfileUpsertBulk) SetPublicKeyHex(v string) *TwitterProfileUpsertBulk {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.SetPublicKeyHex(v)
	})
}

// UpdatePublicKeyHex sets the "public_key_hex" field to the value that was provided on create.
func (u *TwitterProfileUpsertBulk) UpdatePublicKeyHex() *TwitterProfileUpsertBulk {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.UpdatePublicKeyHex()
	})
}

// ClearPublicKeyHex clears the value of the "public_key_hex" field.
func (u *TwitterProfileUpsertBulk) ClearPublicKeyHex() *TwitterProfileUpsertBulk {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.ClearPublicKeyHex()
	})
}

// SetPublishNostr sets the "publish_nostr" field.
func (u *TwitterProfileUpsertBulk) SetPublishNostr(v bool) *TwitterProfileUpsertBulk {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.SetPublishNostr(v)
	})
}

// UpdatePublishNostr sets the "publish_nostr" field to the value that was provided on create.
func (u *TwitterProfileUpsertBulk) UpdatePublishNostr() *TwitterProfileUpsertBulk {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.UpdatePublishNostr()
	})
}

// ClearPublishNostr clears the value of the "publish_nostr" field.
func (u *TwitterProfileUpsertBulk) ClearPublishNostr() *TwitterProfileUpsertBulk {
	return u.Update(func(s *TwitterProfileUpsert) {
		s.ClearPublishNostr()
	})
}

// Exec executes the query.
func (u *TwitterProfileUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("core: OnConflict was set for builder %d. Set it on the TwitterProfileCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("core: missing options for TwitterProfileCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TwitterProfileUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
