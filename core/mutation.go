// Code generated by ent, DO NOT EDIT.

package core

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"freefrom.space/nobot/core/botevents"
	"freefrom.space/nobot/core/events"
	"freefrom.space/nobot/core/nostrnotesfetchhistory"
	"freefrom.space/nobot/core/predicate"
	"freefrom.space/nobot/core/twitterfetchhistory"
	"freefrom.space/nobot/core/twitternote"
	"freefrom.space/nobot/core/twitternotesfetchhistory"
	"freefrom.space/nobot/core/twitterprofile"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeBotEvents                = "BotEvents"
	TypeEvents                   = "Events"
	TypeNostrNotesFetchHistory   = "NostrNotesFetchHistory"
	TypeTwitterFetchHistory      = "TwitterFetchHistory"
	TypeTwitterNote              = "TwitterNote"
	TypeTwitterNotesFetchHistory = "TwitterNotesFetchHistory"
	TypeTwitterProfile           = "TwitterProfile"
)

// BotEventsMutation represents an operation that mutates the BotEvents nodes in the graph.
type BotEventsMutation struct {
	config
	op            Op
	typ           string
	id            *int
	event_id      *string
	inserted_at   *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*BotEvents, error)
	predicates    []predicate.BotEvents
}

var _ ent.Mutation = (*BotEventsMutation)(nil)

// boteventsOption allows management of the mutation configuration using functional options.
type boteventsOption func(*BotEventsMutation)

// newBotEventsMutation creates new mutation for the BotEvents entity.
func newBotEventsMutation(c config, op Op, opts ...boteventsOption) *BotEventsMutation {
	m := &BotEventsMutation{
		config:        c,
		op:            op,
		typ:           TypeBotEvents,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withBotEventsID sets the ID field of the mutation.
func withBotEventsID(id int) boteventsOption {
	return func(m *BotEventsMutation) {
		var (
			err   error
			once  sync.Once
			value *BotEvents
		)
		m.oldValue = func(ctx context.Context) (*BotEvents, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().BotEvents.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withBotEvents sets the old BotEvents of the mutation.
func withBotEvents(node *BotEvents) boteventsOption {
	return func(m *BotEventsMutation) {
		m.oldValue = func(context.Context) (*BotEvents, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m BotEventsMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m BotEventsMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("core: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *BotEventsMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *BotEventsMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().BotEvents.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetEventID sets the "event_id" field.
func (m *BotEventsMutation) SetEventID(s string) {
	m.event_id = &s
}

// EventID returns the value of the "event_id" field in the mutation.
func (m *BotEventsMutation) EventID() (r string, exists bool) {
	v := m.event_id
	if v == nil {
		return
	}
	return *v, true
}

// OldEventID returns the old "event_id" field's value of the BotEvents entity.
// If the BotEvents object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BotEventsMutation) OldEventID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEventID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEventID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEventID: %w", err)
	}
	return oldValue.EventID, nil
}

// ResetEventID resets all changes to the "event_id" field.
func (m *BotEventsMutation) ResetEventID() {
	m.event_id = nil
}

// SetInsertedAt sets the "inserted_at" field.
func (m *BotEventsMutation) SetInsertedAt(t time.Time) {
	m.inserted_at = &t
}

// InsertedAt returns the value of the "inserted_at" field in the mutation.
func (m *BotEventsMutation) InsertedAt() (r time.Time, exists bool) {
	v := m.inserted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldInsertedAt returns the old "inserted_at" field's value of the BotEvents entity.
// If the BotEvents object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BotEventsMutation) OldInsertedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInsertedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInsertedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInsertedAt: %w", err)
	}
	return oldValue.InsertedAt, nil
}

// ClearInsertedAt clears the value of the "inserted_at" field.
func (m *BotEventsMutation) ClearInsertedAt() {
	m.inserted_at = nil
	m.clearedFields[botevents.FieldInsertedAt] = struct{}{}
}

// InsertedAtCleared returns if the "inserted_at" field was cleared in this mutation.
func (m *BotEventsMutation) InsertedAtCleared() bool {
	_, ok := m.clearedFields[botevents.FieldInsertedAt]
	return ok
}

// ResetInsertedAt resets all changes to the "inserted_at" field.
func (m *BotEventsMutation) ResetInsertedAt() {
	m.inserted_at = nil
	delete(m.clearedFields, botevents.FieldInsertedAt)
}

// Where appends a list predicates to the BotEventsMutation builder.
func (m *BotEventsMutation) Where(ps ...predicate.BotEvents) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the BotEventsMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *BotEventsMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.BotEvents, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *BotEventsMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *BotEventsMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (BotEvents).
func (m *BotEventsMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *BotEventsMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.event_id != nil {
		fields = append(fields, botevents.FieldEventID)
	}
	if m.inserted_at != nil {
		fields = append(fields, botevents.FieldInsertedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *BotEventsMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case botevents.FieldEventID:
		return m.EventID()
	case botevents.FieldInsertedAt:
		return m.InsertedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *BotEventsMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case botevents.FieldEventID:
		return m.OldEventID(ctx)
	case botevents.FieldInsertedAt:
		return m.OldInsertedAt(ctx)
	}
	return nil, fmt.Errorf("unknown BotEvents field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BotEventsMutation) SetField(name string, value ent.Value) error {
	switch name {
	case botevents.FieldEventID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEventID(v)
		return nil
	case botevents.FieldInsertedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInsertedAt(v)
		return nil
	}
	return fmt.Errorf("unknown BotEvents field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *BotEventsMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *BotEventsMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BotEventsMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown BotEvents numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *BotEventsMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(botevents.FieldInsertedAt) {
		fields = append(fields, botevents.FieldInsertedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *BotEventsMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *BotEventsMutation) ClearField(name string) error {
	switch name {
	case botevents.FieldInsertedAt:
		m.ClearInsertedAt()
		return nil
	}
	return fmt.Errorf("unknown BotEvents nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *BotEventsMutation) ResetField(name string) error {
	switch name {
	case botevents.FieldEventID:
		m.ResetEventID()
		return nil
	case botevents.FieldInsertedAt:
		m.ResetInsertedAt()
		return nil
	}
	return fmt.Errorf("unknown BotEvents field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *BotEventsMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *BotEventsMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *BotEventsMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *BotEventsMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *BotEventsMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *BotEventsMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *BotEventsMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown BotEvents unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *BotEventsMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown BotEvents edge %s", name)
}

// EventsMutation represents an operation that mutates the Events nodes in the graph.
type EventsMutation struct {
	config
	op            Op
	typ           string
	id            *int64
	event_id      *[]byte
	pubkey        *[]byte
	created_at    *time.Time
	deleted_at    *time.Time
	kind          *int64
	addkind       *int64
	tags          *[][]string
	appendtags    [][]string
	content       *string
	sig           *[]byte
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Events, error)
	predicates    []predicate.Events
}

var _ ent.Mutation = (*EventsMutation)(nil)

// eventsOption allows management of the mutation configuration using functional options.
type eventsOption func(*EventsMutation)

// newEventsMutation creates new mutation for the Events entity.
func newEventsMutation(c config, op Op, opts ...eventsOption) *EventsMutation {
	m := &EventsMutation{
		config:        c,
		op:            op,
		typ:           TypeEvents,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEventsID sets the ID field of the mutation.
func withEventsID(id int64) eventsOption {
	return func(m *EventsMutation) {
		var (
			err   error
			once  sync.Once
			value *Events
		)
		m.oldValue = func(ctx context.Context) (*Events, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Events.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEvents sets the old Events of the mutation.
func withEvents(node *Events) eventsOption {
	return func(m *EventsMutation) {
		m.oldValue = func(context.Context) (*Events, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EventsMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EventsMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("core: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Events entities.
func (m *EventsMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *EventsMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *EventsMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Events.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetEventID sets the "event_id" field.
func (m *EventsMutation) SetEventID(b []byte) {
	m.event_id = &b
}

// EventID returns the value of the "event_id" field in the mutation.
func (m *EventsMutation) EventID() (r []byte, exists bool) {
	v := m.event_id
	if v == nil {
		return
	}
	return *v, true
}

// OldEventID returns the old "event_id" field's value of the Events entity.
// If the Events object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventsMutation) OldEventID(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEventID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEventID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEventID: %w", err)
	}
	return oldValue.EventID, nil
}

// ResetEventID resets all changes to the "event_id" field.
func (m *EventsMutation) ResetEventID() {
	m.event_id = nil
}

// SetPubkey sets the "pubkey" field.
func (m *EventsMutation) SetPubkey(b []byte) {
	m.pubkey = &b
}

// Pubkey returns the value of the "pubkey" field in the mutation.
func (m *EventsMutation) Pubkey() (r []byte, exists bool) {
	v := m.pubkey
	if v == nil {
		return
	}
	return *v, true
}

// OldPubkey returns the old "pubkey" field's value of the Events entity.
// If the Events object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventsMutation) OldPubkey(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPubkey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPubkey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPubkey: %w", err)
	}
	return oldValue.Pubkey, nil
}

// ResetPubkey resets all changes to the "pubkey" field.
func (m *EventsMutation) ResetPubkey() {
	m.pubkey = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *EventsMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *EventsMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Events entity.
// If the Events object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventsMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *EventsMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *EventsMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *EventsMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Events entity.
// If the Events object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventsMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *EventsMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[events.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *EventsMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[events.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *EventsMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, events.FieldDeletedAt)
}

// SetKind sets the "kind" field.
func (m *EventsMutation) SetKind(i int64) {
	m.kind = &i
	m.addkind = nil
}

// Kind returns the value of the "kind" field in the mutation.
func (m *EventsMutation) Kind() (r int64, exists bool) {
	v := m.kind
	if v == nil {
		return
	}
	return *v, true
}

// OldKind returns the old "kind" field's value of the Events entity.
// If the Events object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventsMutation) OldKind(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldKind is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldKind requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKind: %w", err)
	}
	return oldValue.Kind, nil
}

// AddKind adds i to the "kind" field.
func (m *EventsMutation) AddKind(i int64) {
	if m.addkind != nil {
		*m.addkind += i
	} else {
		m.addkind = &i
	}
}

// AddedKind returns the value that was added to the "kind" field in this mutation.
func (m *EventsMutation) AddedKind() (r int64, exists bool) {
	v := m.addkind
	if v == nil {
		return
	}
	return *v, true
}

// ResetKind resets all changes to the "kind" field.
func (m *EventsMutation) ResetKind() {
	m.kind = nil
	m.addkind = nil
}

// SetTags sets the "tags" field.
func (m *EventsMutation) SetTags(s [][]string) {
	m.tags = &s
	m.appendtags = nil
}

// Tags returns the value of the "tags" field in the mutation.
func (m *EventsMutation) Tags() (r [][]string, exists bool) {
	v := m.tags
	if v == nil {
		return
	}
	return *v, true
}

// OldTags returns the old "tags" field's value of the Events entity.
// If the Events object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventsMutation) OldTags(ctx context.Context) (v [][]string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTags is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTags requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTags: %w", err)
	}
	return oldValue.Tags, nil
}

// AppendTags adds s to the "tags" field.
func (m *EventsMutation) AppendTags(s [][]string) {
	m.appendtags = append(m.appendtags, s...)
}

// AppendedTags returns the list of values that were appended to the "tags" field in this mutation.
func (m *EventsMutation) AppendedTags() ([][]string, bool) {
	if len(m.appendtags) == 0 {
		return nil, false
	}
	return m.appendtags, true
}

// ResetTags resets all changes to the "tags" field.
func (m *EventsMutation) ResetTags() {
	m.tags = nil
	m.appendtags = nil
}

// SetContent sets the "content" field.
func (m *EventsMutation) SetContent(s string) {
	m.content = &s
}

// Content returns the value of the "content" field in the mutation.
func (m *EventsMutation) Content() (r string, exists bool) {
	v := m.content
	if v == nil {
		return
	}
	return *v, true
}

// OldContent returns the old "content" field's value of the Events entity.
// If the Events object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventsMutation) OldContent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContent: %w", err)
	}
	return oldValue.Content, nil
}

// ResetContent resets all changes to the "content" field.
func (m *EventsMutation) ResetContent() {
	m.content = nil
}

// SetSig sets the "sig" field.
func (m *EventsMutation) SetSig(b []byte) {
	m.sig = &b
}

// Sig returns the value of the "sig" field in the mutation.
func (m *EventsMutation) Sig() (r []byte, exists bool) {
	v := m.sig
	if v == nil {
		return
	}
	return *v, true
}

// OldSig returns the old "sig" field's value of the Events entity.
// If the Events object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventsMutation) OldSig(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSig is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSig requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSig: %w", err)
	}
	return oldValue.Sig, nil
}

// ResetSig resets all changes to the "sig" field.
func (m *EventsMutation) ResetSig() {
	m.sig = nil
}

// Where appends a list predicates to the EventsMutation builder.
func (m *EventsMutation) Where(ps ...predicate.Events) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the EventsMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *EventsMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Events, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *EventsMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *EventsMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Events).
func (m *EventsMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EventsMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.event_id != nil {
		fields = append(fields, events.FieldEventID)
	}
	if m.pubkey != nil {
		fields = append(fields, events.FieldPubkey)
	}
	if m.created_at != nil {
		fields = append(fields, events.FieldCreatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, events.FieldDeletedAt)
	}
	if m.kind != nil {
		fields = append(fields, events.FieldKind)
	}
	if m.tags != nil {
		fields = append(fields, events.FieldTags)
	}
	if m.content != nil {
		fields = append(fields, events.FieldContent)
	}
	if m.sig != nil {
		fields = append(fields, events.FieldSig)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EventsMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case events.FieldEventID:
		return m.EventID()
	case events.FieldPubkey:
		return m.Pubkey()
	case events.FieldCreatedAt:
		return m.CreatedAt()
	case events.FieldDeletedAt:
		return m.DeletedAt()
	case events.FieldKind:
		return m.Kind()
	case events.FieldTags:
		return m.Tags()
	case events.FieldContent:
		return m.Content()
	case events.FieldSig:
		return m.Sig()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EventsMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case events.FieldEventID:
		return m.OldEventID(ctx)
	case events.FieldPubkey:
		return m.OldPubkey(ctx)
	case events.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case events.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case events.FieldKind:
		return m.OldKind(ctx)
	case events.FieldTags:
		return m.OldTags(ctx)
	case events.FieldContent:
		return m.OldContent(ctx)
	case events.FieldSig:
		return m.OldSig(ctx)
	}
	return nil, fmt.Errorf("unknown Events field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EventsMutation) SetField(name string, value ent.Value) error {
	switch name {
	case events.FieldEventID:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEventID(v)
		return nil
	case events.FieldPubkey:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPubkey(v)
		return nil
	case events.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case events.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case events.FieldKind:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKind(v)
		return nil
	case events.FieldTags:
		v, ok := value.([][]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTags(v)
		return nil
	case events.FieldContent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContent(v)
		return nil
	case events.FieldSig:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSig(v)
		return nil
	}
	return fmt.Errorf("unknown Events field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EventsMutation) AddedFields() []string {
	var fields []string
	if m.addkind != nil {
		fields = append(fields, events.FieldKind)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EventsMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case events.FieldKind:
		return m.AddedKind()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EventsMutation) AddField(name string, value ent.Value) error {
	switch name {
	case events.FieldKind:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddKind(v)
		return nil
	}
	return fmt.Errorf("unknown Events numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EventsMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(events.FieldDeletedAt) {
		fields = append(fields, events.FieldDeletedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EventsMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EventsMutation) ClearField(name string) error {
	switch name {
	case events.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown Events nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EventsMutation) ResetField(name string) error {
	switch name {
	case events.FieldEventID:
		m.ResetEventID()
		return nil
	case events.FieldPubkey:
		m.ResetPubkey()
		return nil
	case events.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case events.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case events.FieldKind:
		m.ResetKind()
		return nil
	case events.FieldTags:
		m.ResetTags()
		return nil
	case events.FieldContent:
		m.ResetContent()
		return nil
	case events.FieldSig:
		m.ResetSig()
		return nil
	}
	return fmt.Errorf("unknown Events field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EventsMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EventsMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EventsMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EventsMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EventsMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EventsMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EventsMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Events unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EventsMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Events edge %s", name)
}

// NostrNotesFetchHistoryMutation represents an operation that mutates the NostrNotesFetchHistory nodes in the graph.
type NostrNotesFetchHistoryMutation struct {
	config
	op             Op
	typ            string
	id             *string
	publish_at     *time.Time
	public_key_hex *string
	context        *string
	clearedFields  map[string]struct{}
	done           bool
	oldValue       func(context.Context) (*NostrNotesFetchHistory, error)
	predicates     []predicate.NostrNotesFetchHistory
}

var _ ent.Mutation = (*NostrNotesFetchHistoryMutation)(nil)

// nostrnotesfetchhistoryOption allows management of the mutation configuration using functional options.
type nostrnotesfetchhistoryOption func(*NostrNotesFetchHistoryMutation)

// newNostrNotesFetchHistoryMutation creates new mutation for the NostrNotesFetchHistory entity.
func newNostrNotesFetchHistoryMutation(c config, op Op, opts ...nostrnotesfetchhistoryOption) *NostrNotesFetchHistoryMutation {
	m := &NostrNotesFetchHistoryMutation{
		config:        c,
		op:            op,
		typ:           TypeNostrNotesFetchHistory,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withNostrNotesFetchHistoryID sets the ID field of the mutation.
func withNostrNotesFetchHistoryID(id string) nostrnotesfetchhistoryOption {
	return func(m *NostrNotesFetchHistoryMutation) {
		var (
			err   error
			once  sync.Once
			value *NostrNotesFetchHistory
		)
		m.oldValue = func(ctx context.Context) (*NostrNotesFetchHistory, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().NostrNotesFetchHistory.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withNostrNotesFetchHistory sets the old NostrNotesFetchHistory of the mutation.
func withNostrNotesFetchHistory(node *NostrNotesFetchHistory) nostrnotesfetchhistoryOption {
	return func(m *NostrNotesFetchHistoryMutation) {
		m.oldValue = func(context.Context) (*NostrNotesFetchHistory, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m NostrNotesFetchHistoryMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m NostrNotesFetchHistoryMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("core: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of NostrNotesFetchHistory entities.
func (m *NostrNotesFetchHistoryMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *NostrNotesFetchHistoryMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *NostrNotesFetchHistoryMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().NostrNotesFetchHistory.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetPublishAt sets the "publish_at" field.
func (m *NostrNotesFetchHistoryMutation) SetPublishAt(t time.Time) {
	m.publish_at = &t
}

// PublishAt returns the value of the "publish_at" field in the mutation.
func (m *NostrNotesFetchHistoryMutation) PublishAt() (r time.Time, exists bool) {
	v := m.publish_at
	if v == nil {
		return
	}
	return *v, true
}

// OldPublishAt returns the old "publish_at" field's value of the NostrNotesFetchHistory entity.
// If the NostrNotesFetchHistory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NostrNotesFetchHistoryMutation) OldPublishAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPublishAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPublishAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPublishAt: %w", err)
	}
	return oldValue.PublishAt, nil
}

// ResetPublishAt resets all changes to the "publish_at" field.
func (m *NostrNotesFetchHistoryMutation) ResetPublishAt() {
	m.publish_at = nil
}

// SetPublicKeyHex sets the "public_key_hex" field.
func (m *NostrNotesFetchHistoryMutation) SetPublicKeyHex(s string) {
	m.public_key_hex = &s
}

// PublicKeyHex returns the value of the "public_key_hex" field in the mutation.
func (m *NostrNotesFetchHistoryMutation) PublicKeyHex() (r string, exists bool) {
	v := m.public_key_hex
	if v == nil {
		return
	}
	return *v, true
}

// OldPublicKeyHex returns the old "public_key_hex" field's value of the NostrNotesFetchHistory entity.
// If the NostrNotesFetchHistory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NostrNotesFetchHistoryMutation) OldPublicKeyHex(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPublicKeyHex is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPublicKeyHex requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPublicKeyHex: %w", err)
	}
	return oldValue.PublicKeyHex, nil
}

// ResetPublicKeyHex resets all changes to the "public_key_hex" field.
func (m *NostrNotesFetchHistoryMutation) ResetPublicKeyHex() {
	m.public_key_hex = nil
}

// SetContext sets the "context" field.
func (m *NostrNotesFetchHistoryMutation) SetContext(s string) {
	m.context = &s
}

// Context returns the value of the "context" field in the mutation.
func (m *NostrNotesFetchHistoryMutation) Context() (r string, exists bool) {
	v := m.context
	if v == nil {
		return
	}
	return *v, true
}

// OldContext returns the old "context" field's value of the NostrNotesFetchHistory entity.
// If the NostrNotesFetchHistory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NostrNotesFetchHistoryMutation) OldContext(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContext is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContext requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContext: %w", err)
	}
	return oldValue.Context, nil
}

// ResetContext resets all changes to the "context" field.
func (m *NostrNotesFetchHistoryMutation) ResetContext() {
	m.context = nil
}

// Where appends a list predicates to the NostrNotesFetchHistoryMutation builder.
func (m *NostrNotesFetchHistoryMutation) Where(ps ...predicate.NostrNotesFetchHistory) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the NostrNotesFetchHistoryMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *NostrNotesFetchHistoryMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.NostrNotesFetchHistory, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *NostrNotesFetchHistoryMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *NostrNotesFetchHistoryMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (NostrNotesFetchHistory).
func (m *NostrNotesFetchHistoryMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *NostrNotesFetchHistoryMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.publish_at != nil {
		fields = append(fields, nostrnotesfetchhistory.FieldPublishAt)
	}
	if m.public_key_hex != nil {
		fields = append(fields, nostrnotesfetchhistory.FieldPublicKeyHex)
	}
	if m.context != nil {
		fields = append(fields, nostrnotesfetchhistory.FieldContext)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *NostrNotesFetchHistoryMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case nostrnotesfetchhistory.FieldPublishAt:
		return m.PublishAt()
	case nostrnotesfetchhistory.FieldPublicKeyHex:
		return m.PublicKeyHex()
	case nostrnotesfetchhistory.FieldContext:
		return m.Context()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *NostrNotesFetchHistoryMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case nostrnotesfetchhistory.FieldPublishAt:
		return m.OldPublishAt(ctx)
	case nostrnotesfetchhistory.FieldPublicKeyHex:
		return m.OldPublicKeyHex(ctx)
	case nostrnotesfetchhistory.FieldContext:
		return m.OldContext(ctx)
	}
	return nil, fmt.Errorf("unknown NostrNotesFetchHistory field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NostrNotesFetchHistoryMutation) SetField(name string, value ent.Value) error {
	switch name {
	case nostrnotesfetchhistory.FieldPublishAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPublishAt(v)
		return nil
	case nostrnotesfetchhistory.FieldPublicKeyHex:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPublicKeyHex(v)
		return nil
	case nostrnotesfetchhistory.FieldContext:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContext(v)
		return nil
	}
	return fmt.Errorf("unknown NostrNotesFetchHistory field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *NostrNotesFetchHistoryMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *NostrNotesFetchHistoryMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NostrNotesFetchHistoryMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown NostrNotesFetchHistory numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *NostrNotesFetchHistoryMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *NostrNotesFetchHistoryMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *NostrNotesFetchHistoryMutation) ClearField(name string) error {
	return fmt.Errorf("unknown NostrNotesFetchHistory nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *NostrNotesFetchHistoryMutation) ResetField(name string) error {
	switch name {
	case nostrnotesfetchhistory.FieldPublishAt:
		m.ResetPublishAt()
		return nil
	case nostrnotesfetchhistory.FieldPublicKeyHex:
		m.ResetPublicKeyHex()
		return nil
	case nostrnotesfetchhistory.FieldContext:
		m.ResetContext()
		return nil
	}
	return fmt.Errorf("unknown NostrNotesFetchHistory field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *NostrNotesFetchHistoryMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *NostrNotesFetchHistoryMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *NostrNotesFetchHistoryMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *NostrNotesFetchHistoryMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *NostrNotesFetchHistoryMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *NostrNotesFetchHistoryMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *NostrNotesFetchHistoryMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown NostrNotesFetchHistory unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *NostrNotesFetchHistoryMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown NostrNotesFetchHistory edge %s", name)
}

// TwitterFetchHistoryMutation represents an operation that mutates the TwitterFetchHistory nodes in the graph.
type TwitterFetchHistoryMutation struct {
	config
	op            Op
	typ           string
	id            *int
	item_id       *string
	name          *string
	fetch_type    *string
	fetch_at      *time.Time
	content       *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*TwitterFetchHistory, error)
	predicates    []predicate.TwitterFetchHistory
}

var _ ent.Mutation = (*TwitterFetchHistoryMutation)(nil)

// twitterfetchhistoryOption allows management of the mutation configuration using functional options.
type twitterfetchhistoryOption func(*TwitterFetchHistoryMutation)

// newTwitterFetchHistoryMutation creates new mutation for the TwitterFetchHistory entity.
func newTwitterFetchHistoryMutation(c config, op Op, opts ...twitterfetchhistoryOption) *TwitterFetchHistoryMutation {
	m := &TwitterFetchHistoryMutation{
		config:        c,
		op:            op,
		typ:           TypeTwitterFetchHistory,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTwitterFetchHistoryID sets the ID field of the mutation.
func withTwitterFetchHistoryID(id int) twitterfetchhistoryOption {
	return func(m *TwitterFetchHistoryMutation) {
		var (
			err   error
			once  sync.Once
			value *TwitterFetchHistory
		)
		m.oldValue = func(ctx context.Context) (*TwitterFetchHistory, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TwitterFetchHistory.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTwitterFetchHistory sets the old TwitterFetchHistory of the mutation.
func withTwitterFetchHistory(node *TwitterFetchHistory) twitterfetchhistoryOption {
	return func(m *TwitterFetchHistoryMutation) {
		m.oldValue = func(context.Context) (*TwitterFetchHistory, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TwitterFetchHistoryMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TwitterFetchHistoryMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("core: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TwitterFetchHistoryMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TwitterFetchHistoryMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().TwitterFetchHistory.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetItemID sets the "item_id" field.
func (m *TwitterFetchHistoryMutation) SetItemID(s string) {
	m.item_id = &s
}

// ItemID returns the value of the "item_id" field in the mutation.
func (m *TwitterFetchHistoryMutation) ItemID() (r string, exists bool) {
	v := m.item_id
	if v == nil {
		return
	}
	return *v, true
}

// OldItemID returns the old "item_id" field's value of the TwitterFetchHistory entity.
// If the TwitterFetchHistory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TwitterFetchHistoryMutation) OldItemID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldItemID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldItemID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldItemID: %w", err)
	}
	return oldValue.ItemID, nil
}

// ResetItemID resets all changes to the "item_id" field.
func (m *TwitterFetchHistoryMutation) ResetItemID() {
	m.item_id = nil
}

// SetName sets the "name" field.
func (m *TwitterFetchHistoryMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *TwitterFetchHistoryMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the TwitterFetchHistory entity.
// If the TwitterFetchHistory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TwitterFetchHistoryMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *TwitterFetchHistoryMutation) ResetName() {
	m.name = nil
}

// SetFetchType sets the "fetch_type" field.
func (m *TwitterFetchHistoryMutation) SetFetchType(s string) {
	m.fetch_type = &s
}

// FetchType returns the value of the "fetch_type" field in the mutation.
func (m *TwitterFetchHistoryMutation) FetchType() (r string, exists bool) {
	v := m.fetch_type
	if v == nil {
		return
	}
	return *v, true
}

// OldFetchType returns the old "fetch_type" field's value of the TwitterFetchHistory entity.
// If the TwitterFetchHistory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TwitterFetchHistoryMutation) OldFetchType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFetchType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFetchType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFetchType: %w", err)
	}
	return oldValue.FetchType, nil
}

// ResetFetchType resets all changes to the "fetch_type" field.
func (m *TwitterFetchHistoryMutation) ResetFetchType() {
	m.fetch_type = nil
}

// SetFetchAt sets the "fetch_at" field.
func (m *TwitterFetchHistoryMutation) SetFetchAt(t time.Time) {
	m.fetch_at = &t
}

// FetchAt returns the value of the "fetch_at" field in the mutation.
func (m *TwitterFetchHistoryMutation) FetchAt() (r time.Time, exists bool) {
	v := m.fetch_at
	if v == nil {
		return
	}
	return *v, true
}

// OldFetchAt returns the old "fetch_at" field's value of the TwitterFetchHistory entity.
// If the TwitterFetchHistory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TwitterFetchHistoryMutation) OldFetchAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFetchAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFetchAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFetchAt: %w", err)
	}
	return oldValue.FetchAt, nil
}

// ResetFetchAt resets all changes to the "fetch_at" field.
func (m *TwitterFetchHistoryMutation) ResetFetchAt() {
	m.fetch_at = nil
}

// SetContent sets the "content" field.
func (m *TwitterFetchHistoryMutation) SetContent(s string) {
	m.content = &s
}

// Content returns the value of the "content" field in the mutation.
func (m *TwitterFetchHistoryMutation) Content() (r string, exists bool) {
	v := m.content
	if v == nil {
		return
	}
	return *v, true
}

// OldContent returns the old "content" field's value of the TwitterFetchHistory entity.
// If the TwitterFetchHistory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TwitterFetchHistoryMutation) OldContent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContent: %w", err)
	}
	return oldValue.Content, nil
}

// ResetContent resets all changes to the "content" field.
func (m *TwitterFetchHistoryMutation) ResetContent() {
	m.content = nil
}

// Where appends a list predicates to the TwitterFetchHistoryMutation builder.
func (m *TwitterFetchHistoryMutation) Where(ps ...predicate.TwitterFetchHistory) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TwitterFetchHistoryMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TwitterFetchHistoryMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.TwitterFetchHistory, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TwitterFetchHistoryMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TwitterFetchHistoryMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (TwitterFetchHistory).
func (m *TwitterFetchHistoryMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TwitterFetchHistoryMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.item_id != nil {
		fields = append(fields, twitterfetchhistory.FieldItemID)
	}
	if m.name != nil {
		fields = append(fields, twitterfetchhistory.FieldName)
	}
	if m.fetch_type != nil {
		fields = append(fields, twitterfetchhistory.FieldFetchType)
	}
	if m.fetch_at != nil {
		fields = append(fields, twitterfetchhistory.FieldFetchAt)
	}
	if m.content != nil {
		fields = append(fields, twitterfetchhistory.FieldContent)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TwitterFetchHistoryMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case twitterfetchhistory.FieldItemID:
		return m.ItemID()
	case twitterfetchhistory.FieldName:
		return m.Name()
	case twitterfetchhistory.FieldFetchType:
		return m.FetchType()
	case twitterfetchhistory.FieldFetchAt:
		return m.FetchAt()
	case twitterfetchhistory.FieldContent:
		return m.Content()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TwitterFetchHistoryMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case twitterfetchhistory.FieldItemID:
		return m.OldItemID(ctx)
	case twitterfetchhistory.FieldName:
		return m.OldName(ctx)
	case twitterfetchhistory.FieldFetchType:
		return m.OldFetchType(ctx)
	case twitterfetchhistory.FieldFetchAt:
		return m.OldFetchAt(ctx)
	case twitterfetchhistory.FieldContent:
		return m.OldContent(ctx)
	}
	return nil, fmt.Errorf("unknown TwitterFetchHistory field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TwitterFetchHistoryMutation) SetField(name string, value ent.Value) error {
	switch name {
	case twitterfetchhistory.FieldItemID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetItemID(v)
		return nil
	case twitterfetchhistory.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case twitterfetchhistory.FieldFetchType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFetchType(v)
		return nil
	case twitterfetchhistory.FieldFetchAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFetchAt(v)
		return nil
	case twitterfetchhistory.FieldContent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContent(v)
		return nil
	}
	return fmt.Errorf("unknown TwitterFetchHistory field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TwitterFetchHistoryMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TwitterFetchHistoryMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TwitterFetchHistoryMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown TwitterFetchHistory numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TwitterFetchHistoryMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TwitterFetchHistoryMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TwitterFetchHistoryMutation) ClearField(name string) error {
	return fmt.Errorf("unknown TwitterFetchHistory nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TwitterFetchHistoryMutation) ResetField(name string) error {
	switch name {
	case twitterfetchhistory.FieldItemID:
		m.ResetItemID()
		return nil
	case twitterfetchhistory.FieldName:
		m.ResetName()
		return nil
	case twitterfetchhistory.FieldFetchType:
		m.ResetFetchType()
		return nil
	case twitterfetchhistory.FieldFetchAt:
		m.ResetFetchAt()
		return nil
	case twitterfetchhistory.FieldContent:
		m.ResetContent()
		return nil
	}
	return fmt.Errorf("unknown TwitterFetchHistory field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TwitterFetchHistoryMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TwitterFetchHistoryMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TwitterFetchHistoryMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TwitterFetchHistoryMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TwitterFetchHistoryMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TwitterFetchHistoryMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TwitterFetchHistoryMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown TwitterFetchHistory unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TwitterFetchHistoryMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown TwitterFetchHistory edge %s", name)
}

// TwitterNoteMutation represents an operation that mutates the TwitterNote nodes in the graph.
type TwitterNoteMutation struct {
	config
	op                     Op
	typ                    string
	id                     *string
	user_id                *string
	user_name              *string
	conversation_id        *string
	text                   *string
	likes                  *int
	addlikes               *int
	replies                *int
	addreplies             *int
	retweets               *int
	addretweets            *int
	views                  *int
	addviews               *int
	photo_ids              *[]string
	appendphoto_ids        []string
	photo_urls             *[]string
	appendphoto_urls       []string
	video_id               *[]string
	appendvideo_id         []string
	video_preview          *[]string
	appendvideo_preview    []string
	video_urls             *[]string
	appendvideo_urls       []string
	mention_id             *[]string
	appendmention_id       []string
	mention_username       *[]string
	appendmention_username []string
	mention_name           *[]string
	appendmention_name     []string
	retweeted_status_id    *string
	is_retweet             *bool
	post_at                *time.Time
	urls                   *[]string
	appendurls             []string
	html_text              *string
	permanent_url          *string
	is_reply               *bool
	is_pin                 *bool
	sensitive_content      *bool
	reply_to               *string
	raw_yaml               *string
	hash_tags              *[]string
	appendhash_tags        []string
	event                  *string
	event_id               *string
	publish_status         *string
	published_at           *time.Time
	fetched_at             *time.Time
	language               *string
	clearedFields          map[string]struct{}
	done                   bool
	oldValue               func(context.Context) (*TwitterNote, error)
	predicates             []predicate.TwitterNote
}

var _ ent.Mutation = (*TwitterNoteMutation)(nil)

// twitternoteOption allows management of the mutation configuration using functional options.
type twitternoteOption func(*TwitterNoteMutation)

// newTwitterNoteMutation creates new mutation for the TwitterNote entity.
func newTwitterNoteMutation(c config, op Op, opts ...twitternoteOption) *TwitterNoteMutation {
	m := &TwitterNoteMutation{
		config:        c,
		op:            op,
		typ:           TypeTwitterNote,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTwitterNoteID sets the ID field of the mutation.
func withTwitterNoteID(id string) twitternoteOption {
	return func(m *TwitterNoteMutation) {
		var (
			err   error
			once  sync.Once
			value *TwitterNote
		)
		m.oldValue = func(ctx context.Context) (*TwitterNote, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TwitterNote.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTwitterNote sets the old TwitterNote of the mutation.
func withTwitterNote(node *TwitterNote) twitternoteOption {
	return func(m *TwitterNoteMutation) {
		m.oldValue = func(context.Context) (*TwitterNote, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TwitterNoteMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TwitterNoteMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("core: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of TwitterNote entities.
func (m *TwitterNoteMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TwitterNoteMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TwitterNoteMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().TwitterNote.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUserID sets the "user_id" field.
func (m *TwitterNoteMutation) SetUserID(s string) {
	m.user_id = &s
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *TwitterNoteMutation) UserID() (r string, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the TwitterNote entity.
// If the TwitterNote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TwitterNoteMutation) OldUserID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *TwitterNoteMutation) ResetUserID() {
	m.user_id = nil
}

// SetUserName sets the "user_name" field.
func (m *TwitterNoteMutation) SetUserName(s string) {
	m.user_name = &s
}

// UserName returns the value of the "user_name" field in the mutation.
func (m *TwitterNoteMutation) UserName() (r string, exists bool) {
	v := m.user_name
	if v == nil {
		return
	}
	return *v, true
}

// OldUserName returns the old "user_name" field's value of the TwitterNote entity.
// If the TwitterNote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TwitterNoteMutation) OldUserName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserName: %w", err)
	}
	return oldValue.UserName, nil
}

// ResetUserName resets all changes to the "user_name" field.
func (m *TwitterNoteMutation) ResetUserName() {
	m.user_name = nil
}

// SetConversationID sets the "conversation_id" field.
func (m *TwitterNoteMutation) SetConversationID(s string) {
	m.conversation_id = &s
}

// ConversationID returns the value of the "conversation_id" field in the mutation.
func (m *TwitterNoteMutation) ConversationID() (r string, exists bool) {
	v := m.conversation_id
	if v == nil {
		return
	}
	return *v, true
}

// OldConversationID returns the old "conversation_id" field's value of the TwitterNote entity.
// If the TwitterNote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TwitterNoteMutation) OldConversationID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldConversationID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldConversationID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldConversationID: %w", err)
	}
	return oldValue.ConversationID, nil
}

// ResetConversationID resets all changes to the "conversation_id" field.
func (m *TwitterNoteMutation) ResetConversationID() {
	m.conversation_id = nil
}

// SetText sets the "text" field.
func (m *TwitterNoteMutation) SetText(s string) {
	m.text = &s
}

// Text returns the value of the "text" field in the mutation.
func (m *TwitterNoteMutation) Text() (r string, exists bool) {
	v := m.text
	if v == nil {
		return
	}
	return *v, true
}

// OldText returns the old "text" field's value of the TwitterNote entity.
// If the TwitterNote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TwitterNoteMutation) OldText(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldText is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldText requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldText: %w", err)
	}
	return oldValue.Text, nil
}

// ResetText resets all changes to the "text" field.
func (m *TwitterNoteMutation) ResetText() {
	m.text = nil
}

// SetLikes sets the "likes" field.
func (m *TwitterNoteMutation) SetLikes(i int) {
	m.likes = &i
	m.addlikes = nil
}

// Likes returns the value of the "likes" field in the mutation.
func (m *TwitterNoteMutation) Likes() (r int, exists bool) {
	v := m.likes
	if v == nil {
		return
	}
	return *v, true
}

// OldLikes returns the old "likes" field's value of the TwitterNote entity.
// If the TwitterNote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TwitterNoteMutation) OldLikes(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLikes is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLikes requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLikes: %w", err)
	}
	return oldValue.Likes, nil
}

// AddLikes adds i to the "likes" field.
func (m *TwitterNoteMutation) AddLikes(i int) {
	if m.addlikes != nil {
		*m.addlikes += i
	} else {
		m.addlikes = &i
	}
}

// AddedLikes returns the value that was added to the "likes" field in this mutation.
func (m *TwitterNoteMutation) AddedLikes() (r int, exists bool) {
	v := m.addlikes
	if v == nil {
		return
	}
	return *v, true
}

// ResetLikes resets all changes to the "likes" field.
func (m *TwitterNoteMutation) ResetLikes() {
	m.likes = nil
	m.addlikes = nil
}

// SetReplies sets the "replies" field.
func (m *TwitterNoteMutation) SetReplies(i int) {
	m.replies = &i
	m.addreplies = nil
}

// Replies returns the value of the "replies" field in the mutation.
func (m *TwitterNoteMutation) Replies() (r int, exists bool) {
	v := m.replies
	if v == nil {
		return
	}
	return *v, true
}

// OldReplies returns the old "replies" field's value of the TwitterNote entity.
// If the TwitterNote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TwitterNoteMutation) OldReplies(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReplies is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReplies requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReplies: %w", err)
	}
	return oldValue.Replies, nil
}

// AddReplies adds i to the "replies" field.
func (m *TwitterNoteMutation) AddReplies(i int) {
	if m.addreplies != nil {
		*m.addreplies += i
	} else {
		m.addreplies = &i
	}
}

// AddedReplies returns the value that was added to the "replies" field in this mutation.
func (m *TwitterNoteMutation) AddedReplies() (r int, exists bool) {
	v := m.addreplies
	if v == nil {
		return
	}
	return *v, true
}

// ResetReplies resets all changes to the "replies" field.
func (m *TwitterNoteMutation) ResetReplies() {
	m.replies = nil
	m.addreplies = nil
}

// SetRetweets sets the "retweets" field.
func (m *TwitterNoteMutation) SetRetweets(i int) {
	m.retweets = &i
	m.addretweets = nil
}

// Retweets returns the value of the "retweets" field in the mutation.
func (m *TwitterNoteMutation) Retweets() (r int, exists bool) {
	v := m.retweets
	if v == nil {
		return
	}
	return *v, true
}

// OldRetweets returns the old "retweets" field's value of the TwitterNote entity.
// If the TwitterNote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TwitterNoteMutation) OldRetweets(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRetweets is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRetweets requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRetweets: %w", err)
	}
	return oldValue.Retweets, nil
}

// AddRetweets adds i to the "retweets" field.
func (m *TwitterNoteMutation) AddRetweets(i int) {
	if m.addretweets != nil {
		*m.addretweets += i
	} else {
		m.addretweets = &i
	}
}

// AddedRetweets returns the value that was added to the "retweets" field in this mutation.
func (m *TwitterNoteMutation) AddedRetweets() (r int, exists bool) {
	v := m.addretweets
	if v == nil {
		return
	}
	return *v, true
}

// ResetRetweets resets all changes to the "retweets" field.
func (m *TwitterNoteMutation) ResetRetweets() {
	m.retweets = nil
	m.addretweets = nil
}

// SetViews sets the "views" field.
func (m *TwitterNoteMutation) SetViews(i int) {
	m.views = &i
	m.addviews = nil
}

// Views returns the value of the "views" field in the mutation.
func (m *TwitterNoteMutation) Views() (r int, exists bool) {
	v := m.views
	if v == nil {
		return
	}
	return *v, true
}

// OldViews returns the old "views" field's value of the TwitterNote entity.
// If the TwitterNote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TwitterNoteMutation) OldViews(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldViews is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldViews requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldViews: %w", err)
	}
	return oldValue.Views, nil
}

// AddViews adds i to the "views" field.
func (m *TwitterNoteMutation) AddViews(i int) {
	if m.addviews != nil {
		*m.addviews += i
	} else {
		m.addviews = &i
	}
}

// AddedViews returns the value that was added to the "views" field in this mutation.
func (m *TwitterNoteMutation) AddedViews() (r int, exists bool) {
	v := m.addviews
	if v == nil {
		return
	}
	return *v, true
}

// ResetViews resets all changes to the "views" field.
func (m *TwitterNoteMutation) ResetViews() {
	m.views = nil
	m.addviews = nil
}

// SetPhotoIds sets the "photo_ids" field.
func (m *TwitterNoteMutation) SetPhotoIds(s []string) {
	m.photo_ids = &s
	m.appendphoto_ids = nil
}

// PhotoIds returns the value of the "photo_ids" field in the mutation.
func (m *TwitterNoteMutation) PhotoIds() (r []string, exists bool) {
	v := m.photo_ids
	if v == nil {
		return
	}
	return *v, true
}

// OldPhotoIds returns the old "photo_ids" field's value of the TwitterNote entity.
// If the TwitterNote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TwitterNoteMutation) OldPhotoIds(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhotoIds is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhotoIds requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhotoIds: %w", err)
	}
	return oldValue.PhotoIds, nil
}

// AppendPhotoIds adds s to the "photo_ids" field.
func (m *TwitterNoteMutation) AppendPhotoIds(s []string) {
	m.appendphoto_ids = append(m.appendphoto_ids, s...)
}

// AppendedPhotoIds returns the list of values that were appended to the "photo_ids" field in this mutation.
func (m *TwitterNoteMutation) AppendedPhotoIds() ([]string, bool) {
	if len(m.appendphoto_ids) == 0 {
		return nil, false
	}
	return m.appendphoto_ids, true
}

// ClearPhotoIds clears the value of the "photo_ids" field.
func (m *TwitterNoteMutation) ClearPhotoIds() {
	m.photo_ids = nil
	m.appendphoto_ids = nil
	m.clearedFields[twitternote.FieldPhotoIds] = struct{}{}
}

// PhotoIdsCleared returns if the "photo_ids" field was cleared in this mutation.
func (m *TwitterNoteMutation) PhotoIdsCleared() bool {
	_, ok := m.clearedFields[twitternote.FieldPhotoIds]
	return ok
}

// ResetPhotoIds resets all changes to the "photo_ids" field.
func (m *TwitterNoteMutation) ResetPhotoIds() {
	m.photo_ids = nil
	m.appendphoto_ids = nil
	delete(m.clearedFields, twitternote.FieldPhotoIds)
}

// SetPhotoUrls sets the "photo_urls" field.
func (m *TwitterNoteMutation) SetPhotoUrls(s []string) {
	m.photo_urls = &s
	m.appendphoto_urls = nil
}

// PhotoUrls returns the value of the "photo_urls" field in the mutation.
func (m *TwitterNoteMutation) PhotoUrls() (r []string, exists bool) {
	v := m.photo_urls
	if v == nil {
		return
	}
	return *v, true
}

// OldPhotoUrls returns the old "photo_urls" field's value of the TwitterNote entity.
// If the TwitterNote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TwitterNoteMutation) OldPhotoUrls(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhotoUrls is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhotoUrls requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhotoUrls: %w", err)
	}
	return oldValue.PhotoUrls, nil
}

// AppendPhotoUrls adds s to the "photo_urls" field.
func (m *TwitterNoteMutation) AppendPhotoUrls(s []string) {
	m.appendphoto_urls = append(m.appendphoto_urls, s...)
}

// AppendedPhotoUrls returns the list of values that were appended to the "photo_urls" field in this mutation.
func (m *TwitterNoteMutation) AppendedPhotoUrls() ([]string, bool) {
	if len(m.appendphoto_urls) == 0 {
		return nil, false
	}
	return m.appendphoto_urls, true
}

// ClearPhotoUrls clears the value of the "photo_urls" field.
func (m *TwitterNoteMutation) ClearPhotoUrls() {
	m.photo_urls = nil
	m.appendphoto_urls = nil
	m.clearedFields[twitternote.FieldPhotoUrls] = struct{}{}
}

// PhotoUrlsCleared returns if the "photo_urls" field was cleared in this mutation.
func (m *TwitterNoteMutation) PhotoUrlsCleared() bool {
	_, ok := m.clearedFields[twitternote.FieldPhotoUrls]
	return ok
}

// ResetPhotoUrls resets all changes to the "photo_urls" field.
func (m *TwitterNoteMutation) ResetPhotoUrls() {
	m.photo_urls = nil
	m.appendphoto_urls = nil
	delete(m.clearedFields, twitternote.FieldPhotoUrls)
}

// SetVideoID sets the "video_id" field.
func (m *TwitterNoteMutation) SetVideoID(s []string) {
	m.video_id = &s
	m.appendvideo_id = nil
}

// VideoID returns the value of the "video_id" field in the mutation.
func (m *TwitterNoteMutation) VideoID() (r []string, exists bool) {
	v := m.video_id
	if v == nil {
		return
	}
	return *v, true
}

// OldVideoID returns the old "video_id" field's value of the TwitterNote entity.
// If the TwitterNote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TwitterNoteMutation) OldVideoID(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVideoID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVideoID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVideoID: %w", err)
	}
	return oldValue.VideoID, nil
}

// AppendVideoID adds s to the "video_id" field.
func (m *TwitterNoteMutation) AppendVideoID(s []string) {
	m.appendvideo_id = append(m.appendvideo_id, s...)
}

// AppendedVideoID returns the list of values that were appended to the "video_id" field in this mutation.
func (m *TwitterNoteMutation) AppendedVideoID() ([]string, bool) {
	if len(m.appendvideo_id) == 0 {
		return nil, false
	}
	return m.appendvideo_id, true
}

// ClearVideoID clears the value of the "video_id" field.
func (m *TwitterNoteMutation) ClearVideoID() {
	m.video_id = nil
	m.appendvideo_id = nil
	m.clearedFields[twitternote.FieldVideoID] = struct{}{}
}

// VideoIDCleared returns if the "video_id" field was cleared in this mutation.
func (m *TwitterNoteMutation) VideoIDCleared() bool {
	_, ok := m.clearedFields[twitternote.FieldVideoID]
	return ok
}

// ResetVideoID resets all changes to the "video_id" field.
func (m *TwitterNoteMutation) ResetVideoID() {
	m.video_id = nil
	m.appendvideo_id = nil
	delete(m.clearedFields, twitternote.FieldVideoID)
}

// SetVideoPreview sets the "video_preview" field.
func (m *TwitterNoteMutation) SetVideoPreview(s []string) {
	m.video_preview = &s
	m.appendvideo_preview = nil
}

// VideoPreview returns the value of the "video_preview" field in the mutation.
func (m *TwitterNoteMutation) VideoPreview() (r []string, exists bool) {
	v := m.video_preview
	if v == nil {
		return
	}
	return *v, true
}

// OldVideoPreview returns the old "video_preview" field's value of the TwitterNote entity.
// If the TwitterNote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TwitterNoteMutation) OldVideoPreview(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVideoPreview is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVideoPreview requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVideoPreview: %w", err)
	}
	return oldValue.VideoPreview, nil
}

// AppendVideoPreview adds s to the "video_preview" field.
func (m *TwitterNoteMutation) AppendVideoPreview(s []string) {
	m.appendvideo_preview = append(m.appendvideo_preview, s...)
}

// AppendedVideoPreview returns the list of values that were appended to the "video_preview" field in this mutation.
func (m *TwitterNoteMutation) AppendedVideoPreview() ([]string, bool) {
	if len(m.appendvideo_preview) == 0 {
		return nil, false
	}
	return m.appendvideo_preview, true
}

// ClearVideoPreview clears the value of the "video_preview" field.
func (m *TwitterNoteMutation) ClearVideoPreview() {
	m.video_preview = nil
	m.appendvideo_preview = nil
	m.clearedFields[twitternote.FieldVideoPreview] = struct{}{}
}

// VideoPreviewCleared returns if the "video_preview" field was cleared in this mutation.
func (m *TwitterNoteMutation) VideoPreviewCleared() bool {
	_, ok := m.clearedFields[twitternote.FieldVideoPreview]
	return ok
}

// ResetVideoPreview resets all changes to the "video_preview" field.
func (m *TwitterNoteMutation) ResetVideoPreview() {
	m.video_preview = nil
	m.appendvideo_preview = nil
	delete(m.clearedFields, twitternote.FieldVideoPreview)
}

// SetVideoUrls sets the "video_urls" field.
func (m *TwitterNoteMutation) SetVideoUrls(s []string) {
	m.video_urls = &s
	m.appendvideo_urls = nil
}

// VideoUrls returns the value of the "video_urls" field in the mutation.
func (m *TwitterNoteMutation) VideoUrls() (r []string, exists bool) {
	v := m.video_urls
	if v == nil {
		return
	}
	return *v, true
}

// OldVideoUrls returns the old "video_urls" field's value of the TwitterNote entity.
// If the TwitterNote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TwitterNoteMutation) OldVideoUrls(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVideoUrls is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVideoUrls requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVideoUrls: %w", err)
	}
	return oldValue.VideoUrls, nil
}

// AppendVideoUrls adds s to the "video_urls" field.
func (m *TwitterNoteMutation) AppendVideoUrls(s []string) {
	m.appendvideo_urls = append(m.appendvideo_urls, s...)
}

// AppendedVideoUrls returns the list of values that were appended to the "video_urls" field in this mutation.
func (m *TwitterNoteMutation) AppendedVideoUrls() ([]string, bool) {
	if len(m.appendvideo_urls) == 0 {
		return nil, false
	}
	return m.appendvideo_urls, true
}

// ClearVideoUrls clears the value of the "video_urls" field.
func (m *TwitterNoteMutation) ClearVideoUrls() {
	m.video_urls = nil
	m.appendvideo_urls = nil
	m.clearedFields[twitternote.FieldVideoUrls] = struct{}{}
}

// VideoUrlsCleared returns if the "video_urls" field was cleared in this mutation.
func (m *TwitterNoteMutation) VideoUrlsCleared() bool {
	_, ok := m.clearedFields[twitternote.FieldVideoUrls]
	return ok
}

// ResetVideoUrls resets all changes to the "video_urls" field.
func (m *TwitterNoteMutation) ResetVideoUrls() {
	m.video_urls = nil
	m.appendvideo_urls = nil
	delete(m.clearedFields, twitternote.FieldVideoUrls)
}

// SetMentionID sets the "mention_id" field.
func (m *TwitterNoteMutation) SetMentionID(s []string) {
	m.mention_id = &s
	m.appendmention_id = nil
}

// MentionID returns the value of the "mention_id" field in the mutation.
func (m *TwitterNoteMutation) MentionID() (r []string, exists bool) {
	v := m.mention_id
	if v == nil {
		return
	}
	return *v, true
}

// OldMentionID returns the old "mention_id" field's value of the TwitterNote entity.
// If the TwitterNote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TwitterNoteMutation) OldMentionID(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMentionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMentionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMentionID: %w", err)
	}
	return oldValue.MentionID, nil
}

// AppendMentionID adds s to the "mention_id" field.
func (m *TwitterNoteMutation) AppendMentionID(s []string) {
	m.appendmention_id = append(m.appendmention_id, s...)
}

// AppendedMentionID returns the list of values that were appended to the "mention_id" field in this mutation.
func (m *TwitterNoteMutation) AppendedMentionID() ([]string, bool) {
	if len(m.appendmention_id) == 0 {
		return nil, false
	}
	return m.appendmention_id, true
}

// ClearMentionID clears the value of the "mention_id" field.
func (m *TwitterNoteMutation) ClearMentionID() {
	m.mention_id = nil
	m.appendmention_id = nil
	m.clearedFields[twitternote.FieldMentionID] = struct{}{}
}

// MentionIDCleared returns if the "mention_id" field was cleared in this mutation.
func (m *TwitterNoteMutation) MentionIDCleared() bool {
	_, ok := m.clearedFields[twitternote.FieldMentionID]
	return ok
}

// ResetMentionID resets all changes to the "mention_id" field.
func (m *TwitterNoteMutation) ResetMentionID() {
	m.mention_id = nil
	m.appendmention_id = nil
	delete(m.clearedFields, twitternote.FieldMentionID)
}

// SetMentionUsername sets the "mention_username" field.
func (m *TwitterNoteMutation) SetMentionUsername(s []string) {
	m.mention_username = &s
	m.appendmention_username = nil
}

// MentionUsername returns the value of the "mention_username" field in the mutation.
func (m *TwitterNoteMutation) MentionUsername() (r []string, exists bool) {
	v := m.mention_username
	if v == nil {
		return
	}
	return *v, true
}

// OldMentionUsername returns the old "mention_username" field's value of the TwitterNote entity.
// If the TwitterNote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TwitterNoteMutation) OldMentionUsername(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMentionUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMentionUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMentionUsername: %w", err)
	}
	return oldValue.MentionUsername, nil
}

// AppendMentionUsername adds s to the "mention_username" field.
func (m *TwitterNoteMutation) AppendMentionUsername(s []string) {
	m.appendmention_username = append(m.appendmention_username, s...)
}

// AppendedMentionUsername returns the list of values that were appended to the "mention_username" field in this mutation.
func (m *TwitterNoteMutation) AppendedMentionUsername() ([]string, bool) {
	if len(m.appendmention_username) == 0 {
		return nil, false
	}
	return m.appendmention_username, true
}

// ClearMentionUsername clears the value of the "mention_username" field.
func (m *TwitterNoteMutation) ClearMentionUsername() {
	m.mention_username = nil
	m.appendmention_username = nil
	m.clearedFields[twitternote.FieldMentionUsername] = struct{}{}
}

// MentionUsernameCleared returns if the "mention_username" field was cleared in this mutation.
func (m *TwitterNoteMutation) MentionUsernameCleared() bool {
	_, ok := m.clearedFields[twitternote.FieldMentionUsername]
	return ok
}

// ResetMentionUsername resets all changes to the "mention_username" field.
func (m *TwitterNoteMutation) ResetMentionUsername() {
	m.mention_username = nil
	m.appendmention_username = nil
	delete(m.clearedFields, twitternote.FieldMentionUsername)
}

// SetMentionName sets the "mention_name" field.
func (m *TwitterNoteMutation) SetMentionName(s []string) {
	m.mention_name = &s
	m.appendmention_name = nil
}

// MentionName returns the value of the "mention_name" field in the mutation.
func (m *TwitterNoteMutation) MentionName() (r []string, exists bool) {
	v := m.mention_name
	if v == nil {
		return
	}
	return *v, true
}

// OldMentionName returns the old "mention_name" field's value of the TwitterNote entity.
// If the TwitterNote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TwitterNoteMutation) OldMentionName(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMentionName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMentionName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMentionName: %w", err)
	}
	return oldValue.MentionName, nil
}

// AppendMentionName adds s to the "mention_name" field.
func (m *TwitterNoteMutation) AppendMentionName(s []string) {
	m.appendmention_name = append(m.appendmention_name, s...)
}

// AppendedMentionName returns the list of values that were appended to the "mention_name" field in this mutation.
func (m *TwitterNoteMutation) AppendedMentionName() ([]string, bool) {
	if len(m.appendmention_name) == 0 {
		return nil, false
	}
	return m.appendmention_name, true
}

// ClearMentionName clears the value of the "mention_name" field.
func (m *TwitterNoteMutation) ClearMentionName() {
	m.mention_name = nil
	m.appendmention_name = nil
	m.clearedFields[twitternote.FieldMentionName] = struct{}{}
}

// MentionNameCleared returns if the "mention_name" field was cleared in this mutation.
func (m *TwitterNoteMutation) MentionNameCleared() bool {
	_, ok := m.clearedFields[twitternote.FieldMentionName]
	return ok
}

// ResetMentionName resets all changes to the "mention_name" field.
func (m *TwitterNoteMutation) ResetMentionName() {
	m.mention_name = nil
	m.appendmention_name = nil
	delete(m.clearedFields, twitternote.FieldMentionName)
}

// SetRetweetedStatusID sets the "retweeted_status_id" field.
func (m *TwitterNoteMutation) SetRetweetedStatusID(s string) {
	m.retweeted_status_id = &s
}

// RetweetedStatusID returns the value of the "retweeted_status_id" field in the mutation.
func (m *TwitterNoteMutation) RetweetedStatusID() (r string, exists bool) {
	v := m.retweeted_status_id
	if v == nil {
		return
	}
	return *v, true
}

// OldRetweetedStatusID returns the old "retweeted_status_id" field's value of the TwitterNote entity.
// If the TwitterNote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TwitterNoteMutation) OldRetweetedStatusID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRetweetedStatusID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRetweetedStatusID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRetweetedStatusID: %w", err)
	}
	return oldValue.RetweetedStatusID, nil
}

// ClearRetweetedStatusID clears the value of the "retweeted_status_id" field.
func (m *TwitterNoteMutation) ClearRetweetedStatusID() {
	m.retweeted_status_id = nil
	m.clearedFields[twitternote.FieldRetweetedStatusID] = struct{}{}
}

// RetweetedStatusIDCleared returns if the "retweeted_status_id" field was cleared in this mutation.
func (m *TwitterNoteMutation) RetweetedStatusIDCleared() bool {
	_, ok := m.clearedFields[twitternote.FieldRetweetedStatusID]
	return ok
}

// ResetRetweetedStatusID resets all changes to the "retweeted_status_id" field.
func (m *TwitterNoteMutation) ResetRetweetedStatusID() {
	m.retweeted_status_id = nil
	delete(m.clearedFields, twitternote.FieldRetweetedStatusID)
}

// SetIsRetweet sets the "is_retweet" field.
func (m *TwitterNoteMutation) SetIsRetweet(b bool) {
	m.is_retweet = &b
}

// IsRetweet returns the value of the "is_retweet" field in the mutation.
func (m *TwitterNoteMutation) IsRetweet() (r bool, exists bool) {
	v := m.is_retweet
	if v == nil {
		return
	}
	return *v, true
}

// OldIsRetweet returns the old "is_retweet" field's value of the TwitterNote entity.
// If the TwitterNote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TwitterNoteMutation) OldIsRetweet(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsRetweet is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsRetweet requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsRetweet: %w", err)
	}
	return oldValue.IsRetweet, nil
}

// ClearIsRetweet clears the value of the "is_retweet" field.
func (m *TwitterNoteMutation) ClearIsRetweet() {
	m.is_retweet = nil
	m.clearedFields[twitternote.FieldIsRetweet] = struct{}{}
}

// IsRetweetCleared returns if the "is_retweet" field was cleared in this mutation.
func (m *TwitterNoteMutation) IsRetweetCleared() bool {
	_, ok := m.clearedFields[twitternote.FieldIsRetweet]
	return ok
}

// ResetIsRetweet resets all changes to the "is_retweet" field.
func (m *TwitterNoteMutation) ResetIsRetweet() {
	m.is_retweet = nil
	delete(m.clearedFields, twitternote.FieldIsRetweet)
}

// SetPostAt sets the "post_at" field.
func (m *TwitterNoteMutation) SetPostAt(t time.Time) {
	m.post_at = &t
}

// PostAt returns the value of the "post_at" field in the mutation.
func (m *TwitterNoteMutation) PostAt() (r time.Time, exists bool) {
	v := m.post_at
	if v == nil {
		return
	}
	return *v, true
}

// OldPostAt returns the old "post_at" field's value of the TwitterNote entity.
// If the TwitterNote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TwitterNoteMutation) OldPostAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPostAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPostAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPostAt: %w", err)
	}
	return oldValue.PostAt, nil
}

// ClearPostAt clears the value of the "post_at" field.
func (m *TwitterNoteMutation) ClearPostAt() {
	m.post_at = nil
	m.clearedFields[twitternote.FieldPostAt] = struct{}{}
}

// PostAtCleared returns if the "post_at" field was cleared in this mutation.
func (m *TwitterNoteMutation) PostAtCleared() bool {
	_, ok := m.clearedFields[twitternote.FieldPostAt]
	return ok
}

// ResetPostAt resets all changes to the "post_at" field.
func (m *TwitterNoteMutation) ResetPostAt() {
	m.post_at = nil
	delete(m.clearedFields, twitternote.FieldPostAt)
}

// SetUrls sets the "urls" field.
func (m *TwitterNoteMutation) SetUrls(s []string) {
	m.urls = &s
	m.appendurls = nil
}

// Urls returns the value of the "urls" field in the mutation.
func (m *TwitterNoteMutation) Urls() (r []string, exists bool) {
	v := m.urls
	if v == nil {
		return
	}
	return *v, true
}

// OldUrls returns the old "urls" field's value of the TwitterNote entity.
// If the TwitterNote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TwitterNoteMutation) OldUrls(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUrls is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUrls requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUrls: %w", err)
	}
	return oldValue.Urls, nil
}

// AppendUrls adds s to the "urls" field.
func (m *TwitterNoteMutation) AppendUrls(s []string) {
	m.appendurls = append(m.appendurls, s...)
}

// AppendedUrls returns the list of values that were appended to the "urls" field in this mutation.
func (m *TwitterNoteMutation) AppendedUrls() ([]string, bool) {
	if len(m.appendurls) == 0 {
		return nil, false
	}
	return m.appendurls, true
}

// ClearUrls clears the value of the "urls" field.
func (m *TwitterNoteMutation) ClearUrls() {
	m.urls = nil
	m.appendurls = nil
	m.clearedFields[twitternote.FieldUrls] = struct{}{}
}

// UrlsCleared returns if the "urls" field was cleared in this mutation.
func (m *TwitterNoteMutation) UrlsCleared() bool {
	_, ok := m.clearedFields[twitternote.FieldUrls]
	return ok
}

// ResetUrls resets all changes to the "urls" field.
func (m *TwitterNoteMutation) ResetUrls() {
	m.urls = nil
	m.appendurls = nil
	delete(m.clearedFields, twitternote.FieldUrls)
}

// SetHTMLText sets the "html_text" field.
func (m *TwitterNoteMutation) SetHTMLText(s string) {
	m.html_text = &s
}

// HTMLText returns the value of the "html_text" field in the mutation.
func (m *TwitterNoteMutation) HTMLText() (r string, exists bool) {
	v := m.html_text
	if v == nil {
		return
	}
	return *v, true
}

// OldHTMLText returns the old "html_text" field's value of the TwitterNote entity.
// If the TwitterNote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TwitterNoteMutation) OldHTMLText(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHTMLText is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHTMLText requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHTMLText: %w", err)
	}
	return oldValue.HTMLText, nil
}

// ClearHTMLText clears the value of the "html_text" field.
func (m *TwitterNoteMutation) ClearHTMLText() {
	m.html_text = nil
	m.clearedFields[twitternote.FieldHTMLText] = struct{}{}
}

// HTMLTextCleared returns if the "html_text" field was cleared in this mutation.
func (m *TwitterNoteMutation) HTMLTextCleared() bool {
	_, ok := m.clearedFields[twitternote.FieldHTMLText]
	return ok
}

// ResetHTMLText resets all changes to the "html_text" field.
func (m *TwitterNoteMutation) ResetHTMLText() {
	m.html_text = nil
	delete(m.clearedFields, twitternote.FieldHTMLText)
}

// SetPermanentURL sets the "permanent_url" field.
func (m *TwitterNoteMutation) SetPermanentURL(s string) {
	m.permanent_url = &s
}

// PermanentURL returns the value of the "permanent_url" field in the mutation.
func (m *TwitterNoteMutation) PermanentURL() (r string, exists bool) {
	v := m.permanent_url
	if v == nil {
		return
	}
	return *v, true
}

// OldPermanentURL returns the old "permanent_url" field's value of the TwitterNote entity.
// If the TwitterNote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TwitterNoteMutation) OldPermanentURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPermanentURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPermanentURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPermanentURL: %w", err)
	}
	return oldValue.PermanentURL, nil
}

// ClearPermanentURL clears the value of the "permanent_url" field.
func (m *TwitterNoteMutation) ClearPermanentURL() {
	m.permanent_url = nil
	m.clearedFields[twitternote.FieldPermanentURL] = struct{}{}
}

// PermanentURLCleared returns if the "permanent_url" field was cleared in this mutation.
func (m *TwitterNoteMutation) PermanentURLCleared() bool {
	_, ok := m.clearedFields[twitternote.FieldPermanentURL]
	return ok
}

// ResetPermanentURL resets all changes to the "permanent_url" field.
func (m *TwitterNoteMutation) ResetPermanentURL() {
	m.permanent_url = nil
	delete(m.clearedFields, twitternote.FieldPermanentURL)
}

// SetIsReply sets the "is_reply" field.
func (m *TwitterNoteMutation) SetIsReply(b bool) {
	m.is_reply = &b
}

// IsReply returns the value of the "is_reply" field in the mutation.
func (m *TwitterNoteMutation) IsReply() (r bool, exists bool) {
	v := m.is_reply
	if v == nil {
		return
	}
	return *v, true
}

// OldIsReply returns the old "is_reply" field's value of the TwitterNote entity.
// If the TwitterNote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TwitterNoteMutation) OldIsReply(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsReply is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsReply requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsReply: %w", err)
	}
	return oldValue.IsReply, nil
}

// ClearIsReply clears the value of the "is_reply" field.
func (m *TwitterNoteMutation) ClearIsReply() {
	m.is_reply = nil
	m.clearedFields[twitternote.FieldIsReply] = struct{}{}
}

// IsReplyCleared returns if the "is_reply" field was cleared in this mutation.
func (m *TwitterNoteMutation) IsReplyCleared() bool {
	_, ok := m.clearedFields[twitternote.FieldIsReply]
	return ok
}

// ResetIsReply resets all changes to the "is_reply" field.
func (m *TwitterNoteMutation) ResetIsReply() {
	m.is_reply = nil
	delete(m.clearedFields, twitternote.FieldIsReply)
}

// SetIsPin sets the "is_pin" field.
func (m *TwitterNoteMutation) SetIsPin(b bool) {
	m.is_pin = &b
}

// IsPin returns the value of the "is_pin" field in the mutation.
func (m *TwitterNoteMutation) IsPin() (r bool, exists bool) {
	v := m.is_pin
	if v == nil {
		return
	}
	return *v, true
}

// OldIsPin returns the old "is_pin" field's value of the TwitterNote entity.
// If the TwitterNote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TwitterNoteMutation) OldIsPin(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsPin is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsPin requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsPin: %w", err)
	}
	return oldValue.IsPin, nil
}

// ClearIsPin clears the value of the "is_pin" field.
func (m *TwitterNoteMutation) ClearIsPin() {
	m.is_pin = nil
	m.clearedFields[twitternote.FieldIsPin] = struct{}{}
}

// IsPinCleared returns if the "is_pin" field was cleared in this mutation.
func (m *TwitterNoteMutation) IsPinCleared() bool {
	_, ok := m.clearedFields[twitternote.FieldIsPin]
	return ok
}

// ResetIsPin resets all changes to the "is_pin" field.
func (m *TwitterNoteMutation) ResetIsPin() {
	m.is_pin = nil
	delete(m.clearedFields, twitternote.FieldIsPin)
}

// SetSensitiveContent sets the "sensitive_content" field.
func (m *TwitterNoteMutation) SetSensitiveContent(b bool) {
	m.sensitive_content = &b
}

// SensitiveContent returns the value of the "sensitive_content" field in the mutation.
func (m *TwitterNoteMutation) SensitiveContent() (r bool, exists bool) {
	v := m.sensitive_content
	if v == nil {
		return
	}
	return *v, true
}

// OldSensitiveContent returns the old "sensitive_content" field's value of the TwitterNote entity.
// If the TwitterNote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TwitterNoteMutation) OldSensitiveContent(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSensitiveContent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSensitiveContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSensitiveContent: %w", err)
	}
	return oldValue.SensitiveContent, nil
}

// ClearSensitiveContent clears the value of the "sensitive_content" field.
func (m *TwitterNoteMutation) ClearSensitiveContent() {
	m.sensitive_content = nil
	m.clearedFields[twitternote.FieldSensitiveContent] = struct{}{}
}

// SensitiveContentCleared returns if the "sensitive_content" field was cleared in this mutation.
func (m *TwitterNoteMutation) SensitiveContentCleared() bool {
	_, ok := m.clearedFields[twitternote.FieldSensitiveContent]
	return ok
}

// ResetSensitiveContent resets all changes to the "sensitive_content" field.
func (m *TwitterNoteMutation) ResetSensitiveContent() {
	m.sensitive_content = nil
	delete(m.clearedFields, twitternote.FieldSensitiveContent)
}

// SetReplyTo sets the "reply_to" field.
func (m *TwitterNoteMutation) SetReplyTo(s string) {
	m.reply_to = &s
}

// ReplyTo returns the value of the "reply_to" field in the mutation.
func (m *TwitterNoteMutation) ReplyTo() (r string, exists bool) {
	v := m.reply_to
	if v == nil {
		return
	}
	return *v, true
}

// OldReplyTo returns the old "reply_to" field's value of the TwitterNote entity.
// If the TwitterNote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TwitterNoteMutation) OldReplyTo(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReplyTo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReplyTo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReplyTo: %w", err)
	}
	return oldValue.ReplyTo, nil
}

// ClearReplyTo clears the value of the "reply_to" field.
func (m *TwitterNoteMutation) ClearReplyTo() {
	m.reply_to = nil
	m.clearedFields[twitternote.FieldReplyTo] = struct{}{}
}

// ReplyToCleared returns if the "reply_to" field was cleared in this mutation.
func (m *TwitterNoteMutation) ReplyToCleared() bool {
	_, ok := m.clearedFields[twitternote.FieldReplyTo]
	return ok
}

// ResetReplyTo resets all changes to the "reply_to" field.
func (m *TwitterNoteMutation) ResetReplyTo() {
	m.reply_to = nil
	delete(m.clearedFields, twitternote.FieldReplyTo)
}

// SetRawYaml sets the "raw_yaml" field.
func (m *TwitterNoteMutation) SetRawYaml(s string) {
	m.raw_yaml = &s
}

// RawYaml returns the value of the "raw_yaml" field in the mutation.
func (m *TwitterNoteMutation) RawYaml() (r string, exists bool) {
	v := m.raw_yaml
	if v == nil {
		return
	}
	return *v, true
}

// OldRawYaml returns the old "raw_yaml" field's value of the TwitterNote entity.
// If the TwitterNote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TwitterNoteMutation) OldRawYaml(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRawYaml is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRawYaml requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRawYaml: %w", err)
	}
	return oldValue.RawYaml, nil
}

// ResetRawYaml resets all changes to the "raw_yaml" field.
func (m *TwitterNoteMutation) ResetRawYaml() {
	m.raw_yaml = nil
}

// SetHashTags sets the "hash_tags" field.
func (m *TwitterNoteMutation) SetHashTags(s []string) {
	m.hash_tags = &s
	m.appendhash_tags = nil
}

// HashTags returns the value of the "hash_tags" field in the mutation.
func (m *TwitterNoteMutation) HashTags() (r []string, exists bool) {
	v := m.hash_tags
	if v == nil {
		return
	}
	return *v, true
}

// OldHashTags returns the old "hash_tags" field's value of the TwitterNote entity.
// If the TwitterNote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TwitterNoteMutation) OldHashTags(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHashTags is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHashTags requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHashTags: %w", err)
	}
	return oldValue.HashTags, nil
}

// AppendHashTags adds s to the "hash_tags" field.
func (m *TwitterNoteMutation) AppendHashTags(s []string) {
	m.appendhash_tags = append(m.appendhash_tags, s...)
}

// AppendedHashTags returns the list of values that were appended to the "hash_tags" field in this mutation.
func (m *TwitterNoteMutation) AppendedHashTags() ([]string, bool) {
	if len(m.appendhash_tags) == 0 {
		return nil, false
	}
	return m.appendhash_tags, true
}

// ResetHashTags resets all changes to the "hash_tags" field.
func (m *TwitterNoteMutation) ResetHashTags() {
	m.hash_tags = nil
	m.appendhash_tags = nil
}

// SetEvent sets the "event" field.
func (m *TwitterNoteMutation) SetEvent(s string) {
	m.event = &s
}

// Event returns the value of the "event" field in the mutation.
func (m *TwitterNoteMutation) Event() (r string, exists bool) {
	v := m.event
	if v == nil {
		return
	}
	return *v, true
}

// OldEvent returns the old "event" field's value of the TwitterNote entity.
// If the TwitterNote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TwitterNoteMutation) OldEvent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEvent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEvent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEvent: %w", err)
	}
	return oldValue.Event, nil
}

// ClearEvent clears the value of the "event" field.
func (m *TwitterNoteMutation) ClearEvent() {
	m.event = nil
	m.clearedFields[twitternote.FieldEvent] = struct{}{}
}

// EventCleared returns if the "event" field was cleared in this mutation.
func (m *TwitterNoteMutation) EventCleared() bool {
	_, ok := m.clearedFields[twitternote.FieldEvent]
	return ok
}

// ResetEvent resets all changes to the "event" field.
func (m *TwitterNoteMutation) ResetEvent() {
	m.event = nil
	delete(m.clearedFields, twitternote.FieldEvent)
}

// SetEventID sets the "event_id" field.
func (m *TwitterNoteMutation) SetEventID(s string) {
	m.event_id = &s
}

// EventID returns the value of the "event_id" field in the mutation.
func (m *TwitterNoteMutation) EventID() (r string, exists bool) {
	v := m.event_id
	if v == nil {
		return
	}
	return *v, true
}

// OldEventID returns the old "event_id" field's value of the TwitterNote entity.
// If the TwitterNote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TwitterNoteMutation) OldEventID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEventID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEventID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEventID: %w", err)
	}
	return oldValue.EventID, nil
}

// ClearEventID clears the value of the "event_id" field.
func (m *TwitterNoteMutation) ClearEventID() {
	m.event_id = nil
	m.clearedFields[twitternote.FieldEventID] = struct{}{}
}

// EventIDCleared returns if the "event_id" field was cleared in this mutation.
func (m *TwitterNoteMutation) EventIDCleared() bool {
	_, ok := m.clearedFields[twitternote.FieldEventID]
	return ok
}

// ResetEventID resets all changes to the "event_id" field.
func (m *TwitterNoteMutation) ResetEventID() {
	m.event_id = nil
	delete(m.clearedFields, twitternote.FieldEventID)
}

// SetPublishStatus sets the "publish_status" field.
func (m *TwitterNoteMutation) SetPublishStatus(s string) {
	m.publish_status = &s
}

// PublishStatus returns the value of the "publish_status" field in the mutation.
func (m *TwitterNoteMutation) PublishStatus() (r string, exists bool) {
	v := m.publish_status
	if v == nil {
		return
	}
	return *v, true
}

// OldPublishStatus returns the old "publish_status" field's value of the TwitterNote entity.
// If the TwitterNote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TwitterNoteMutation) OldPublishStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPublishStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPublishStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPublishStatus: %w", err)
	}
	return oldValue.PublishStatus, nil
}

// ClearPublishStatus clears the value of the "publish_status" field.
func (m *TwitterNoteMutation) ClearPublishStatus() {
	m.publish_status = nil
	m.clearedFields[twitternote.FieldPublishStatus] = struct{}{}
}

// PublishStatusCleared returns if the "publish_status" field was cleared in this mutation.
func (m *TwitterNoteMutation) PublishStatusCleared() bool {
	_, ok := m.clearedFields[twitternote.FieldPublishStatus]
	return ok
}

// ResetPublishStatus resets all changes to the "publish_status" field.
func (m *TwitterNoteMutation) ResetPublishStatus() {
	m.publish_status = nil
	delete(m.clearedFields, twitternote.FieldPublishStatus)
}

// SetPublishedAt sets the "published_at" field.
func (m *TwitterNoteMutation) SetPublishedAt(t time.Time) {
	m.published_at = &t
}

// PublishedAt returns the value of the "published_at" field in the mutation.
func (m *TwitterNoteMutation) PublishedAt() (r time.Time, exists bool) {
	v := m.published_at
	if v == nil {
		return
	}
	return *v, true
}

// OldPublishedAt returns the old "published_at" field's value of the TwitterNote entity.
// If the TwitterNote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TwitterNoteMutation) OldPublishedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPublishedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPublishedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPublishedAt: %w", err)
	}
	return oldValue.PublishedAt, nil
}

// ClearPublishedAt clears the value of the "published_at" field.
func (m *TwitterNoteMutation) ClearPublishedAt() {
	m.published_at = nil
	m.clearedFields[twitternote.FieldPublishedAt] = struct{}{}
}

// PublishedAtCleared returns if the "published_at" field was cleared in this mutation.
func (m *TwitterNoteMutation) PublishedAtCleared() bool {
	_, ok := m.clearedFields[twitternote.FieldPublishedAt]
	return ok
}

// ResetPublishedAt resets all changes to the "published_at" field.
func (m *TwitterNoteMutation) ResetPublishedAt() {
	m.published_at = nil
	delete(m.clearedFields, twitternote.FieldPublishedAt)
}

// SetFetchedAt sets the "fetched_at" field.
func (m *TwitterNoteMutation) SetFetchedAt(t time.Time) {
	m.fetched_at = &t
}

// FetchedAt returns the value of the "fetched_at" field in the mutation.
func (m *TwitterNoteMutation) FetchedAt() (r time.Time, exists bool) {
	v := m.fetched_at
	if v == nil {
		return
	}
	return *v, true
}

// OldFetchedAt returns the old "fetched_at" field's value of the TwitterNote entity.
// If the TwitterNote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TwitterNoteMutation) OldFetchedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFetchedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFetchedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFetchedAt: %w", err)
	}
	return oldValue.FetchedAt, nil
}

// ClearFetchedAt clears the value of the "fetched_at" field.
func (m *TwitterNoteMutation) ClearFetchedAt() {
	m.fetched_at = nil
	m.clearedFields[twitternote.FieldFetchedAt] = struct{}{}
}

// FetchedAtCleared returns if the "fetched_at" field was cleared in this mutation.
func (m *TwitterNoteMutation) FetchedAtCleared() bool {
	_, ok := m.clearedFields[twitternote.FieldFetchedAt]
	return ok
}

// ResetFetchedAt resets all changes to the "fetched_at" field.
func (m *TwitterNoteMutation) ResetFetchedAt() {
	m.fetched_at = nil
	delete(m.clearedFields, twitternote.FieldFetchedAt)
}

// SetLanguage sets the "language" field.
func (m *TwitterNoteMutation) SetLanguage(s string) {
	m.language = &s
}

// Language returns the value of the "language" field in the mutation.
func (m *TwitterNoteMutation) Language() (r string, exists bool) {
	v := m.language
	if v == nil {
		return
	}
	return *v, true
}

// OldLanguage returns the old "language" field's value of the TwitterNote entity.
// If the TwitterNote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TwitterNoteMutation) OldLanguage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLanguage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLanguage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLanguage: %w", err)
	}
	return oldValue.Language, nil
}

// ResetLanguage resets all changes to the "language" field.
func (m *TwitterNoteMutation) ResetLanguage() {
	m.language = nil
}

// Where appends a list predicates to the TwitterNoteMutation builder.
func (m *TwitterNoteMutation) Where(ps ...predicate.TwitterNote) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TwitterNoteMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TwitterNoteMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.TwitterNote, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TwitterNoteMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TwitterNoteMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (TwitterNote).
func (m *TwitterNoteMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TwitterNoteMutation) Fields() []string {
	fields := make([]string, 0, 34)
	if m.user_id != nil {
		fields = append(fields, twitternote.FieldUserID)
	}
	if m.user_name != nil {
		fields = append(fields, twitternote.FieldUserName)
	}
	if m.conversation_id != nil {
		fields = append(fields, twitternote.FieldConversationID)
	}
	if m.text != nil {
		fields = append(fields, twitternote.FieldText)
	}
	if m.likes != nil {
		fields = append(fields, twitternote.FieldLikes)
	}
	if m.replies != nil {
		fields = append(fields, twitternote.FieldReplies)
	}
	if m.retweets != nil {
		fields = append(fields, twitternote.FieldRetweets)
	}
	if m.views != nil {
		fields = append(fields, twitternote.FieldViews)
	}
	if m.photo_ids != nil {
		fields = append(fields, twitternote.FieldPhotoIds)
	}
	if m.photo_urls != nil {
		fields = append(fields, twitternote.FieldPhotoUrls)
	}
	if m.video_id != nil {
		fields = append(fields, twitternote.FieldVideoID)
	}
	if m.video_preview != nil {
		fields = append(fields, twitternote.FieldVideoPreview)
	}
	if m.video_urls != nil {
		fields = append(fields, twitternote.FieldVideoUrls)
	}
	if m.mention_id != nil {
		fields = append(fields, twitternote.FieldMentionID)
	}
	if m.mention_username != nil {
		fields = append(fields, twitternote.FieldMentionUsername)
	}
	if m.mention_name != nil {
		fields = append(fields, twitternote.FieldMentionName)
	}
	if m.retweeted_status_id != nil {
		fields = append(fields, twitternote.FieldRetweetedStatusID)
	}
	if m.is_retweet != nil {
		fields = append(fields, twitternote.FieldIsRetweet)
	}
	if m.post_at != nil {
		fields = append(fields, twitternote.FieldPostAt)
	}
	if m.urls != nil {
		fields = append(fields, twitternote.FieldUrls)
	}
	if m.html_text != nil {
		fields = append(fields, twitternote.FieldHTMLText)
	}
	if m.permanent_url != nil {
		fields = append(fields, twitternote.FieldPermanentURL)
	}
	if m.is_reply != nil {
		fields = append(fields, twitternote.FieldIsReply)
	}
	if m.is_pin != nil {
		fields = append(fields, twitternote.FieldIsPin)
	}
	if m.sensitive_content != nil {
		fields = append(fields, twitternote.FieldSensitiveContent)
	}
	if m.reply_to != nil {
		fields = append(fields, twitternote.FieldReplyTo)
	}
	if m.raw_yaml != nil {
		fields = append(fields, twitternote.FieldRawYaml)
	}
	if m.hash_tags != nil {
		fields = append(fields, twitternote.FieldHashTags)
	}
	if m.event != nil {
		fields = append(fields, twitternote.FieldEvent)
	}
	if m.event_id != nil {
		fields = append(fields, twitternote.FieldEventID)
	}
	if m.publish_status != nil {
		fields = append(fields, twitternote.FieldPublishStatus)
	}
	if m.published_at != nil {
		fields = append(fields, twitternote.FieldPublishedAt)
	}
	if m.fetched_at != nil {
		fields = append(fields, twitternote.FieldFetchedAt)
	}
	if m.language != nil {
		fields = append(fields, twitternote.FieldLanguage)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TwitterNoteMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case twitternote.FieldUserID:
		return m.UserID()
	case twitternote.FieldUserName:
		return m.UserName()
	case twitternote.FieldConversationID:
		return m.ConversationID()
	case twitternote.FieldText:
		return m.Text()
	case twitternote.FieldLikes:
		return m.Likes()
	case twitternote.FieldReplies:
		return m.Replies()
	case twitternote.FieldRetweets:
		return m.Retweets()
	case twitternote.FieldViews:
		return m.Views()
	case twitternote.FieldPhotoIds:
		return m.PhotoIds()
	case twitternote.FieldPhotoUrls:
		return m.PhotoUrls()
	case twitternote.FieldVideoID:
		return m.VideoID()
	case twitternote.FieldVideoPreview:
		return m.VideoPreview()
	case twitternote.FieldVideoUrls:
		return m.VideoUrls()
	case twitternote.FieldMentionID:
		return m.MentionID()
	case twitternote.FieldMentionUsername:
		return m.MentionUsername()
	case twitternote.FieldMentionName:
		return m.MentionName()
	case twitternote.FieldRetweetedStatusID:
		return m.RetweetedStatusID()
	case twitternote.FieldIsRetweet:
		return m.IsRetweet()
	case twitternote.FieldPostAt:
		return m.PostAt()
	case twitternote.FieldUrls:
		return m.Urls()
	case twitternote.FieldHTMLText:
		return m.HTMLText()
	case twitternote.FieldPermanentURL:
		return m.PermanentURL()
	case twitternote.FieldIsReply:
		return m.IsReply()
	case twitternote.FieldIsPin:
		return m.IsPin()
	case twitternote.FieldSensitiveContent:
		return m.SensitiveContent()
	case twitternote.FieldReplyTo:
		return m.ReplyTo()
	case twitternote.FieldRawYaml:
		return m.RawYaml()
	case twitternote.FieldHashTags:
		return m.HashTags()
	case twitternote.FieldEvent:
		return m.Event()
	case twitternote.FieldEventID:
		return m.EventID()
	case twitternote.FieldPublishStatus:
		return m.PublishStatus()
	case twitternote.FieldPublishedAt:
		return m.PublishedAt()
	case twitternote.FieldFetchedAt:
		return m.FetchedAt()
	case twitternote.FieldLanguage:
		return m.Language()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TwitterNoteMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case twitternote.FieldUserID:
		return m.OldUserID(ctx)
	case twitternote.FieldUserName:
		return m.OldUserName(ctx)
	case twitternote.FieldConversationID:
		return m.OldConversationID(ctx)
	case twitternote.FieldText:
		return m.OldText(ctx)
	case twitternote.FieldLikes:
		return m.OldLikes(ctx)
	case twitternote.FieldReplies:
		return m.OldReplies(ctx)
	case twitternote.FieldRetweets:
		return m.OldRetweets(ctx)
	case twitternote.FieldViews:
		return m.OldViews(ctx)
	case twitternote.FieldPhotoIds:
		return m.OldPhotoIds(ctx)
	case twitternote.FieldPhotoUrls:
		return m.OldPhotoUrls(ctx)
	case twitternote.FieldVideoID:
		return m.OldVideoID(ctx)
	case twitternote.FieldVideoPreview:
		return m.OldVideoPreview(ctx)
	case twitternote.FieldVideoUrls:
		return m.OldVideoUrls(ctx)
	case twitternote.FieldMentionID:
		return m.OldMentionID(ctx)
	case twitternote.FieldMentionUsername:
		return m.OldMentionUsername(ctx)
	case twitternote.FieldMentionName:
		return m.OldMentionName(ctx)
	case twitternote.FieldRetweetedStatusID:
		return m.OldRetweetedStatusID(ctx)
	case twitternote.FieldIsRetweet:
		return m.OldIsRetweet(ctx)
	case twitternote.FieldPostAt:
		return m.OldPostAt(ctx)
	case twitternote.FieldUrls:
		return m.OldUrls(ctx)
	case twitternote.FieldHTMLText:
		return m.OldHTMLText(ctx)
	case twitternote.FieldPermanentURL:
		return m.OldPermanentURL(ctx)
	case twitternote.FieldIsReply:
		return m.OldIsReply(ctx)
	case twitternote.FieldIsPin:
		return m.OldIsPin(ctx)
	case twitternote.FieldSensitiveContent:
		return m.OldSensitiveContent(ctx)
	case twitternote.FieldReplyTo:
		return m.OldReplyTo(ctx)
	case twitternote.FieldRawYaml:
		return m.OldRawYaml(ctx)
	case twitternote.FieldHashTags:
		return m.OldHashTags(ctx)
	case twitternote.FieldEvent:
		return m.OldEvent(ctx)
	case twitternote.FieldEventID:
		return m.OldEventID(ctx)
	case twitternote.FieldPublishStatus:
		return m.OldPublishStatus(ctx)
	case twitternote.FieldPublishedAt:
		return m.OldPublishedAt(ctx)
	case twitternote.FieldFetchedAt:
		return m.OldFetchedAt(ctx)
	case twitternote.FieldLanguage:
		return m.OldLanguage(ctx)
	}
	return nil, fmt.Errorf("unknown TwitterNote field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TwitterNoteMutation) SetField(name string, value ent.Value) error {
	switch name {
	case twitternote.FieldUserID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case twitternote.FieldUserName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserName(v)
		return nil
	case twitternote.FieldConversationID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetConversationID(v)
		return nil
	case twitternote.FieldText:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetText(v)
		return nil
	case twitternote.FieldLikes:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLikes(v)
		return nil
	case twitternote.FieldReplies:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReplies(v)
		return nil
	case twitternote.FieldRetweets:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRetweets(v)
		return nil
	case twitternote.FieldViews:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetViews(v)
		return nil
	case twitternote.FieldPhotoIds:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhotoIds(v)
		return nil
	case twitternote.FieldPhotoUrls:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhotoUrls(v)
		return nil
	case twitternote.FieldVideoID:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVideoID(v)
		return nil
	case twitternote.FieldVideoPreview:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVideoPreview(v)
		return nil
	case twitternote.FieldVideoUrls:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVideoUrls(v)
		return nil
	case twitternote.FieldMentionID:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMentionID(v)
		return nil
	case twitternote.FieldMentionUsername:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMentionUsername(v)
		return nil
	case twitternote.FieldMentionName:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMentionName(v)
		return nil
	case twitternote.FieldRetweetedStatusID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRetweetedStatusID(v)
		return nil
	case twitternote.FieldIsRetweet:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsRetweet(v)
		return nil
	case twitternote.FieldPostAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPostAt(v)
		return nil
	case twitternote.FieldUrls:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUrls(v)
		return nil
	case twitternote.FieldHTMLText:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHTMLText(v)
		return nil
	case twitternote.FieldPermanentURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPermanentURL(v)
		return nil
	case twitternote.FieldIsReply:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsReply(v)
		return nil
	case twitternote.FieldIsPin:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsPin(v)
		return nil
	case twitternote.FieldSensitiveContent:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSensitiveContent(v)
		return nil
	case twitternote.FieldReplyTo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReplyTo(v)
		return nil
	case twitternote.FieldRawYaml:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRawYaml(v)
		return nil
	case twitternote.FieldHashTags:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHashTags(v)
		return nil
	case twitternote.FieldEvent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEvent(v)
		return nil
	case twitternote.FieldEventID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEventID(v)
		return nil
	case twitternote.FieldPublishStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPublishStatus(v)
		return nil
	case twitternote.FieldPublishedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPublishedAt(v)
		return nil
	case twitternote.FieldFetchedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFetchedAt(v)
		return nil
	case twitternote.FieldLanguage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLanguage(v)
		return nil
	}
	return fmt.Errorf("unknown TwitterNote field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TwitterNoteMutation) AddedFields() []string {
	var fields []string
	if m.addlikes != nil {
		fields = append(fields, twitternote.FieldLikes)
	}
	if m.addreplies != nil {
		fields = append(fields, twitternote.FieldReplies)
	}
	if m.addretweets != nil {
		fields = append(fields, twitternote.FieldRetweets)
	}
	if m.addviews != nil {
		fields = append(fields, twitternote.FieldViews)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TwitterNoteMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case twitternote.FieldLikes:
		return m.AddedLikes()
	case twitternote.FieldReplies:
		return m.AddedReplies()
	case twitternote.FieldRetweets:
		return m.AddedRetweets()
	case twitternote.FieldViews:
		return m.AddedViews()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TwitterNoteMutation) AddField(name string, value ent.Value) error {
	switch name {
	case twitternote.FieldLikes:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLikes(v)
		return nil
	case twitternote.FieldReplies:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddReplies(v)
		return nil
	case twitternote.FieldRetweets:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRetweets(v)
		return nil
	case twitternote.FieldViews:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddViews(v)
		return nil
	}
	return fmt.Errorf("unknown TwitterNote numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TwitterNoteMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(twitternote.FieldPhotoIds) {
		fields = append(fields, twitternote.FieldPhotoIds)
	}
	if m.FieldCleared(twitternote.FieldPhotoUrls) {
		fields = append(fields, twitternote.FieldPhotoUrls)
	}
	if m.FieldCleared(twitternote.FieldVideoID) {
		fields = append(fields, twitternote.FieldVideoID)
	}
	if m.FieldCleared(twitternote.FieldVideoPreview) {
		fields = append(fields, twitternote.FieldVideoPreview)
	}
	if m.FieldCleared(twitternote.FieldVideoUrls) {
		fields = append(fields, twitternote.FieldVideoUrls)
	}
	if m.FieldCleared(twitternote.FieldMentionID) {
		fields = append(fields, twitternote.FieldMentionID)
	}
	if m.FieldCleared(twitternote.FieldMentionUsername) {
		fields = append(fields, twitternote.FieldMentionUsername)
	}
	if m.FieldCleared(twitternote.FieldMentionName) {
		fields = append(fields, twitternote.FieldMentionName)
	}
	if m.FieldCleared(twitternote.FieldRetweetedStatusID) {
		fields = append(fields, twitternote.FieldRetweetedStatusID)
	}
	if m.FieldCleared(twitternote.FieldIsRetweet) {
		fields = append(fields, twitternote.FieldIsRetweet)
	}
	if m.FieldCleared(twitternote.FieldPostAt) {
		fields = append(fields, twitternote.FieldPostAt)
	}
	if m.FieldCleared(twitternote.FieldUrls) {
		fields = append(fields, twitternote.FieldUrls)
	}
	if m.FieldCleared(twitternote.FieldHTMLText) {
		fields = append(fields, twitternote.FieldHTMLText)
	}
	if m.FieldCleared(twitternote.FieldPermanentURL) {
		fields = append(fields, twitternote.FieldPermanentURL)
	}
	if m.FieldCleared(twitternote.FieldIsReply) {
		fields = append(fields, twitternote.FieldIsReply)
	}
	if m.FieldCleared(twitternote.FieldIsPin) {
		fields = append(fields, twitternote.FieldIsPin)
	}
	if m.FieldCleared(twitternote.FieldSensitiveContent) {
		fields = append(fields, twitternote.FieldSensitiveContent)
	}
	if m.FieldCleared(twitternote.FieldReplyTo) {
		fields = append(fields, twitternote.FieldReplyTo)
	}
	if m.FieldCleared(twitternote.FieldEvent) {
		fields = append(fields, twitternote.FieldEvent)
	}
	if m.FieldCleared(twitternote.FieldEventID) {
		fields = append(fields, twitternote.FieldEventID)
	}
	if m.FieldCleared(twitternote.FieldPublishStatus) {
		fields = append(fields, twitternote.FieldPublishStatus)
	}
	if m.FieldCleared(twitternote.FieldPublishedAt) {
		fields = append(fields, twitternote.FieldPublishedAt)
	}
	if m.FieldCleared(twitternote.FieldFetchedAt) {
		fields = append(fields, twitternote.FieldFetchedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TwitterNoteMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TwitterNoteMutation) ClearField(name string) error {
	switch name {
	case twitternote.FieldPhotoIds:
		m.ClearPhotoIds()
		return nil
	case twitternote.FieldPhotoUrls:
		m.ClearPhotoUrls()
		return nil
	case twitternote.FieldVideoID:
		m.ClearVideoID()
		return nil
	case twitternote.FieldVideoPreview:
		m.ClearVideoPreview()
		return nil
	case twitternote.FieldVideoUrls:
		m.ClearVideoUrls()
		return nil
	case twitternote.FieldMentionID:
		m.ClearMentionID()
		return nil
	case twitternote.FieldMentionUsername:
		m.ClearMentionUsername()
		return nil
	case twitternote.FieldMentionName:
		m.ClearMentionName()
		return nil
	case twitternote.FieldRetweetedStatusID:
		m.ClearRetweetedStatusID()
		return nil
	case twitternote.FieldIsRetweet:
		m.ClearIsRetweet()
		return nil
	case twitternote.FieldPostAt:
		m.ClearPostAt()
		return nil
	case twitternote.FieldUrls:
		m.ClearUrls()
		return nil
	case twitternote.FieldHTMLText:
		m.ClearHTMLText()
		return nil
	case twitternote.FieldPermanentURL:
		m.ClearPermanentURL()
		return nil
	case twitternote.FieldIsReply:
		m.ClearIsReply()
		return nil
	case twitternote.FieldIsPin:
		m.ClearIsPin()
		return nil
	case twitternote.FieldSensitiveContent:
		m.ClearSensitiveContent()
		return nil
	case twitternote.FieldReplyTo:
		m.ClearReplyTo()
		return nil
	case twitternote.FieldEvent:
		m.ClearEvent()
		return nil
	case twitternote.FieldEventID:
		m.ClearEventID()
		return nil
	case twitternote.FieldPublishStatus:
		m.ClearPublishStatus()
		return nil
	case twitternote.FieldPublishedAt:
		m.ClearPublishedAt()
		return nil
	case twitternote.FieldFetchedAt:
		m.ClearFetchedAt()
		return nil
	}
	return fmt.Errorf("unknown TwitterNote nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TwitterNoteMutation) ResetField(name string) error {
	switch name {
	case twitternote.FieldUserID:
		m.ResetUserID()
		return nil
	case twitternote.FieldUserName:
		m.ResetUserName()
		return nil
	case twitternote.FieldConversationID:
		m.ResetConversationID()
		return nil
	case twitternote.FieldText:
		m.ResetText()
		return nil
	case twitternote.FieldLikes:
		m.ResetLikes()
		return nil
	case twitternote.FieldReplies:
		m.ResetReplies()
		return nil
	case twitternote.FieldRetweets:
		m.ResetRetweets()
		return nil
	case twitternote.FieldViews:
		m.ResetViews()
		return nil
	case twitternote.FieldPhotoIds:
		m.ResetPhotoIds()
		return nil
	case twitternote.FieldPhotoUrls:
		m.ResetPhotoUrls()
		return nil
	case twitternote.FieldVideoID:
		m.ResetVideoID()
		return nil
	case twitternote.FieldVideoPreview:
		m.ResetVideoPreview()
		return nil
	case twitternote.FieldVideoUrls:
		m.ResetVideoUrls()
		return nil
	case twitternote.FieldMentionID:
		m.ResetMentionID()
		return nil
	case twitternote.FieldMentionUsername:
		m.ResetMentionUsername()
		return nil
	case twitternote.FieldMentionName:
		m.ResetMentionName()
		return nil
	case twitternote.FieldRetweetedStatusID:
		m.ResetRetweetedStatusID()
		return nil
	case twitternote.FieldIsRetweet:
		m.ResetIsRetweet()
		return nil
	case twitternote.FieldPostAt:
		m.ResetPostAt()
		return nil
	case twitternote.FieldUrls:
		m.ResetUrls()
		return nil
	case twitternote.FieldHTMLText:
		m.ResetHTMLText()
		return nil
	case twitternote.FieldPermanentURL:
		m.ResetPermanentURL()
		return nil
	case twitternote.FieldIsReply:
		m.ResetIsReply()
		return nil
	case twitternote.FieldIsPin:
		m.ResetIsPin()
		return nil
	case twitternote.FieldSensitiveContent:
		m.ResetSensitiveContent()
		return nil
	case twitternote.FieldReplyTo:
		m.ResetReplyTo()
		return nil
	case twitternote.FieldRawYaml:
		m.ResetRawYaml()
		return nil
	case twitternote.FieldHashTags:
		m.ResetHashTags()
		return nil
	case twitternote.FieldEvent:
		m.ResetEvent()
		return nil
	case twitternote.FieldEventID:
		m.ResetEventID()
		return nil
	case twitternote.FieldPublishStatus:
		m.ResetPublishStatus()
		return nil
	case twitternote.FieldPublishedAt:
		m.ResetPublishedAt()
		return nil
	case twitternote.FieldFetchedAt:
		m.ResetFetchedAt()
		return nil
	case twitternote.FieldLanguage:
		m.ResetLanguage()
		return nil
	}
	return fmt.Errorf("unknown TwitterNote field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TwitterNoteMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TwitterNoteMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TwitterNoteMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TwitterNoteMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TwitterNoteMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TwitterNoteMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TwitterNoteMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown TwitterNote unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TwitterNoteMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown TwitterNote edge %s", name)
}

// TwitterNotesFetchHistoryMutation represents an operation that mutates the TwitterNotesFetchHistory nodes in the graph.
type TwitterNotesFetchHistoryMutation struct {
	config
	op             Op
	typ            string
	id             *int64
	user_id        *string
	username       *string
	name           *string
	fetched_at     *time.Time
	fetch_count    *int
	addfetch_count *int
	new_count      *int
	addnew_count   *int
	clearedFields  map[string]struct{}
	done           bool
	oldValue       func(context.Context) (*TwitterNotesFetchHistory, error)
	predicates     []predicate.TwitterNotesFetchHistory
}

var _ ent.Mutation = (*TwitterNotesFetchHistoryMutation)(nil)

// twitternotesfetchhistoryOption allows management of the mutation configuration using functional options.
type twitternotesfetchhistoryOption func(*TwitterNotesFetchHistoryMutation)

// newTwitterNotesFetchHistoryMutation creates new mutation for the TwitterNotesFetchHistory entity.
func newTwitterNotesFetchHistoryMutation(c config, op Op, opts ...twitternotesfetchhistoryOption) *TwitterNotesFetchHistoryMutation {
	m := &TwitterNotesFetchHistoryMutation{
		config:        c,
		op:            op,
		typ:           TypeTwitterNotesFetchHistory,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTwitterNotesFetchHistoryID sets the ID field of the mutation.
func withTwitterNotesFetchHistoryID(id int64) twitternotesfetchhistoryOption {
	return func(m *TwitterNotesFetchHistoryMutation) {
		var (
			err   error
			once  sync.Once
			value *TwitterNotesFetchHistory
		)
		m.oldValue = func(ctx context.Context) (*TwitterNotesFetchHistory, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TwitterNotesFetchHistory.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTwitterNotesFetchHistory sets the old TwitterNotesFetchHistory of the mutation.
func withTwitterNotesFetchHistory(node *TwitterNotesFetchHistory) twitternotesfetchhistoryOption {
	return func(m *TwitterNotesFetchHistoryMutation) {
		m.oldValue = func(context.Context) (*TwitterNotesFetchHistory, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TwitterNotesFetchHistoryMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TwitterNotesFetchHistoryMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("core: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of TwitterNotesFetchHistory entities.
func (m *TwitterNotesFetchHistoryMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TwitterNotesFetchHistoryMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TwitterNotesFetchHistoryMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().TwitterNotesFetchHistory.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUserID sets the "user_id" field.
func (m *TwitterNotesFetchHistoryMutation) SetUserID(s string) {
	m.user_id = &s
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *TwitterNotesFetchHistoryMutation) UserID() (r string, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the TwitterNotesFetchHistory entity.
// If the TwitterNotesFetchHistory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TwitterNotesFetchHistoryMutation) OldUserID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *TwitterNotesFetchHistoryMutation) ResetUserID() {
	m.user_id = nil
}

// SetUsername sets the "username" field.
func (m *TwitterNotesFetchHistoryMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *TwitterNotesFetchHistoryMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the TwitterNotesFetchHistory entity.
// If the TwitterNotesFetchHistory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TwitterNotesFetchHistoryMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ClearUsername clears the value of the "username" field.
func (m *TwitterNotesFetchHistoryMutation) ClearUsername() {
	m.username = nil
	m.clearedFields[twitternotesfetchhistory.FieldUsername] = struct{}{}
}

// UsernameCleared returns if the "username" field was cleared in this mutation.
func (m *TwitterNotesFetchHistoryMutation) UsernameCleared() bool {
	_, ok := m.clearedFields[twitternotesfetchhistory.FieldUsername]
	return ok
}

// ResetUsername resets all changes to the "username" field.
func (m *TwitterNotesFetchHistoryMutation) ResetUsername() {
	m.username = nil
	delete(m.clearedFields, twitternotesfetchhistory.FieldUsername)
}

// SetName sets the "name" field.
func (m *TwitterNotesFetchHistoryMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *TwitterNotesFetchHistoryMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the TwitterNotesFetchHistory entity.
// If the TwitterNotesFetchHistory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TwitterNotesFetchHistoryMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ClearName clears the value of the "name" field.
func (m *TwitterNotesFetchHistoryMutation) ClearName() {
	m.name = nil
	m.clearedFields[twitternotesfetchhistory.FieldName] = struct{}{}
}

// NameCleared returns if the "name" field was cleared in this mutation.
func (m *TwitterNotesFetchHistoryMutation) NameCleared() bool {
	_, ok := m.clearedFields[twitternotesfetchhistory.FieldName]
	return ok
}

// ResetName resets all changes to the "name" field.
func (m *TwitterNotesFetchHistoryMutation) ResetName() {
	m.name = nil
	delete(m.clearedFields, twitternotesfetchhistory.FieldName)
}

// SetFetchedAt sets the "fetched_at" field.
func (m *TwitterNotesFetchHistoryMutation) SetFetchedAt(t time.Time) {
	m.fetched_at = &t
}

// FetchedAt returns the value of the "fetched_at" field in the mutation.
func (m *TwitterNotesFetchHistoryMutation) FetchedAt() (r time.Time, exists bool) {
	v := m.fetched_at
	if v == nil {
		return
	}
	return *v, true
}

// OldFetchedAt returns the old "fetched_at" field's value of the TwitterNotesFetchHistory entity.
// If the TwitterNotesFetchHistory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TwitterNotesFetchHistoryMutation) OldFetchedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFetchedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFetchedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFetchedAt: %w", err)
	}
	return oldValue.FetchedAt, nil
}

// ResetFetchedAt resets all changes to the "fetched_at" field.
func (m *TwitterNotesFetchHistoryMutation) ResetFetchedAt() {
	m.fetched_at = nil
}

// SetFetchCount sets the "fetch_count" field.
func (m *TwitterNotesFetchHistoryMutation) SetFetchCount(i int) {
	m.fetch_count = &i
	m.addfetch_count = nil
}

// FetchCount returns the value of the "fetch_count" field in the mutation.
func (m *TwitterNotesFetchHistoryMutation) FetchCount() (r int, exists bool) {
	v := m.fetch_count
	if v == nil {
		return
	}
	return *v, true
}

// OldFetchCount returns the old "fetch_count" field's value of the TwitterNotesFetchHistory entity.
// If the TwitterNotesFetchHistory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TwitterNotesFetchHistoryMutation) OldFetchCount(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFetchCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFetchCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFetchCount: %w", err)
	}
	return oldValue.FetchCount, nil
}

// AddFetchCount adds i to the "fetch_count" field.
func (m *TwitterNotesFetchHistoryMutation) AddFetchCount(i int) {
	if m.addfetch_count != nil {
		*m.addfetch_count += i
	} else {
		m.addfetch_count = &i
	}
}

// AddedFetchCount returns the value that was added to the "fetch_count" field in this mutation.
func (m *TwitterNotesFetchHistoryMutation) AddedFetchCount() (r int, exists bool) {
	v := m.addfetch_count
	if v == nil {
		return
	}
	return *v, true
}

// ResetFetchCount resets all changes to the "fetch_count" field.
func (m *TwitterNotesFetchHistoryMutation) ResetFetchCount() {
	m.fetch_count = nil
	m.addfetch_count = nil
}

// SetNewCount sets the "new_count" field.
func (m *TwitterNotesFetchHistoryMutation) SetNewCount(i int) {
	m.new_count = &i
	m.addnew_count = nil
}

// NewCount returns the value of the "new_count" field in the mutation.
func (m *TwitterNotesFetchHistoryMutation) NewCount() (r int, exists bool) {
	v := m.new_count
	if v == nil {
		return
	}
	return *v, true
}

// OldNewCount returns the old "new_count" field's value of the TwitterNotesFetchHistory entity.
// If the TwitterNotesFetchHistory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TwitterNotesFetchHistoryMutation) OldNewCount(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNewCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNewCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNewCount: %w", err)
	}
	return oldValue.NewCount, nil
}

// AddNewCount adds i to the "new_count" field.
func (m *TwitterNotesFetchHistoryMutation) AddNewCount(i int) {
	if m.addnew_count != nil {
		*m.addnew_count += i
	} else {
		m.addnew_count = &i
	}
}

// AddedNewCount returns the value that was added to the "new_count" field in this mutation.
func (m *TwitterNotesFetchHistoryMutation) AddedNewCount() (r int, exists bool) {
	v := m.addnew_count
	if v == nil {
		return
	}
	return *v, true
}

// ResetNewCount resets all changes to the "new_count" field.
func (m *TwitterNotesFetchHistoryMutation) ResetNewCount() {
	m.new_count = nil
	m.addnew_count = nil
}

// Where appends a list predicates to the TwitterNotesFetchHistoryMutation builder.
func (m *TwitterNotesFetchHistoryMutation) Where(ps ...predicate.TwitterNotesFetchHistory) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TwitterNotesFetchHistoryMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TwitterNotesFetchHistoryMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.TwitterNotesFetchHistory, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TwitterNotesFetchHistoryMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TwitterNotesFetchHistoryMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (TwitterNotesFetchHistory).
func (m *TwitterNotesFetchHistoryMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TwitterNotesFetchHistoryMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.user_id != nil {
		fields = append(fields, twitternotesfetchhistory.FieldUserID)
	}
	if m.username != nil {
		fields = append(fields, twitternotesfetchhistory.FieldUsername)
	}
	if m.name != nil {
		fields = append(fields, twitternotesfetchhistory.FieldName)
	}
	if m.fetched_at != nil {
		fields = append(fields, twitternotesfetchhistory.FieldFetchedAt)
	}
	if m.fetch_count != nil {
		fields = append(fields, twitternotesfetchhistory.FieldFetchCount)
	}
	if m.new_count != nil {
		fields = append(fields, twitternotesfetchhistory.FieldNewCount)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TwitterNotesFetchHistoryMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case twitternotesfetchhistory.FieldUserID:
		return m.UserID()
	case twitternotesfetchhistory.FieldUsername:
		return m.Username()
	case twitternotesfetchhistory.FieldName:
		return m.Name()
	case twitternotesfetchhistory.FieldFetchedAt:
		return m.FetchedAt()
	case twitternotesfetchhistory.FieldFetchCount:
		return m.FetchCount()
	case twitternotesfetchhistory.FieldNewCount:
		return m.NewCount()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TwitterNotesFetchHistoryMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case twitternotesfetchhistory.FieldUserID:
		return m.OldUserID(ctx)
	case twitternotesfetchhistory.FieldUsername:
		return m.OldUsername(ctx)
	case twitternotesfetchhistory.FieldName:
		return m.OldName(ctx)
	case twitternotesfetchhistory.FieldFetchedAt:
		return m.OldFetchedAt(ctx)
	case twitternotesfetchhistory.FieldFetchCount:
		return m.OldFetchCount(ctx)
	case twitternotesfetchhistory.FieldNewCount:
		return m.OldNewCount(ctx)
	}
	return nil, fmt.Errorf("unknown TwitterNotesFetchHistory field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TwitterNotesFetchHistoryMutation) SetField(name string, value ent.Value) error {
	switch name {
	case twitternotesfetchhistory.FieldUserID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case twitternotesfetchhistory.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case twitternotesfetchhistory.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case twitternotesfetchhistory.FieldFetchedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFetchedAt(v)
		return nil
	case twitternotesfetchhistory.FieldFetchCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFetchCount(v)
		return nil
	case twitternotesfetchhistory.FieldNewCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNewCount(v)
		return nil
	}
	return fmt.Errorf("unknown TwitterNotesFetchHistory field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TwitterNotesFetchHistoryMutation) AddedFields() []string {
	var fields []string
	if m.addfetch_count != nil {
		fields = append(fields, twitternotesfetchhistory.FieldFetchCount)
	}
	if m.addnew_count != nil {
		fields = append(fields, twitternotesfetchhistory.FieldNewCount)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TwitterNotesFetchHistoryMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case twitternotesfetchhistory.FieldFetchCount:
		return m.AddedFetchCount()
	case twitternotesfetchhistory.FieldNewCount:
		return m.AddedNewCount()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TwitterNotesFetchHistoryMutation) AddField(name string, value ent.Value) error {
	switch name {
	case twitternotesfetchhistory.FieldFetchCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddFetchCount(v)
		return nil
	case twitternotesfetchhistory.FieldNewCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddNewCount(v)
		return nil
	}
	return fmt.Errorf("unknown TwitterNotesFetchHistory numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TwitterNotesFetchHistoryMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(twitternotesfetchhistory.FieldUsername) {
		fields = append(fields, twitternotesfetchhistory.FieldUsername)
	}
	if m.FieldCleared(twitternotesfetchhistory.FieldName) {
		fields = append(fields, twitternotesfetchhistory.FieldName)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TwitterNotesFetchHistoryMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TwitterNotesFetchHistoryMutation) ClearField(name string) error {
	switch name {
	case twitternotesfetchhistory.FieldUsername:
		m.ClearUsername()
		return nil
	case twitternotesfetchhistory.FieldName:
		m.ClearName()
		return nil
	}
	return fmt.Errorf("unknown TwitterNotesFetchHistory nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TwitterNotesFetchHistoryMutation) ResetField(name string) error {
	switch name {
	case twitternotesfetchhistory.FieldUserID:
		m.ResetUserID()
		return nil
	case twitternotesfetchhistory.FieldUsername:
		m.ResetUsername()
		return nil
	case twitternotesfetchhistory.FieldName:
		m.ResetName()
		return nil
	case twitternotesfetchhistory.FieldFetchedAt:
		m.ResetFetchedAt()
		return nil
	case twitternotesfetchhistory.FieldFetchCount:
		m.ResetFetchCount()
		return nil
	case twitternotesfetchhistory.FieldNewCount:
		m.ResetNewCount()
		return nil
	}
	return fmt.Errorf("unknown TwitterNotesFetchHistory field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TwitterNotesFetchHistoryMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TwitterNotesFetchHistoryMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TwitterNotesFetchHistoryMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TwitterNotesFetchHistoryMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TwitterNotesFetchHistoryMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TwitterNotesFetchHistoryMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TwitterNotesFetchHistoryMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown TwitterNotesFetchHistory unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TwitterNotesFetchHistoryMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown TwitterNotesFetchHistory edge %s", name)
}

// TwitterProfileMutation represents an operation that mutates the TwitterProfile nodes in the graph.
type TwitterProfileMutation struct {
	config
	op                 Op
	typ                string
	id                 *int
	user_id            *string
	user_name          *string
	name               *string
	raw_yaml           *string
	active             *bool
	joined_time        *time.Time
	likes_count        *int
	addlikes_count     *int
	listed_count       *int
	addlisted_count    *int
	followers_count    *int
	addfollowers_count *int
	following_count    *int
	addfollowing_count *int
	friends_count      *int
	addfriends_count   *int
	twitter_count      *int
	addtwitter_count   *int
	pinned_note_id     *string
	avatar             *string
	banner             *string
	biography          *string
	birthday           *string
	location           *string
	url                *string
	website            *string
	nsec_key           *string
	npub_key           *string
	private_key_hex    *string
	public_key_hex     *string
	publish_nostr      *bool
	clearedFields      map[string]struct{}
	done               bool
	oldValue           func(context.Context) (*TwitterProfile, error)
	predicates         []predicate.TwitterProfile
}

var _ ent.Mutation = (*TwitterProfileMutation)(nil)

// twitterprofileOption allows management of the mutation configuration using functional options.
type twitterprofileOption func(*TwitterProfileMutation)

// newTwitterProfileMutation creates new mutation for the TwitterProfile entity.
func newTwitterProfileMutation(c config, op Op, opts ...twitterprofileOption) *TwitterProfileMutation {
	m := &TwitterProfileMutation{
		config:        c,
		op:            op,
		typ:           TypeTwitterProfile,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTwitterProfileID sets the ID field of the mutation.
func withTwitterProfileID(id int) twitterprofileOption {
	return func(m *TwitterProfileMutation) {
		var (
			err   error
			once  sync.Once
			value *TwitterProfile
		)
		m.oldValue = func(ctx context.Context) (*TwitterProfile, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TwitterProfile.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTwitterProfile sets the old TwitterProfile of the mutation.
func withTwitterProfile(node *TwitterProfile) twitterprofileOption {
	return func(m *TwitterProfileMutation) {
		m.oldValue = func(context.Context) (*TwitterProfile, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TwitterProfileMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TwitterProfileMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("core: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TwitterProfileMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TwitterProfileMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().TwitterProfile.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUserID sets the "user_id" field.
func (m *TwitterProfileMutation) SetUserID(s string) {
	m.user_id = &s
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *TwitterProfileMutation) UserID() (r string, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the TwitterProfile entity.
// If the TwitterProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TwitterProfileMutation) OldUserID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *TwitterProfileMutation) ResetUserID() {
	m.user_id = nil
}

// SetUserName sets the "user_name" field.
func (m *TwitterProfileMutation) SetUserName(s string) {
	m.user_name = &s
}

// UserName returns the value of the "user_name" field in the mutation.
func (m *TwitterProfileMutation) UserName() (r string, exists bool) {
	v := m.user_name
	if v == nil {
		return
	}
	return *v, true
}

// OldUserName returns the old "user_name" field's value of the TwitterProfile entity.
// If the TwitterProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TwitterProfileMutation) OldUserName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserName: %w", err)
	}
	return oldValue.UserName, nil
}

// ResetUserName resets all changes to the "user_name" field.
func (m *TwitterProfileMutation) ResetUserName() {
	m.user_name = nil
}

// SetName sets the "name" field.
func (m *TwitterProfileMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *TwitterProfileMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the TwitterProfile entity.
// If the TwitterProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TwitterProfileMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *TwitterProfileMutation) ResetName() {
	m.name = nil
}

// SetRawYaml sets the "raw_yaml" field.
func (m *TwitterProfileMutation) SetRawYaml(s string) {
	m.raw_yaml = &s
}

// RawYaml returns the value of the "raw_yaml" field in the mutation.
func (m *TwitterProfileMutation) RawYaml() (r string, exists bool) {
	v := m.raw_yaml
	if v == nil {
		return
	}
	return *v, true
}

// OldRawYaml returns the old "raw_yaml" field's value of the TwitterProfile entity.
// If the TwitterProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TwitterProfileMutation) OldRawYaml(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRawYaml is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRawYaml requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRawYaml: %w", err)
	}
	return oldValue.RawYaml, nil
}

// ResetRawYaml resets all changes to the "raw_yaml" field.
func (m *TwitterProfileMutation) ResetRawYaml() {
	m.raw_yaml = nil
}

// SetActive sets the "active" field.
func (m *TwitterProfileMutation) SetActive(b bool) {
	m.active = &b
}

// Active returns the value of the "active" field in the mutation.
func (m *TwitterProfileMutation) Active() (r bool, exists bool) {
	v := m.active
	if v == nil {
		return
	}
	return *v, true
}

// OldActive returns the old "active" field's value of the TwitterProfile entity.
// If the TwitterProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TwitterProfileMutation) OldActive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldActive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldActive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActive: %w", err)
	}
	return oldValue.Active, nil
}

// ClearActive clears the value of the "active" field.
func (m *TwitterProfileMutation) ClearActive() {
	m.active = nil
	m.clearedFields[twitterprofile.FieldActive] = struct{}{}
}

// ActiveCleared returns if the "active" field was cleared in this mutation.
func (m *TwitterProfileMutation) ActiveCleared() bool {
	_, ok := m.clearedFields[twitterprofile.FieldActive]
	return ok
}

// ResetActive resets all changes to the "active" field.
func (m *TwitterProfileMutation) ResetActive() {
	m.active = nil
	delete(m.clearedFields, twitterprofile.FieldActive)
}

// SetJoinedTime sets the "joined_time" field.
func (m *TwitterProfileMutation) SetJoinedTime(t time.Time) {
	m.joined_time = &t
}

// JoinedTime returns the value of the "joined_time" field in the mutation.
func (m *TwitterProfileMutation) JoinedTime() (r time.Time, exists bool) {
	v := m.joined_time
	if v == nil {
		return
	}
	return *v, true
}

// OldJoinedTime returns the old "joined_time" field's value of the TwitterProfile entity.
// If the TwitterProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TwitterProfileMutation) OldJoinedTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldJoinedTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldJoinedTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldJoinedTime: %w", err)
	}
	return oldValue.JoinedTime, nil
}

// ClearJoinedTime clears the value of the "joined_time" field.
func (m *TwitterProfileMutation) ClearJoinedTime() {
	m.joined_time = nil
	m.clearedFields[twitterprofile.FieldJoinedTime] = struct{}{}
}

// JoinedTimeCleared returns if the "joined_time" field was cleared in this mutation.
func (m *TwitterProfileMutation) JoinedTimeCleared() bool {
	_, ok := m.clearedFields[twitterprofile.FieldJoinedTime]
	return ok
}

// ResetJoinedTime resets all changes to the "joined_time" field.
func (m *TwitterProfileMutation) ResetJoinedTime() {
	m.joined_time = nil
	delete(m.clearedFields, twitterprofile.FieldJoinedTime)
}

// SetLikesCount sets the "likes_count" field.
func (m *TwitterProfileMutation) SetLikesCount(i int) {
	m.likes_count = &i
	m.addlikes_count = nil
}

// LikesCount returns the value of the "likes_count" field in the mutation.
func (m *TwitterProfileMutation) LikesCount() (r int, exists bool) {
	v := m.likes_count
	if v == nil {
		return
	}
	return *v, true
}

// OldLikesCount returns the old "likes_count" field's value of the TwitterProfile entity.
// If the TwitterProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TwitterProfileMutation) OldLikesCount(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLikesCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLikesCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLikesCount: %w", err)
	}
	return oldValue.LikesCount, nil
}

// AddLikesCount adds i to the "likes_count" field.
func (m *TwitterProfileMutation) AddLikesCount(i int) {
	if m.addlikes_count != nil {
		*m.addlikes_count += i
	} else {
		m.addlikes_count = &i
	}
}

// AddedLikesCount returns the value that was added to the "likes_count" field in this mutation.
func (m *TwitterProfileMutation) AddedLikesCount() (r int, exists bool) {
	v := m.addlikes_count
	if v == nil {
		return
	}
	return *v, true
}

// ClearLikesCount clears the value of the "likes_count" field.
func (m *TwitterProfileMutation) ClearLikesCount() {
	m.likes_count = nil
	m.addlikes_count = nil
	m.clearedFields[twitterprofile.FieldLikesCount] = struct{}{}
}

// LikesCountCleared returns if the "likes_count" field was cleared in this mutation.
func (m *TwitterProfileMutation) LikesCountCleared() bool {
	_, ok := m.clearedFields[twitterprofile.FieldLikesCount]
	return ok
}

// ResetLikesCount resets all changes to the "likes_count" field.
func (m *TwitterProfileMutation) ResetLikesCount() {
	m.likes_count = nil
	m.addlikes_count = nil
	delete(m.clearedFields, twitterprofile.FieldLikesCount)
}

// SetListedCount sets the "listed_count" field.
func (m *TwitterProfileMutation) SetListedCount(i int) {
	m.listed_count = &i
	m.addlisted_count = nil
}

// ListedCount returns the value of the "listed_count" field in the mutation.
func (m *TwitterProfileMutation) ListedCount() (r int, exists bool) {
	v := m.listed_count
	if v == nil {
		return
	}
	return *v, true
}

// OldListedCount returns the old "listed_count" field's value of the TwitterProfile entity.
// If the TwitterProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TwitterProfileMutation) OldListedCount(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldListedCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldListedCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldListedCount: %w", err)
	}
	return oldValue.ListedCount, nil
}

// AddListedCount adds i to the "listed_count" field.
func (m *TwitterProfileMutation) AddListedCount(i int) {
	if m.addlisted_count != nil {
		*m.addlisted_count += i
	} else {
		m.addlisted_count = &i
	}
}

// AddedListedCount returns the value that was added to the "listed_count" field in this mutation.
func (m *TwitterProfileMutation) AddedListedCount() (r int, exists bool) {
	v := m.addlisted_count
	if v == nil {
		return
	}
	return *v, true
}

// ClearListedCount clears the value of the "listed_count" field.
func (m *TwitterProfileMutation) ClearListedCount() {
	m.listed_count = nil
	m.addlisted_count = nil
	m.clearedFields[twitterprofile.FieldListedCount] = struct{}{}
}

// ListedCountCleared returns if the "listed_count" field was cleared in this mutation.
func (m *TwitterProfileMutation) ListedCountCleared() bool {
	_, ok := m.clearedFields[twitterprofile.FieldListedCount]
	return ok
}

// ResetListedCount resets all changes to the "listed_count" field.
func (m *TwitterProfileMutation) ResetListedCount() {
	m.listed_count = nil
	m.addlisted_count = nil
	delete(m.clearedFields, twitterprofile.FieldListedCount)
}

// SetFollowersCount sets the "followers_count" field.
func (m *TwitterProfileMutation) SetFollowersCount(i int) {
	m.followers_count = &i
	m.addfollowers_count = nil
}

// FollowersCount returns the value of the "followers_count" field in the mutation.
func (m *TwitterProfileMutation) FollowersCount() (r int, exists bool) {
	v := m.followers_count
	if v == nil {
		return
	}
	return *v, true
}

// OldFollowersCount returns the old "followers_count" field's value of the TwitterProfile entity.
// If the TwitterProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TwitterProfileMutation) OldFollowersCount(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFollowersCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFollowersCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFollowersCount: %w", err)
	}
	return oldValue.FollowersCount, nil
}

// AddFollowersCount adds i to the "followers_count" field.
func (m *TwitterProfileMutation) AddFollowersCount(i int) {
	if m.addfollowers_count != nil {
		*m.addfollowers_count += i
	} else {
		m.addfollowers_count = &i
	}
}

// AddedFollowersCount returns the value that was added to the "followers_count" field in this mutation.
func (m *TwitterProfileMutation) AddedFollowersCount() (r int, exists bool) {
	v := m.addfollowers_count
	if v == nil {
		return
	}
	return *v, true
}

// ClearFollowersCount clears the value of the "followers_count" field.
func (m *TwitterProfileMutation) ClearFollowersCount() {
	m.followers_count = nil
	m.addfollowers_count = nil
	m.clearedFields[twitterprofile.FieldFollowersCount] = struct{}{}
}

// FollowersCountCleared returns if the "followers_count" field was cleared in this mutation.
func (m *TwitterProfileMutation) FollowersCountCleared() bool {
	_, ok := m.clearedFields[twitterprofile.FieldFollowersCount]
	return ok
}

// ResetFollowersCount resets all changes to the "followers_count" field.
func (m *TwitterProfileMutation) ResetFollowersCount() {
	m.followers_count = nil
	m.addfollowers_count = nil
	delete(m.clearedFields, twitterprofile.FieldFollowersCount)
}

// SetFollowingCount sets the "following_count" field.
func (m *TwitterProfileMutation) SetFollowingCount(i int) {
	m.following_count = &i
	m.addfollowing_count = nil
}

// FollowingCount returns the value of the "following_count" field in the mutation.
func (m *TwitterProfileMutation) FollowingCount() (r int, exists bool) {
	v := m.following_count
	if v == nil {
		return
	}
	return *v, true
}

// OldFollowingCount returns the old "following_count" field's value of the TwitterProfile entity.
// If the TwitterProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TwitterProfileMutation) OldFollowingCount(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFollowingCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFollowingCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFollowingCount: %w", err)
	}
	return oldValue.FollowingCount, nil
}

// AddFollowingCount adds i to the "following_count" field.
func (m *TwitterProfileMutation) AddFollowingCount(i int) {
	if m.addfollowing_count != nil {
		*m.addfollowing_count += i
	} else {
		m.addfollowing_count = &i
	}
}

// AddedFollowingCount returns the value that was added to the "following_count" field in this mutation.
func (m *TwitterProfileMutation) AddedFollowingCount() (r int, exists bool) {
	v := m.addfollowing_count
	if v == nil {
		return
	}
	return *v, true
}

// ClearFollowingCount clears the value of the "following_count" field.
func (m *TwitterProfileMutation) ClearFollowingCount() {
	m.following_count = nil
	m.addfollowing_count = nil
	m.clearedFields[twitterprofile.FieldFollowingCount] = struct{}{}
}

// FollowingCountCleared returns if the "following_count" field was cleared in this mutation.
func (m *TwitterProfileMutation) FollowingCountCleared() bool {
	_, ok := m.clearedFields[twitterprofile.FieldFollowingCount]
	return ok
}

// ResetFollowingCount resets all changes to the "following_count" field.
func (m *TwitterProfileMutation) ResetFollowingCount() {
	m.following_count = nil
	m.addfollowing_count = nil
	delete(m.clearedFields, twitterprofile.FieldFollowingCount)
}

// SetFriendsCount sets the "friends_count" field.
func (m *TwitterProfileMutation) SetFriendsCount(i int) {
	m.friends_count = &i
	m.addfriends_count = nil
}

// FriendsCount returns the value of the "friends_count" field in the mutation.
func (m *TwitterProfileMutation) FriendsCount() (r int, exists bool) {
	v := m.friends_count
	if v == nil {
		return
	}
	return *v, true
}

// OldFriendsCount returns the old "friends_count" field's value of the TwitterProfile entity.
// If the TwitterProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TwitterProfileMutation) OldFriendsCount(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFriendsCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFriendsCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFriendsCount: %w", err)
	}
	return oldValue.FriendsCount, nil
}

// AddFriendsCount adds i to the "friends_count" field.
func (m *TwitterProfileMutation) AddFriendsCount(i int) {
	if m.addfriends_count != nil {
		*m.addfriends_count += i
	} else {
		m.addfriends_count = &i
	}
}

// AddedFriendsCount returns the value that was added to the "friends_count" field in this mutation.
func (m *TwitterProfileMutation) AddedFriendsCount() (r int, exists bool) {
	v := m.addfriends_count
	if v == nil {
		return
	}
	return *v, true
}

// ClearFriendsCount clears the value of the "friends_count" field.
func (m *TwitterProfileMutation) ClearFriendsCount() {
	m.friends_count = nil
	m.addfriends_count = nil
	m.clearedFields[twitterprofile.FieldFriendsCount] = struct{}{}
}

// FriendsCountCleared returns if the "friends_count" field was cleared in this mutation.
func (m *TwitterProfileMutation) FriendsCountCleared() bool {
	_, ok := m.clearedFields[twitterprofile.FieldFriendsCount]
	return ok
}

// ResetFriendsCount resets all changes to the "friends_count" field.
func (m *TwitterProfileMutation) ResetFriendsCount() {
	m.friends_count = nil
	m.addfriends_count = nil
	delete(m.clearedFields, twitterprofile.FieldFriendsCount)
}

// SetTwitterCount sets the "twitter_count" field.
func (m *TwitterProfileMutation) SetTwitterCount(i int) {
	m.twitter_count = &i
	m.addtwitter_count = nil
}

// TwitterCount returns the value of the "twitter_count" field in the mutation.
func (m *TwitterProfileMutation) TwitterCount() (r int, exists bool) {
	v := m.twitter_count
	if v == nil {
		return
	}
	return *v, true
}

// OldTwitterCount returns the old "twitter_count" field's value of the TwitterProfile entity.
// If the TwitterProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TwitterProfileMutation) OldTwitterCount(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTwitterCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTwitterCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTwitterCount: %w", err)
	}
	return oldValue.TwitterCount, nil
}

// AddTwitterCount adds i to the "twitter_count" field.
func (m *TwitterProfileMutation) AddTwitterCount(i int) {
	if m.addtwitter_count != nil {
		*m.addtwitter_count += i
	} else {
		m.addtwitter_count = &i
	}
}

// AddedTwitterCount returns the value that was added to the "twitter_count" field in this mutation.
func (m *TwitterProfileMutation) AddedTwitterCount() (r int, exists bool) {
	v := m.addtwitter_count
	if v == nil {
		return
	}
	return *v, true
}

// ClearTwitterCount clears the value of the "twitter_count" field.
func (m *TwitterProfileMutation) ClearTwitterCount() {
	m.twitter_count = nil
	m.addtwitter_count = nil
	m.clearedFields[twitterprofile.FieldTwitterCount] = struct{}{}
}

// TwitterCountCleared returns if the "twitter_count" field was cleared in this mutation.
func (m *TwitterProfileMutation) TwitterCountCleared() bool {
	_, ok := m.clearedFields[twitterprofile.FieldTwitterCount]
	return ok
}

// ResetTwitterCount resets all changes to the "twitter_count" field.
func (m *TwitterProfileMutation) ResetTwitterCount() {
	m.twitter_count = nil
	m.addtwitter_count = nil
	delete(m.clearedFields, twitterprofile.FieldTwitterCount)
}

// SetPinnedNoteID sets the "pinned_note_id" field.
func (m *TwitterProfileMutation) SetPinnedNoteID(s string) {
	m.pinned_note_id = &s
}

// PinnedNoteID returns the value of the "pinned_note_id" field in the mutation.
func (m *TwitterProfileMutation) PinnedNoteID() (r string, exists bool) {
	v := m.pinned_note_id
	if v == nil {
		return
	}
	return *v, true
}

// OldPinnedNoteID returns the old "pinned_note_id" field's value of the TwitterProfile entity.
// If the TwitterProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TwitterProfileMutation) OldPinnedNoteID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPinnedNoteID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPinnedNoteID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPinnedNoteID: %w", err)
	}
	return oldValue.PinnedNoteID, nil
}

// ClearPinnedNoteID clears the value of the "pinned_note_id" field.
func (m *TwitterProfileMutation) ClearPinnedNoteID() {
	m.pinned_note_id = nil
	m.clearedFields[twitterprofile.FieldPinnedNoteID] = struct{}{}
}

// PinnedNoteIDCleared returns if the "pinned_note_id" field was cleared in this mutation.
func (m *TwitterProfileMutation) PinnedNoteIDCleared() bool {
	_, ok := m.clearedFields[twitterprofile.FieldPinnedNoteID]
	return ok
}

// ResetPinnedNoteID resets all changes to the "pinned_note_id" field.
func (m *TwitterProfileMutation) ResetPinnedNoteID() {
	m.pinned_note_id = nil
	delete(m.clearedFields, twitterprofile.FieldPinnedNoteID)
}

// SetAvatar sets the "avatar" field.
func (m *TwitterProfileMutation) SetAvatar(s string) {
	m.avatar = &s
}

// Avatar returns the value of the "avatar" field in the mutation.
func (m *TwitterProfileMutation) Avatar() (r string, exists bool) {
	v := m.avatar
	if v == nil {
		return
	}
	return *v, true
}

// OldAvatar returns the old "avatar" field's value of the TwitterProfile entity.
// If the TwitterProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TwitterProfileMutation) OldAvatar(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAvatar is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAvatar requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAvatar: %w", err)
	}
	return oldValue.Avatar, nil
}

// ClearAvatar clears the value of the "avatar" field.
func (m *TwitterProfileMutation) ClearAvatar() {
	m.avatar = nil
	m.clearedFields[twitterprofile.FieldAvatar] = struct{}{}
}

// AvatarCleared returns if the "avatar" field was cleared in this mutation.
func (m *TwitterProfileMutation) AvatarCleared() bool {
	_, ok := m.clearedFields[twitterprofile.FieldAvatar]
	return ok
}

// ResetAvatar resets all changes to the "avatar" field.
func (m *TwitterProfileMutation) ResetAvatar() {
	m.avatar = nil
	delete(m.clearedFields, twitterprofile.FieldAvatar)
}

// SetBanner sets the "banner" field.
func (m *TwitterProfileMutation) SetBanner(s string) {
	m.banner = &s
}

// Banner returns the value of the "banner" field in the mutation.
func (m *TwitterProfileMutation) Banner() (r string, exists bool) {
	v := m.banner
	if v == nil {
		return
	}
	return *v, true
}

// OldBanner returns the old "banner" field's value of the TwitterProfile entity.
// If the TwitterProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TwitterProfileMutation) OldBanner(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBanner is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBanner requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBanner: %w", err)
	}
	return oldValue.Banner, nil
}

// ClearBanner clears the value of the "banner" field.
func (m *TwitterProfileMutation) ClearBanner() {
	m.banner = nil
	m.clearedFields[twitterprofile.FieldBanner] = struct{}{}
}

// BannerCleared returns if the "banner" field was cleared in this mutation.
func (m *TwitterProfileMutation) BannerCleared() bool {
	_, ok := m.clearedFields[twitterprofile.FieldBanner]
	return ok
}

// ResetBanner resets all changes to the "banner" field.
func (m *TwitterProfileMutation) ResetBanner() {
	m.banner = nil
	delete(m.clearedFields, twitterprofile.FieldBanner)
}

// SetBiography sets the "biography" field.
func (m *TwitterProfileMutation) SetBiography(s string) {
	m.biography = &s
}

// Biography returns the value of the "biography" field in the mutation.
func (m *TwitterProfileMutation) Biography() (r string, exists bool) {
	v := m.biography
	if v == nil {
		return
	}
	return *v, true
}

// OldBiography returns the old "biography" field's value of the TwitterProfile entity.
// If the TwitterProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TwitterProfileMutation) OldBiography(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBiography is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBiography requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBiography: %w", err)
	}
	return oldValue.Biography, nil
}

// ClearBiography clears the value of the "biography" field.
func (m *TwitterProfileMutation) ClearBiography() {
	m.biography = nil
	m.clearedFields[twitterprofile.FieldBiography] = struct{}{}
}

// BiographyCleared returns if the "biography" field was cleared in this mutation.
func (m *TwitterProfileMutation) BiographyCleared() bool {
	_, ok := m.clearedFields[twitterprofile.FieldBiography]
	return ok
}

// ResetBiography resets all changes to the "biography" field.
func (m *TwitterProfileMutation) ResetBiography() {
	m.biography = nil
	delete(m.clearedFields, twitterprofile.FieldBiography)
}

// SetBirthday sets the "birthday" field.
func (m *TwitterProfileMutation) SetBirthday(s string) {
	m.birthday = &s
}

// Birthday returns the value of the "birthday" field in the mutation.
func (m *TwitterProfileMutation) Birthday() (r string, exists bool) {
	v := m.birthday
	if v == nil {
		return
	}
	return *v, true
}

// OldBirthday returns the old "birthday" field's value of the TwitterProfile entity.
// If the TwitterProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TwitterProfileMutation) OldBirthday(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBirthday is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBirthday requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBirthday: %w", err)
	}
	return oldValue.Birthday, nil
}

// ClearBirthday clears the value of the "birthday" field.
func (m *TwitterProfileMutation) ClearBirthday() {
	m.birthday = nil
	m.clearedFields[twitterprofile.FieldBirthday] = struct{}{}
}

// BirthdayCleared returns if the "birthday" field was cleared in this mutation.
func (m *TwitterProfileMutation) BirthdayCleared() bool {
	_, ok := m.clearedFields[twitterprofile.FieldBirthday]
	return ok
}

// ResetBirthday resets all changes to the "birthday" field.
func (m *TwitterProfileMutation) ResetBirthday() {
	m.birthday = nil
	delete(m.clearedFields, twitterprofile.FieldBirthday)
}

// SetLocation sets the "location" field.
func (m *TwitterProfileMutation) SetLocation(s string) {
	m.location = &s
}

// Location returns the value of the "location" field in the mutation.
func (m *TwitterProfileMutation) Location() (r string, exists bool) {
	v := m.location
	if v == nil {
		return
	}
	return *v, true
}

// OldLocation returns the old "location" field's value of the TwitterProfile entity.
// If the TwitterProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TwitterProfileMutation) OldLocation(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLocation is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLocation requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLocation: %w", err)
	}
	return oldValue.Location, nil
}

// ClearLocation clears the value of the "location" field.
func (m *TwitterProfileMutation) ClearLocation() {
	m.location = nil
	m.clearedFields[twitterprofile.FieldLocation] = struct{}{}
}

// LocationCleared returns if the "location" field was cleared in this mutation.
func (m *TwitterProfileMutation) LocationCleared() bool {
	_, ok := m.clearedFields[twitterprofile.FieldLocation]
	return ok
}

// ResetLocation resets all changes to the "location" field.
func (m *TwitterProfileMutation) ResetLocation() {
	m.location = nil
	delete(m.clearedFields, twitterprofile.FieldLocation)
}

// SetURL sets the "url" field.
func (m *TwitterProfileMutation) SetURL(s string) {
	m.url = &s
}

// URL returns the value of the "url" field in the mutation.
func (m *TwitterProfileMutation) URL() (r string, exists bool) {
	v := m.url
	if v == nil {
		return
	}
	return *v, true
}

// OldURL returns the old "url" field's value of the TwitterProfile entity.
// If the TwitterProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TwitterProfileMutation) OldURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldURL: %w", err)
	}
	return oldValue.URL, nil
}

// ClearURL clears the value of the "url" field.
func (m *TwitterProfileMutation) ClearURL() {
	m.url = nil
	m.clearedFields[twitterprofile.FieldURL] = struct{}{}
}

// URLCleared returns if the "url" field was cleared in this mutation.
func (m *TwitterProfileMutation) URLCleared() bool {
	_, ok := m.clearedFields[twitterprofile.FieldURL]
	return ok
}

// ResetURL resets all changes to the "url" field.
func (m *TwitterProfileMutation) ResetURL() {
	m.url = nil
	delete(m.clearedFields, twitterprofile.FieldURL)
}

// SetWebsite sets the "website" field.
func (m *TwitterProfileMutation) SetWebsite(s string) {
	m.website = &s
}

// Website returns the value of the "website" field in the mutation.
func (m *TwitterProfileMutation) Website() (r string, exists bool) {
	v := m.website
	if v == nil {
		return
	}
	return *v, true
}

// OldWebsite returns the old "website" field's value of the TwitterProfile entity.
// If the TwitterProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TwitterProfileMutation) OldWebsite(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWebsite is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWebsite requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWebsite: %w", err)
	}
	return oldValue.Website, nil
}

// ClearWebsite clears the value of the "website" field.
func (m *TwitterProfileMutation) ClearWebsite() {
	m.website = nil
	m.clearedFields[twitterprofile.FieldWebsite] = struct{}{}
}

// WebsiteCleared returns if the "website" field was cleared in this mutation.
func (m *TwitterProfileMutation) WebsiteCleared() bool {
	_, ok := m.clearedFields[twitterprofile.FieldWebsite]
	return ok
}

// ResetWebsite resets all changes to the "website" field.
func (m *TwitterProfileMutation) ResetWebsite() {
	m.website = nil
	delete(m.clearedFields, twitterprofile.FieldWebsite)
}

// SetNsecKey sets the "nsec_key" field.
func (m *TwitterProfileMutation) SetNsecKey(s string) {
	m.nsec_key = &s
}

// NsecKey returns the value of the "nsec_key" field in the mutation.
func (m *TwitterProfileMutation) NsecKey() (r string, exists bool) {
	v := m.nsec_key
	if v == nil {
		return
	}
	return *v, true
}

// OldNsecKey returns the old "nsec_key" field's value of the TwitterProfile entity.
// If the TwitterProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TwitterProfileMutation) OldNsecKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNsecKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNsecKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNsecKey: %w", err)
	}
	return oldValue.NsecKey, nil
}

// ClearNsecKey clears the value of the "nsec_key" field.
func (m *TwitterProfileMutation) ClearNsecKey() {
	m.nsec_key = nil
	m.clearedFields[twitterprofile.FieldNsecKey] = struct{}{}
}

// NsecKeyCleared returns if the "nsec_key" field was cleared in this mutation.
func (m *TwitterProfileMutation) NsecKeyCleared() bool {
	_, ok := m.clearedFields[twitterprofile.FieldNsecKey]
	return ok
}

// ResetNsecKey resets all changes to the "nsec_key" field.
func (m *TwitterProfileMutation) ResetNsecKey() {
	m.nsec_key = nil
	delete(m.clearedFields, twitterprofile.FieldNsecKey)
}

// SetNpubKey sets the "npub_key" field.
func (m *TwitterProfileMutation) SetNpubKey(s string) {
	m.npub_key = &s
}

// NpubKey returns the value of the "npub_key" field in the mutation.
func (m *TwitterProfileMutation) NpubKey() (r string, exists bool) {
	v := m.npub_key
	if v == nil {
		return
	}
	return *v, true
}

// OldNpubKey returns the old "npub_key" field's value of the TwitterProfile entity.
// If the TwitterProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TwitterProfileMutation) OldNpubKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNpubKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNpubKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNpubKey: %w", err)
	}
	return oldValue.NpubKey, nil
}

// ClearNpubKey clears the value of the "npub_key" field.
func (m *TwitterProfileMutation) ClearNpubKey() {
	m.npub_key = nil
	m.clearedFields[twitterprofile.FieldNpubKey] = struct{}{}
}

// NpubKeyCleared returns if the "npub_key" field was cleared in this mutation.
func (m *TwitterProfileMutation) NpubKeyCleared() bool {
	_, ok := m.clearedFields[twitterprofile.FieldNpubKey]
	return ok
}

// ResetNpubKey resets all changes to the "npub_key" field.
func (m *TwitterProfileMutation) ResetNpubKey() {
	m.npub_key = nil
	delete(m.clearedFields, twitterprofile.FieldNpubKey)
}

// SetPrivateKeyHex sets the "private_key_hex" field.
func (m *TwitterProfileMutation) SetPrivateKeyHex(s string) {
	m.private_key_hex = &s
}

// PrivateKeyHex returns the value of the "private_key_hex" field in the mutation.
func (m *TwitterProfileMutation) PrivateKeyHex() (r string, exists bool) {
	v := m.private_key_hex
	if v == nil {
		return
	}
	return *v, true
}

// OldPrivateKeyHex returns the old "private_key_hex" field's value of the TwitterProfile entity.
// If the TwitterProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TwitterProfileMutation) OldPrivateKeyHex(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPrivateKeyHex is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPrivateKeyHex requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrivateKeyHex: %w", err)
	}
	return oldValue.PrivateKeyHex, nil
}

// ClearPrivateKeyHex clears the value of the "private_key_hex" field.
func (m *TwitterProfileMutation) ClearPrivateKeyHex() {
	m.private_key_hex = nil
	m.clearedFields[twitterprofile.FieldPrivateKeyHex] = struct{}{}
}

// PrivateKeyHexCleared returns if the "private_key_hex" field was cleared in this mutation.
func (m *TwitterProfileMutation) PrivateKeyHexCleared() bool {
	_, ok := m.clearedFields[twitterprofile.FieldPrivateKeyHex]
	return ok
}

// ResetPrivateKeyHex resets all changes to the "private_key_hex" field.
func (m *TwitterProfileMutation) ResetPrivateKeyHex() {
	m.private_key_hex = nil
	delete(m.clearedFields, twitterprofile.FieldPrivateKeyHex)
}

// SetPublicKeyHex sets the "public_key_hex" field.
func (m *TwitterProfileMutation) SetPublicKeyHex(s string) {
	m.public_key_hex = &s
}

// PublicKeyHex returns the value of the "public_key_hex" field in the mutation.
func (m *TwitterProfileMutation) PublicKeyHex() (r string, exists bool) {
	v := m.public_key_hex
	if v == nil {
		return
	}
	return *v, true
}

// OldPublicKeyHex returns the old "public_key_hex" field's value of the TwitterProfile entity.
// If the TwitterProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TwitterProfileMutation) OldPublicKeyHex(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPublicKeyHex is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPublicKeyHex requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPublicKeyHex: %w", err)
	}
	return oldValue.PublicKeyHex, nil
}

// ClearPublicKeyHex clears the value of the "public_key_hex" field.
func (m *TwitterProfileMutation) ClearPublicKeyHex() {
	m.public_key_hex = nil
	m.clearedFields[twitterprofile.FieldPublicKeyHex] = struct{}{}
}

// PublicKeyHexCleared returns if the "public_key_hex" field was cleared in this mutation.
func (m *TwitterProfileMutation) PublicKeyHexCleared() bool {
	_, ok := m.clearedFields[twitterprofile.FieldPublicKeyHex]
	return ok
}

// ResetPublicKeyHex resets all changes to the "public_key_hex" field.
func (m *TwitterProfileMutation) ResetPublicKeyHex() {
	m.public_key_hex = nil
	delete(m.clearedFields, twitterprofile.FieldPublicKeyHex)
}

// SetPublishNostr sets the "publish_nostr" field.
func (m *TwitterProfileMutation) SetPublishNostr(b bool) {
	m.publish_nostr = &b
}

// PublishNostr returns the value of the "publish_nostr" field in the mutation.
func (m *TwitterProfileMutation) PublishNostr() (r bool, exists bool) {
	v := m.publish_nostr
	if v == nil {
		return
	}
	return *v, true
}

// OldPublishNostr returns the old "publish_nostr" field's value of the TwitterProfile entity.
// If the TwitterProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TwitterProfileMutation) OldPublishNostr(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPublishNostr is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPublishNostr requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPublishNostr: %w", err)
	}
	return oldValue.PublishNostr, nil
}

// ClearPublishNostr clears the value of the "publish_nostr" field.
func (m *TwitterProfileMutation) ClearPublishNostr() {
	m.publish_nostr = nil
	m.clearedFields[twitterprofile.FieldPublishNostr] = struct{}{}
}

// PublishNostrCleared returns if the "publish_nostr" field was cleared in this mutation.
func (m *TwitterProfileMutation) PublishNostrCleared() bool {
	_, ok := m.clearedFields[twitterprofile.FieldPublishNostr]
	return ok
}

// ResetPublishNostr resets all changes to the "publish_nostr" field.
func (m *TwitterProfileMutation) ResetPublishNostr() {
	m.publish_nostr = nil
	delete(m.clearedFields, twitterprofile.FieldPublishNostr)
}

// Where appends a list predicates to the TwitterProfileMutation builder.
func (m *TwitterProfileMutation) Where(ps ...predicate.TwitterProfile) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TwitterProfileMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TwitterProfileMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.TwitterProfile, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TwitterProfileMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TwitterProfileMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (TwitterProfile).
func (m *TwitterProfileMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TwitterProfileMutation) Fields() []string {
	fields := make([]string, 0, 25)
	if m.user_id != nil {
		fields = append(fields, twitterprofile.FieldUserID)
	}
	if m.user_name != nil {
		fields = append(fields, twitterprofile.FieldUserName)
	}
	if m.name != nil {
		fields = append(fields, twitterprofile.FieldName)
	}
	if m.raw_yaml != nil {
		fields = append(fields, twitterprofile.FieldRawYaml)
	}
	if m.active != nil {
		fields = append(fields, twitterprofile.FieldActive)
	}
	if m.joined_time != nil {
		fields = append(fields, twitterprofile.FieldJoinedTime)
	}
	if m.likes_count != nil {
		fields = append(fields, twitterprofile.FieldLikesCount)
	}
	if m.listed_count != nil {
		fields = append(fields, twitterprofile.FieldListedCount)
	}
	if m.followers_count != nil {
		fields = append(fields, twitterprofile.FieldFollowersCount)
	}
	if m.following_count != nil {
		fields = append(fields, twitterprofile.FieldFollowingCount)
	}
	if m.friends_count != nil {
		fields = append(fields, twitterprofile.FieldFriendsCount)
	}
	if m.twitter_count != nil {
		fields = append(fields, twitterprofile.FieldTwitterCount)
	}
	if m.pinned_note_id != nil {
		fields = append(fields, twitterprofile.FieldPinnedNoteID)
	}
	if m.avatar != nil {
		fields = append(fields, twitterprofile.FieldAvatar)
	}
	if m.banner != nil {
		fields = append(fields, twitterprofile.FieldBanner)
	}
	if m.biography != nil {
		fields = append(fields, twitterprofile.FieldBiography)
	}
	if m.birthday != nil {
		fields = append(fields, twitterprofile.FieldBirthday)
	}
	if m.location != nil {
		fields = append(fields, twitterprofile.FieldLocation)
	}
	if m.url != nil {
		fields = append(fields, twitterprofile.FieldURL)
	}
	if m.website != nil {
		fields = append(fields, twitterprofile.FieldWebsite)
	}
	if m.nsec_key != nil {
		fields = append(fields, twitterprofile.FieldNsecKey)
	}
	if m.npub_key != nil {
		fields = append(fields, twitterprofile.FieldNpubKey)
	}
	if m.private_key_hex != nil {
		fields = append(fields, twitterprofile.FieldPrivateKeyHex)
	}
	if m.public_key_hex != nil {
		fields = append(fields, twitterprofile.FieldPublicKeyHex)
	}
	if m.publish_nostr != nil {
		fields = append(fields, twitterprofile.FieldPublishNostr)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TwitterProfileMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case twitterprofile.FieldUserID:
		return m.UserID()
	case twitterprofile.FieldUserName:
		return m.UserName()
	case twitterprofile.FieldName:
		return m.Name()
	case twitterprofile.FieldRawYaml:
		return m.RawYaml()
	case twitterprofile.FieldActive:
		return m.Active()
	case twitterprofile.FieldJoinedTime:
		return m.JoinedTime()
	case twitterprofile.FieldLikesCount:
		return m.LikesCount()
	case twitterprofile.FieldListedCount:
		return m.ListedCount()
	case twitterprofile.FieldFollowersCount:
		return m.FollowersCount()
	case twitterprofile.FieldFollowingCount:
		return m.FollowingCount()
	case twitterprofile.FieldFriendsCount:
		return m.FriendsCount()
	case twitterprofile.FieldTwitterCount:
		return m.TwitterCount()
	case twitterprofile.FieldPinnedNoteID:
		return m.PinnedNoteID()
	case twitterprofile.FieldAvatar:
		return m.Avatar()
	case twitterprofile.FieldBanner:
		return m.Banner()
	case twitterprofile.FieldBiography:
		return m.Biography()
	case twitterprofile.FieldBirthday:
		return m.Birthday()
	case twitterprofile.FieldLocation:
		return m.Location()
	case twitterprofile.FieldURL:
		return m.URL()
	case twitterprofile.FieldWebsite:
		return m.Website()
	case twitterprofile.FieldNsecKey:
		return m.NsecKey()
	case twitterprofile.FieldNpubKey:
		return m.NpubKey()
	case twitterprofile.FieldPrivateKeyHex:
		return m.PrivateKeyHex()
	case twitterprofile.FieldPublicKeyHex:
		return m.PublicKeyHex()
	case twitterprofile.FieldPublishNostr:
		return m.PublishNostr()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TwitterProfileMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case twitterprofile.FieldUserID:
		return m.OldUserID(ctx)
	case twitterprofile.FieldUserName:
		return m.OldUserName(ctx)
	case twitterprofile.FieldName:
		return m.OldName(ctx)
	case twitterprofile.FieldRawYaml:
		return m.OldRawYaml(ctx)
	case twitterprofile.FieldActive:
		return m.OldActive(ctx)
	case twitterprofile.FieldJoinedTime:
		return m.OldJoinedTime(ctx)
	case twitterprofile.FieldLikesCount:
		return m.OldLikesCount(ctx)
	case twitterprofile.FieldListedCount:
		return m.OldListedCount(ctx)
	case twitterprofile.FieldFollowersCount:
		return m.OldFollowersCount(ctx)
	case twitterprofile.FieldFollowingCount:
		return m.OldFollowingCount(ctx)
	case twitterprofile.FieldFriendsCount:
		return m.OldFriendsCount(ctx)
	case twitterprofile.FieldTwitterCount:
		return m.OldTwitterCount(ctx)
	case twitterprofile.FieldPinnedNoteID:
		return m.OldPinnedNoteID(ctx)
	case twitterprofile.FieldAvatar:
		return m.OldAvatar(ctx)
	case twitterprofile.FieldBanner:
		return m.OldBanner(ctx)
	case twitterprofile.FieldBiography:
		return m.OldBiography(ctx)
	case twitterprofile.FieldBirthday:
		return m.OldBirthday(ctx)
	case twitterprofile.FieldLocation:
		return m.OldLocation(ctx)
	case twitterprofile.FieldURL:
		return m.OldURL(ctx)
	case twitterprofile.FieldWebsite:
		return m.OldWebsite(ctx)
	case twitterprofile.FieldNsecKey:
		return m.OldNsecKey(ctx)
	case twitterprofile.FieldNpubKey:
		return m.OldNpubKey(ctx)
	case twitterprofile.FieldPrivateKeyHex:
		return m.OldPrivateKeyHex(ctx)
	case twitterprofile.FieldPublicKeyHex:
		return m.OldPublicKeyHex(ctx)
	case twitterprofile.FieldPublishNostr:
		return m.OldPublishNostr(ctx)
	}
	return nil, fmt.Errorf("unknown TwitterProfile field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TwitterProfileMutation) SetField(name string, value ent.Value) error {
	switch name {
	case twitterprofile.FieldUserID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case twitterprofile.FieldUserName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserName(v)
		return nil
	case twitterprofile.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case twitterprofile.FieldRawYaml:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRawYaml(v)
		return nil
	case twitterprofile.FieldActive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActive(v)
		return nil
	case twitterprofile.FieldJoinedTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetJoinedTime(v)
		return nil
	case twitterprofile.FieldLikesCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLikesCount(v)
		return nil
	case twitterprofile.FieldListedCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetListedCount(v)
		return nil
	case twitterprofile.FieldFollowersCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFollowersCount(v)
		return nil
	case twitterprofile.FieldFollowingCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFollowingCount(v)
		return nil
	case twitterprofile.FieldFriendsCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFriendsCount(v)
		return nil
	case twitterprofile.FieldTwitterCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTwitterCount(v)
		return nil
	case twitterprofile.FieldPinnedNoteID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPinnedNoteID(v)
		return nil
	case twitterprofile.FieldAvatar:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAvatar(v)
		return nil
	case twitterprofile.FieldBanner:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBanner(v)
		return nil
	case twitterprofile.FieldBiography:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBiography(v)
		return nil
	case twitterprofile.FieldBirthday:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBirthday(v)
		return nil
	case twitterprofile.FieldLocation:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLocation(v)
		return nil
	case twitterprofile.FieldURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetURL(v)
		return nil
	case twitterprofile.FieldWebsite:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWebsite(v)
		return nil
	case twitterprofile.FieldNsecKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNsecKey(v)
		return nil
	case twitterprofile.FieldNpubKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNpubKey(v)
		return nil
	case twitterprofile.FieldPrivateKeyHex:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrivateKeyHex(v)
		return nil
	case twitterprofile.FieldPublicKeyHex:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPublicKeyHex(v)
		return nil
	case twitterprofile.FieldPublishNostr:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPublishNostr(v)
		return nil
	}
	return fmt.Errorf("unknown TwitterProfile field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TwitterProfileMutation) AddedFields() []string {
	var fields []string
	if m.addlikes_count != nil {
		fields = append(fields, twitterprofile.FieldLikesCount)
	}
	if m.addlisted_count != nil {
		fields = append(fields, twitterprofile.FieldListedCount)
	}
	if m.addfollowers_count != nil {
		fields = append(fields, twitterprofile.FieldFollowersCount)
	}
	if m.addfollowing_count != nil {
		fields = append(fields, twitterprofile.FieldFollowingCount)
	}
	if m.addfriends_count != nil {
		fields = append(fields, twitterprofile.FieldFriendsCount)
	}
	if m.addtwitter_count != nil {
		fields = append(fields, twitterprofile.FieldTwitterCount)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TwitterProfileMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case twitterprofile.FieldLikesCount:
		return m.AddedLikesCount()
	case twitterprofile.FieldListedCount:
		return m.AddedListedCount()
	case twitterprofile.FieldFollowersCount:
		return m.AddedFollowersCount()
	case twitterprofile.FieldFollowingCount:
		return m.AddedFollowingCount()
	case twitterprofile.FieldFriendsCount:
		return m.AddedFriendsCount()
	case twitterprofile.FieldTwitterCount:
		return m.AddedTwitterCount()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TwitterProfileMutation) AddField(name string, value ent.Value) error {
	switch name {
	case twitterprofile.FieldLikesCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLikesCount(v)
		return nil
	case twitterprofile.FieldListedCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddListedCount(v)
		return nil
	case twitterprofile.FieldFollowersCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddFollowersCount(v)
		return nil
	case twitterprofile.FieldFollowingCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddFollowingCount(v)
		return nil
	case twitterprofile.FieldFriendsCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddFriendsCount(v)
		return nil
	case twitterprofile.FieldTwitterCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTwitterCount(v)
		return nil
	}
	return fmt.Errorf("unknown TwitterProfile numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TwitterProfileMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(twitterprofile.FieldActive) {
		fields = append(fields, twitterprofile.FieldActive)
	}
	if m.FieldCleared(twitterprofile.FieldJoinedTime) {
		fields = append(fields, twitterprofile.FieldJoinedTime)
	}
	if m.FieldCleared(twitterprofile.FieldLikesCount) {
		fields = append(fields, twitterprofile.FieldLikesCount)
	}
	if m.FieldCleared(twitterprofile.FieldListedCount) {
		fields = append(fields, twitterprofile.FieldListedCount)
	}
	if m.FieldCleared(twitterprofile.FieldFollowersCount) {
		fields = append(fields, twitterprofile.FieldFollowersCount)
	}
	if m.FieldCleared(twitterprofile.FieldFollowingCount) {
		fields = append(fields, twitterprofile.FieldFollowingCount)
	}
	if m.FieldCleared(twitterprofile.FieldFriendsCount) {
		fields = append(fields, twitterprofile.FieldFriendsCount)
	}
	if m.FieldCleared(twitterprofile.FieldTwitterCount) {
		fields = append(fields, twitterprofile.FieldTwitterCount)
	}
	if m.FieldCleared(twitterprofile.FieldPinnedNoteID) {
		fields = append(fields, twitterprofile.FieldPinnedNoteID)
	}
	if m.FieldCleared(twitterprofile.FieldAvatar) {
		fields = append(fields, twitterprofile.FieldAvatar)
	}
	if m.FieldCleared(twitterprofile.FieldBanner) {
		fields = append(fields, twitterprofile.FieldBanner)
	}
	if m.FieldCleared(twitterprofile.FieldBiography) {
		fields = append(fields, twitterprofile.FieldBiography)
	}
	if m.FieldCleared(twitterprofile.FieldBirthday) {
		fields = append(fields, twitterprofile.FieldBirthday)
	}
	if m.FieldCleared(twitterprofile.FieldLocation) {
		fields = append(fields, twitterprofile.FieldLocation)
	}
	if m.FieldCleared(twitterprofile.FieldURL) {
		fields = append(fields, twitterprofile.FieldURL)
	}
	if m.FieldCleared(twitterprofile.FieldWebsite) {
		fields = append(fields, twitterprofile.FieldWebsite)
	}
	if m.FieldCleared(twitterprofile.FieldNsecKey) {
		fields = append(fields, twitterprofile.FieldNsecKey)
	}
	if m.FieldCleared(twitterprofile.FieldNpubKey) {
		fields = append(fields, twitterprofile.FieldNpubKey)
	}
	if m.FieldCleared(twitterprofile.FieldPrivateKeyHex) {
		fields = append(fields, twitterprofile.FieldPrivateKeyHex)
	}
	if m.FieldCleared(twitterprofile.FieldPublicKeyHex) {
		fields = append(fields, twitterprofile.FieldPublicKeyHex)
	}
	if m.FieldCleared(twitterprofile.FieldPublishNostr) {
		fields = append(fields, twitterprofile.FieldPublishNostr)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TwitterProfileMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TwitterProfileMutation) ClearField(name string) error {
	switch name {
	case twitterprofile.FieldActive:
		m.ClearActive()
		return nil
	case twitterprofile.FieldJoinedTime:
		m.ClearJoinedTime()
		return nil
	case twitterprofile.FieldLikesCount:
		m.ClearLikesCount()
		return nil
	case twitterprofile.FieldListedCount:
		m.ClearListedCount()
		return nil
	case twitterprofile.FieldFollowersCount:
		m.ClearFollowersCount()
		return nil
	case twitterprofile.FieldFollowingCount:
		m.ClearFollowingCount()
		return nil
	case twitterprofile.FieldFriendsCount:
		m.ClearFriendsCount()
		return nil
	case twitterprofile.FieldTwitterCount:
		m.ClearTwitterCount()
		return nil
	case twitterprofile.FieldPinnedNoteID:
		m.ClearPinnedNoteID()
		return nil
	case twitterprofile.FieldAvatar:
		m.ClearAvatar()
		return nil
	case twitterprofile.FieldBanner:
		m.ClearBanner()
		return nil
	case twitterprofile.FieldBiography:
		m.ClearBiography()
		return nil
	case twitterprofile.FieldBirthday:
		m.ClearBirthday()
		return nil
	case twitterprofile.FieldLocation:
		m.ClearLocation()
		return nil
	case twitterprofile.FieldURL:
		m.ClearURL()
		return nil
	case twitterprofile.FieldWebsite:
		m.ClearWebsite()
		return nil
	case twitterprofile.FieldNsecKey:
		m.ClearNsecKey()
		return nil
	case twitterprofile.FieldNpubKey:
		m.ClearNpubKey()
		return nil
	case twitterprofile.FieldPrivateKeyHex:
		m.ClearPrivateKeyHex()
		return nil
	case twitterprofile.FieldPublicKeyHex:
		m.ClearPublicKeyHex()
		return nil
	case twitterprofile.FieldPublishNostr:
		m.ClearPublishNostr()
		return nil
	}
	return fmt.Errorf("unknown TwitterProfile nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TwitterProfileMutation) ResetField(name string) error {
	switch name {
	case twitterprofile.FieldUserID:
		m.ResetUserID()
		return nil
	case twitterprofile.FieldUserName:
		m.ResetUserName()
		return nil
	case twitterprofile.FieldName:
		m.ResetName()
		return nil
	case twitterprofile.FieldRawYaml:
		m.ResetRawYaml()
		return nil
	case twitterprofile.FieldActive:
		m.ResetActive()
		return nil
	case twitterprofile.FieldJoinedTime:
		m.ResetJoinedTime()
		return nil
	case twitterprofile.FieldLikesCount:
		m.ResetLikesCount()
		return nil
	case twitterprofile.FieldListedCount:
		m.ResetListedCount()
		return nil
	case twitterprofile.FieldFollowersCount:
		m.ResetFollowersCount()
		return nil
	case twitterprofile.FieldFollowingCount:
		m.ResetFollowingCount()
		return nil
	case twitterprofile.FieldFriendsCount:
		m.ResetFriendsCount()
		return nil
	case twitterprofile.FieldTwitterCount:
		m.ResetTwitterCount()
		return nil
	case twitterprofile.FieldPinnedNoteID:
		m.ResetPinnedNoteID()
		return nil
	case twitterprofile.FieldAvatar:
		m.ResetAvatar()
		return nil
	case twitterprofile.FieldBanner:
		m.ResetBanner()
		return nil
	case twitterprofile.FieldBiography:
		m.ResetBiography()
		return nil
	case twitterprofile.FieldBirthday:
		m.ResetBirthday()
		return nil
	case twitterprofile.FieldLocation:
		m.ResetLocation()
		return nil
	case twitterprofile.FieldURL:
		m.ResetURL()
		return nil
	case twitterprofile.FieldWebsite:
		m.ResetWebsite()
		return nil
	case twitterprofile.FieldNsecKey:
		m.ResetNsecKey()
		return nil
	case twitterprofile.FieldNpubKey:
		m.ResetNpubKey()
		return nil
	case twitterprofile.FieldPrivateKeyHex:
		m.ResetPrivateKeyHex()
		return nil
	case twitterprofile.FieldPublicKeyHex:
		m.ResetPublicKeyHex()
		return nil
	case twitterprofile.FieldPublishNostr:
		m.ResetPublishNostr()
		return nil
	}
	return fmt.Errorf("unknown TwitterProfile field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TwitterProfileMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TwitterProfileMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TwitterProfileMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TwitterProfileMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TwitterProfileMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TwitterProfileMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TwitterProfileMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown TwitterProfile unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TwitterProfileMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown TwitterProfile edge %s", name)
}
