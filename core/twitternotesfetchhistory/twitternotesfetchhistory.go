// Code generated by ent, DO NOT EDIT.

package twitternotesfetchhistory

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the twitternotesfetchhistory type in the database.
	Label = "twitter_notes_fetch_history"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldFetchedAt holds the string denoting the fetched_at field in the database.
	FieldFetchedAt = "fetched_at"
	// FieldFetchCount holds the string denoting the fetch_count field in the database.
	FieldFetchCount = "fetch_count"
	// FieldNewCount holds the string denoting the new_count field in the database.
	FieldNewCount = "new_count"
	// Table holds the table name of the twitternotesfetchhistory in the database.
	Table = "twitter_notes_fetch_histories"
)

// Columns holds all SQL columns for twitternotesfetchhistory fields.
var Columns = []string{
	FieldID,
	FieldUserID,
	FieldUsername,
	FieldName,
	FieldFetchedAt,
	FieldFetchCount,
	FieldNewCount,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the TwitterNotesFetchHistory queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByUsername orders the results by the username field.
func ByUsername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsername, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByFetchedAt orders the results by the fetched_at field.
func ByFetchedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFetchedAt, opts...).ToFunc()
}

// ByFetchCount orders the results by the fetch_count field.
func ByFetchCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFetchCount, opts...).ToFunc()
}

// ByNewCount orders the results by the new_count field.
func ByNewCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNewCount, opts...).ToFunc()
}
