// Code generated by ent, DO NOT EDIT.

package twitternotesfetchhistory

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"freefrom.space/nobot/core/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.TwitterNotesFetchHistory {
	return predicate.TwitterNotesFetchHistory(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.TwitterNotesFetchHistory {
	return predicate.TwitterNotesFetchHistory(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.TwitterNotesFetchHistory {
	return predicate.TwitterNotesFetchHistory(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.TwitterNotesFetchHistory {
	return predicate.TwitterNotesFetchHistory(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.TwitterNotesFetchHistory {
	return predicate.TwitterNotesFetchHistory(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.TwitterNotesFetchHistory {
	return predicate.TwitterNotesFetchHistory(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.TwitterNotesFetchHistory {
	return predicate.TwitterNotesFetchHistory(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.TwitterNotesFetchHistory {
	return predicate.TwitterNotesFetchHistory(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.TwitterNotesFetchHistory {
	return predicate.TwitterNotesFetchHistory(sql.FieldLTE(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v string) predicate.TwitterNotesFetchHistory {
	return predicate.TwitterNotesFetchHistory(sql.FieldEQ(FieldUserID, v))
}

// Username applies equality check predicate on the "username" field. It's identical to UsernameEQ.
func Username(v string) predicate.TwitterNotesFetchHistory {
	return predicate.TwitterNotesFetchHistory(sql.FieldEQ(FieldUsername, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.TwitterNotesFetchHistory {
	return predicate.TwitterNotesFetchHistory(sql.FieldEQ(FieldName, v))
}

// FetchedAt applies equality check predicate on the "fetched_at" field. It's identical to FetchedAtEQ.
func FetchedAt(v time.Time) predicate.TwitterNotesFetchHistory {
	return predicate.TwitterNotesFetchHistory(sql.FieldEQ(FieldFetchedAt, v))
}

// FetchCount applies equality check predicate on the "fetch_count" field. It's identical to FetchCountEQ.
func FetchCount(v int) predicate.TwitterNotesFetchHistory {
	return predicate.TwitterNotesFetchHistory(sql.FieldEQ(FieldFetchCount, v))
}

// NewCount applies equality check predicate on the "new_count" field. It's identical to NewCountEQ.
func NewCount(v int) predicate.TwitterNotesFetchHistory {
	return predicate.TwitterNotesFetchHistory(sql.FieldEQ(FieldNewCount, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v string) predicate.TwitterNotesFetchHistory {
	return predicate.TwitterNotesFetchHistory(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v string) predicate.TwitterNotesFetchHistory {
	return predicate.TwitterNotesFetchHistory(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...string) predicate.TwitterNotesFetchHistory {
	return predicate.TwitterNotesFetchHistory(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...string) predicate.TwitterNotesFetchHistory {
	return predicate.TwitterNotesFetchHistory(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v string) predicate.TwitterNotesFetchHistory {
	return predicate.TwitterNotesFetchHistory(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v string) predicate.TwitterNotesFetchHistory {
	return predicate.TwitterNotesFetchHistory(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v string) predicate.TwitterNotesFetchHistory {
	return predicate.TwitterNotesFetchHistory(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v string) predicate.TwitterNotesFetchHistory {
	return predicate.TwitterNotesFetchHistory(sql.FieldLTE(FieldUserID, v))
}

// UserIDContains applies the Contains predicate on the "user_id" field.
func UserIDContains(v string) predicate.TwitterNotesFetchHistory {
	return predicate.TwitterNotesFetchHistory(sql.FieldContains(FieldUserID, v))
}

// UserIDHasPrefix applies the HasPrefix predicate on the "user_id" field.
func UserIDHasPrefix(v string) predicate.TwitterNotesFetchHistory {
	return predicate.TwitterNotesFetchHistory(sql.FieldHasPrefix(FieldUserID, v))
}

// UserIDHasSuffix applies the HasSuffix predicate on the "user_id" field.
func UserIDHasSuffix(v string) predicate.TwitterNotesFetchHistory {
	return predicate.TwitterNotesFetchHistory(sql.FieldHasSuffix(FieldUserID, v))
}

// UserIDEqualFold applies the EqualFold predicate on the "user_id" field.
func UserIDEqualFold(v string) predicate.TwitterNotesFetchHistory {
	return predicate.TwitterNotesFetchHistory(sql.FieldEqualFold(FieldUserID, v))
}

// UserIDContainsFold applies the ContainsFold predicate on the "user_id" field.
func UserIDContainsFold(v string) predicate.TwitterNotesFetchHistory {
	return predicate.TwitterNotesFetchHistory(sql.FieldContainsFold(FieldUserID, v))
}

// UsernameEQ applies the EQ predicate on the "username" field.
func UsernameEQ(v string) predicate.TwitterNotesFetchHistory {
	return predicate.TwitterNotesFetchHistory(sql.FieldEQ(FieldUsername, v))
}

// UsernameNEQ applies the NEQ predicate on the "username" field.
func UsernameNEQ(v string) predicate.TwitterNotesFetchHistory {
	return predicate.TwitterNotesFetchHistory(sql.FieldNEQ(FieldUsername, v))
}

// UsernameIn applies the In predicate on the "username" field.
func UsernameIn(vs ...string) predicate.TwitterNotesFetchHistory {
	return predicate.TwitterNotesFetchHistory(sql.FieldIn(FieldUsername, vs...))
}

// UsernameNotIn applies the NotIn predicate on the "username" field.
func UsernameNotIn(vs ...string) predicate.TwitterNotesFetchHistory {
	return predicate.TwitterNotesFetchHistory(sql.FieldNotIn(FieldUsername, vs...))
}

// UsernameGT applies the GT predicate on the "username" field.
func UsernameGT(v string) predicate.TwitterNotesFetchHistory {
	return predicate.TwitterNotesFetchHistory(sql.FieldGT(FieldUsername, v))
}

// UsernameGTE applies the GTE predicate on the "username" field.
func UsernameGTE(v string) predicate.TwitterNotesFetchHistory {
	return predicate.TwitterNotesFetchHistory(sql.FieldGTE(FieldUsername, v))
}

// UsernameLT applies the LT predicate on the "username" field.
func UsernameLT(v string) predicate.TwitterNotesFetchHistory {
	return predicate.TwitterNotesFetchHistory(sql.FieldLT(FieldUsername, v))
}

// UsernameLTE applies the LTE predicate on the "username" field.
func UsernameLTE(v string) predicate.TwitterNotesFetchHistory {
	return predicate.TwitterNotesFetchHistory(sql.FieldLTE(FieldUsername, v))
}

// UsernameContains applies the Contains predicate on the "username" field.
func UsernameContains(v string) predicate.TwitterNotesFetchHistory {
	return predicate.TwitterNotesFetchHistory(sql.FieldContains(FieldUsername, v))
}

// UsernameHasPrefix applies the HasPrefix predicate on the "username" field.
func UsernameHasPrefix(v string) predicate.TwitterNotesFetchHistory {
	return predicate.TwitterNotesFetchHistory(sql.FieldHasPrefix(FieldUsername, v))
}

// UsernameHasSuffix applies the HasSuffix predicate on the "username" field.
func UsernameHasSuffix(v string) predicate.TwitterNotesFetchHistory {
	return predicate.TwitterNotesFetchHistory(sql.FieldHasSuffix(FieldUsername, v))
}

// UsernameIsNil applies the IsNil predicate on the "username" field.
func UsernameIsNil() predicate.TwitterNotesFetchHistory {
	return predicate.TwitterNotesFetchHistory(sql.FieldIsNull(FieldUsername))
}

// UsernameNotNil applies the NotNil predicate on the "username" field.
func UsernameNotNil() predicate.TwitterNotesFetchHistory {
	return predicate.TwitterNotesFetchHistory(sql.FieldNotNull(FieldUsername))
}

// UsernameEqualFold applies the EqualFold predicate on the "username" field.
func UsernameEqualFold(v string) predicate.TwitterNotesFetchHistory {
	return predicate.TwitterNotesFetchHistory(sql.FieldEqualFold(FieldUsername, v))
}

// UsernameContainsFold applies the ContainsFold predicate on the "username" field.
func UsernameContainsFold(v string) predicate.TwitterNotesFetchHistory {
	return predicate.TwitterNotesFetchHistory(sql.FieldContainsFold(FieldUsername, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.TwitterNotesFetchHistory {
	return predicate.TwitterNotesFetchHistory(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.TwitterNotesFetchHistory {
	return predicate.TwitterNotesFetchHistory(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.TwitterNotesFetchHistory {
	return predicate.TwitterNotesFetchHistory(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.TwitterNotesFetchHistory {
	return predicate.TwitterNotesFetchHistory(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.TwitterNotesFetchHistory {
	return predicate.TwitterNotesFetchHistory(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.TwitterNotesFetchHistory {
	return predicate.TwitterNotesFetchHistory(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.TwitterNotesFetchHistory {
	return predicate.TwitterNotesFetchHistory(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.TwitterNotesFetchHistory {
	return predicate.TwitterNotesFetchHistory(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.TwitterNotesFetchHistory {
	return predicate.TwitterNotesFetchHistory(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.TwitterNotesFetchHistory {
	return predicate.TwitterNotesFetchHistory(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.TwitterNotesFetchHistory {
	return predicate.TwitterNotesFetchHistory(sql.FieldHasSuffix(FieldName, v))
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.TwitterNotesFetchHistory {
	return predicate.TwitterNotesFetchHistory(sql.FieldIsNull(FieldName))
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.TwitterNotesFetchHistory {
	return predicate.TwitterNotesFetchHistory(sql.FieldNotNull(FieldName))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.TwitterNotesFetchHistory {
	return predicate.TwitterNotesFetchHistory(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.TwitterNotesFetchHistory {
	return predicate.TwitterNotesFetchHistory(sql.FieldContainsFold(FieldName, v))
}

// FetchedAtEQ applies the EQ predicate on the "fetched_at" field.
func FetchedAtEQ(v time.Time) predicate.TwitterNotesFetchHistory {
	return predicate.TwitterNotesFetchHistory(sql.FieldEQ(FieldFetchedAt, v))
}

// FetchedAtNEQ applies the NEQ predicate on the "fetched_at" field.
func FetchedAtNEQ(v time.Time) predicate.TwitterNotesFetchHistory {
	return predicate.TwitterNotesFetchHistory(sql.FieldNEQ(FieldFetchedAt, v))
}

// FetchedAtIn applies the In predicate on the "fetched_at" field.
func FetchedAtIn(vs ...time.Time) predicate.TwitterNotesFetchHistory {
	return predicate.TwitterNotesFetchHistory(sql.FieldIn(FieldFetchedAt, vs...))
}

// FetchedAtNotIn applies the NotIn predicate on the "fetched_at" field.
func FetchedAtNotIn(vs ...time.Time) predicate.TwitterNotesFetchHistory {
	return predicate.TwitterNotesFetchHistory(sql.FieldNotIn(FieldFetchedAt, vs...))
}

// FetchedAtGT applies the GT predicate on the "fetched_at" field.
func FetchedAtGT(v time.Time) predicate.TwitterNotesFetchHistory {
	return predicate.TwitterNotesFetchHistory(sql.FieldGT(FieldFetchedAt, v))
}

// FetchedAtGTE applies the GTE predicate on the "fetched_at" field.
func FetchedAtGTE(v time.Time) predicate.TwitterNotesFetchHistory {
	return predicate.TwitterNotesFetchHistory(sql.FieldGTE(FieldFetchedAt, v))
}

// FetchedAtLT applies the LT predicate on the "fetched_at" field.
func FetchedAtLT(v time.Time) predicate.TwitterNotesFetchHistory {
	return predicate.TwitterNotesFetchHistory(sql.FieldLT(FieldFetchedAt, v))
}

// FetchedAtLTE applies the LTE predicate on the "fetched_at" field.
func FetchedAtLTE(v time.Time) predicate.TwitterNotesFetchHistory {
	return predicate.TwitterNotesFetchHistory(sql.FieldLTE(FieldFetchedAt, v))
}

// FetchCountEQ applies the EQ predicate on the "fetch_count" field.
func FetchCountEQ(v int) predicate.TwitterNotesFetchHistory {
	return predicate.TwitterNotesFetchHistory(sql.FieldEQ(FieldFetchCount, v))
}

// FetchCountNEQ applies the NEQ predicate on the "fetch_count" field.
func FetchCountNEQ(v int) predicate.TwitterNotesFetchHistory {
	return predicate.TwitterNotesFetchHistory(sql.FieldNEQ(FieldFetchCount, v))
}

// FetchCountIn applies the In predicate on the "fetch_count" field.
func FetchCountIn(vs ...int) predicate.TwitterNotesFetchHistory {
	return predicate.TwitterNotesFetchHistory(sql.FieldIn(FieldFetchCount, vs...))
}

// FetchCountNotIn applies the NotIn predicate on the "fetch_count" field.
func FetchCountNotIn(vs ...int) predicate.TwitterNotesFetchHistory {
	return predicate.TwitterNotesFetchHistory(sql.FieldNotIn(FieldFetchCount, vs...))
}

// FetchCountGT applies the GT predicate on the "fetch_count" field.
func FetchCountGT(v int) predicate.TwitterNotesFetchHistory {
	return predicate.TwitterNotesFetchHistory(sql.FieldGT(FieldFetchCount, v))
}

// FetchCountGTE applies the GTE predicate on the "fetch_count" field.
func FetchCountGTE(v int) predicate.TwitterNotesFetchHistory {
	return predicate.TwitterNotesFetchHistory(sql.FieldGTE(FieldFetchCount, v))
}

// FetchCountLT applies the LT predicate on the "fetch_count" field.
func FetchCountLT(v int) predicate.TwitterNotesFetchHistory {
	return predicate.TwitterNotesFetchHistory(sql.FieldLT(FieldFetchCount, v))
}

// FetchCountLTE applies the LTE predicate on the "fetch_count" field.
func FetchCountLTE(v int) predicate.TwitterNotesFetchHistory {
	return predicate.TwitterNotesFetchHistory(sql.FieldLTE(FieldFetchCount, v))
}

// NewCountEQ applies the EQ predicate on the "new_count" field.
func NewCountEQ(v int) predicate.TwitterNotesFetchHistory {
	return predicate.TwitterNotesFetchHistory(sql.FieldEQ(FieldNewCount, v))
}

// NewCountNEQ applies the NEQ predicate on the "new_count" field.
func NewCountNEQ(v int) predicate.TwitterNotesFetchHistory {
	return predicate.TwitterNotesFetchHistory(sql.FieldNEQ(FieldNewCount, v))
}

// NewCountIn applies the In predicate on the "new_count" field.
func NewCountIn(vs ...int) predicate.TwitterNotesFetchHistory {
	return predicate.TwitterNotesFetchHistory(sql.FieldIn(FieldNewCount, vs...))
}

// NewCountNotIn applies the NotIn predicate on the "new_count" field.
func NewCountNotIn(vs ...int) predicate.TwitterNotesFetchHistory {
	return predicate.TwitterNotesFetchHistory(sql.FieldNotIn(FieldNewCount, vs...))
}

// NewCountGT applies the GT predicate on the "new_count" field.
func NewCountGT(v int) predicate.TwitterNotesFetchHistory {
	return predicate.TwitterNotesFetchHistory(sql.FieldGT(FieldNewCount, v))
}

// NewCountGTE applies the GTE predicate on the "new_count" field.
func NewCountGTE(v int) predicate.TwitterNotesFetchHistory {
	return predicate.TwitterNotesFetchHistory(sql.FieldGTE(FieldNewCount, v))
}

// NewCountLT applies the LT predicate on the "new_count" field.
func NewCountLT(v int) predicate.TwitterNotesFetchHistory {
	return predicate.TwitterNotesFetchHistory(sql.FieldLT(FieldNewCount, v))
}

// NewCountLTE applies the LTE predicate on the "new_count" field.
func NewCountLTE(v int) predicate.TwitterNotesFetchHistory {
	return predicate.TwitterNotesFetchHistory(sql.FieldLTE(FieldNewCount, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TwitterNotesFetchHistory) predicate.TwitterNotesFetchHistory {
	return predicate.TwitterNotesFetchHistory(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TwitterNotesFetchHistory) predicate.TwitterNotesFetchHistory {
	return predicate.TwitterNotesFetchHistory(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TwitterNotesFetchHistory) predicate.TwitterNotesFetchHistory {
	return predicate.TwitterNotesFetchHistory(sql.NotPredicates(p))
}
